[tool.poetry]
name = "renku-data-services"
version = "0.0.1"
description = "Collection of services that deal with data in Postgres."
authors = ["Swiss Data Science Center <contact@datascience.ch>"]
readme = "README.md"
license = "Apache License 2.0"
packages = [
  { include = "renku_data_services/data_api", from = "bases" },
  { include = "renku_data_services/background_jobs", from = "bases" },
  { include = "renku_data_services/authn", from = "components" },
  { include = "renku_data_services/db_config", from = "components" },
  { include = "renku_data_services/app_config", from = "components" },
  { include = "renku_data_services/authz", from = "components" },
  { include = "renku_data_services/crc", from = "components" },
  { include = "renku_data_services/k8s", from = "components" },
  { include = "renku_data_services/migrations", from = "components" },
  { include = "renku_data_services/errors", from = "components" },
  { include = "renku_data_services/base_models", from = "components" },
  { include = "renku_data_services/base_api", from = "components" },
  { include = "renku_data_services/storage", from = "components" },
  { include = "renku_data_services/utils", from = "components" },
  { include = "renku_data_services/git", from = "components" },
  { include = "renku_data_services/users", from = "components" },
  { include = "renku_data_services/project", from = "components" },
  { include = "renku_data_services/message_queue", from = "components" },
  { include = "renku_data_services/namespace", from = "components" },
  { include = "renku_data_services/session", from = "components" },
  { include = "renku_data_services/message_queue", from = "components" },
  { include = "renku_data_services/secrets", from = "components" },
  { include = "renku_data_services/connected_services", from = "components" },
  { include = "renku_data_services/repositories", from = "components" },
  { include = "renku_data_services/notebooks", from = "components" },
  { include = "renku_data_services/platform", from = "components" },
]

[tool.poetry.dependencies]
python = "^3.12"
sanic = { extras = ["ext"], version = "^24.6.0" }
pydantic = { extras = ["email"], version = "^2.9.1" }
datamodel-code-generator = "^0.24.2"
sqlalchemy = { extras = ["asyncio"], version = "^2.0.34" }
alembic = "^1.13.2"
asyncpg = "^0.29.0"
pyjwt = { extras = ["crypto"], version = "^2.6.0" }
tenacity = "^8.5.0"
kubernetes = "^30.1.0"
python-ulid = "^2.7.0"
python-gitlab = "^4.11.1"
psycopg = { version = "^3.2.1", extras = ["binary"] }
urllib3 = "^2.2.3"
deepmerge = "^2.0"
authlib = "^1.3.2"
redis = "^5.0.7"
dataclasses-avroschema = "^0.63.0"
undictify = "^0.11.3"
types-redis = "^4.6.0.20240903"
prometheus-sanic = "^3.0.0"
prometheus_client = "^0.7.1"
kubernetes-asyncio = "^31.1.0"
marshmallow = "^3.21.3"
escapism = "^1.0.1"
httpx = "^0.27.0"
kr8s = "^0.17.0"
werkzeug = "^3.0.3"
sentry-sdk = { version = "^2.7.1", extras = ["sanic"] }
authzed = "^0.16.0"
cryptography = "^42.0.8"
# see https://github.com/sanic-org/sanic/issues/2828 for setuptools dependency, remove when not needed anymore
setuptools = { version = "^70.2.0" }
toml = "^0.10.2"
aiofiles = "^24.1.0"

[tool.poetry.group.dev.dependencies]
bandit = "^1.7.9"
mypy = "~1.11"                                             # NOTE: Mypy 1.10.0 has problems with our decorators, see https://github.com/python/mypy/issues/17166
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
pre-commit = "^3.2.2"
sanic-testing = "^24.6.0"
aiosqlite = "^0.20.0"
types-pyyaml = "^6.0.12.9"
schemathesis = "~3.29.2"
pytest-asyncio = "^0.21.1"
pytest-postgresql = "^6.1.1"
types-urllib3 = "^1.26.25.14"
pyavro-gen = "^0.3.3"
avro-preprocessor = "^0.3.0"
fakeredis = "^2.24.1"
ruff = "^0.6.5"
debugpy = "^1.8.2"
pytest-xdist = { version = "^3.5.0", extras = ["psutil"] }
types-requests = "^2.32.0.20240622"
types-toml = "^0.10.8.20240310"
types-aiofiles = "^24.1.0.20240626"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
target-version = "py311"
output-format = "full"
include = ["*.py", "*.pyi"]
exclude = [
  "*/avro_models/*",
  "components/renku_data_services/notebooks/cr_amalthea_session.py",
  "components/renku_data_services/notebooks/cr_jupyter_server.py",
]

[tool.ruff.format]
exclude = ["apispec.py"]

[tool.ruff.lint]
select = [
  # isort
  "I",
  # pydocstyle
  "D",
  # pyflakes
  "F",
  # pycodestyle
  "E",
  "W",
  # pyupgrade
  "UP",
  # flake8-simplify
  "SIM",
]
ignore = [
  "D105",
  "D107",
  "D202",
  "D211",
  "D213",
  "D401",
  "E202",
  "E226",
  "E231",
  "UP007",
  "UP038",
]

[tool.ruff.lint.per-file-ignores]
"test/*" = ["D"]
"*/versions/*" = ["D", "E", "W"]
"apispec.py" = ["D", "E", "W", "I", "UP"]
"components/renku_data_services/notebooks/crs.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["renku_data_services"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.bandit]
skips = ["B101", "B603", "B607", "B404"]
exclude_dirs = ["test", ".devcontainer"]

[tool.pytest.ini_options]
addopts = "--cov components/ --cov bases/ --cov-report=term-missing -v"
doctest_optionflags = "ALLOW_UNICODE"
testpaths = ["bases", "components", "test"]
markers = ["integration: mark a test as a integration."]
filterwarnings = [
  "ignore:<class 'pytest_black.BlackItem'> is not using a cooperative constructor:pytest.PytestDeprecationWarning",
  "ignore:distutils Version classes are deprecated. Use packaging.version instead:DeprecationWarning",
]
postgresql_host = "localhost"
postgresql_user = "renku"
postgresql_password = "renku"

[tool.mypy]
python_version = "3.12"
mypy_path = ["components", "bases"]
files = ["bases/**/*.py", "components/**/*.py"]
namespace_packages = true
explicit_package_bases = true
exclude = ["test"]

pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

warn_unreachable = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
check_untyped_defs = true
allow_redefinition = true
disallow_subclassing_any = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = [
  "renku_data_services.crc.apispec",
  "renku_data_services.connected_services.apispec",
  "renku_data_services.storage.apispec",
  "renku_data_services.project.apispec",
  "renku_data_services.repositories.apispec",
  "renku_data_services.secrets.apispec",
  "renku_data_services.session.apispec",
  "renku_data_services.users.apispec",
  "renku_data_services.data_api.error_handler",
  "renku_data_services.namespace.apispec",
  "renku_data_services.notebooks.apispec",
  "renku_data_services.notebooks.cr_amalthea_session",
  "renku_data_services.notebooks.cr_jupyter_server",
  "renku_data_services.platform.apispec",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
  "asyncpg.*",
  "aiofiles.*",
  "authlib.*",
  "authzed.*",
  "avro_preprocessor.*",
  "dataclasses_avroschema",
  "deepmerge.*",
  "grpc.*",
  "grpcutil.*",
  "kubernetes.*",
  "kubernetes_asyncio.*",
  "prometheus_client.*",
  "prometheus_sanic.*",
  "pyavro_gen.*",
  "sanic_testing.*",
  "undictify.*",
  "urllib3.*",
  "escapism.*",
  "kr8s.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["bases/", "components/"]
omit = ["components/renku_data_services/notebooks"]
concurrency = ["thread", "greenlet"]
