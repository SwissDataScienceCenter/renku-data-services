# generated by datamodel-codegen:
#   filename:  api.spec.yaml
#   timestamp: 2023-04-11T17:31:58+00:00

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel, Field, PositiveInt, conint, constr


class Cpu(BaseModel):
    __root__: PositiveInt = Field(..., description="Number of cpu cores", example=10)


class Memory(BaseModel):
    __root__: PositiveInt = Field(..., description="Number of bytes", example=2000000000000)


class Gpu(BaseModel):
    __root__: conint(ge=0) = Field(..., description="Number of GPUs", example=8)


class Storage(BaseModel):
    __root__: PositiveInt = Field(..., description="Number of bytes", example=9000000000000000000000)


class UserId(BaseModel):
    __root__: constr(min_length=5) = Field(..., description="Keycloak user ID", example="123-keycloak-user-id-456")


class Username(BaseModel):
    __root__: constr(min_length=5) = Field(
        ...,
        description="The Keycloak username - usually the same as the email associated to the user",
        example="123user@email.com",
    )


class IntegerId(BaseModel):
    id: conint(ge=0) = Field(..., description="An integer ID used to identify different resources")


class Name(BaseModel):
    name: constr(min_length=5) = Field(
        ..., description="A name for a specific resource", example="the name of a resource"
    )


class Error(BaseModel):
    code: PositiveInt = Field(..., example=1404)
    detail: Optional[str] = Field(None, example="A more detailed optional message showing what the problem was")
    message: str = Field(..., example="Something went wrong - please try again later")


class ErrorResponse(BaseModel):
    error: Error


class UserWithId(BaseModel):
    id: UserId
    username: Username


class UserWithIdOrUsernameItem(BaseModel):
    id: UserId


class UserWithIdOrUsernameItem1(BaseModel):
    username: Username


class UserWithIdOrUsername(BaseModel):
    __root__: Union[UserWithIdOrUsernameItem, UserWithIdOrUsernameItem1]


class UsersWithIdOrUsername(BaseModel):
    __root__: List[UserWithIdOrUsername]


class UsersWithId(BaseModel):
    __root__: List[UserWithId]


class Resources(BaseModel):
    cpu: Cpu
    memory: Memory
    gpu: Gpu
    storage: Storage


class ResourceClass(Resources, Name):
    pass


class ResourceClassWithId(ResourceClass, IntegerId):
    pass


class ResourceClasses(BaseModel):
    __root__: List[ResourceClass]


class ResourceClassesWithId(BaseModel):
    __root__: List[ResourceClassWithId] = Field(..., min_length=1)


class Quota(BaseModel):
    __root__: Resources


class ResourcePool(Name):
    quota: Quota
    classes: ResourceClasses


class ResourcePoolWithId(IntegerId, Name):
    quota: Quota
    classes: ResourceClassesWithId


class ResourcePoolsWithId(BaseModel):
    __root__: List[ResourcePoolWithId]
