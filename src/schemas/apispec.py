# generated by datamodel-codegen:
#   filename:  api.spec.yaml
#   timestamp: 2023-04-12T21:49:06+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, PositiveInt, conint, constr


class Version(BaseModel):
    version: str


class Cpu(BaseModel):
    __root__: PositiveInt = Field(..., description="Number of cpu cores", example=10)


class Memory(BaseModel):
    __root__: PositiveInt = Field(..., description="Number of bytes", example=2000000000000)


class Gpu(BaseModel):
    __root__: conint(ge=0) = Field(..., description="Number of GPUs", example=8)


class Storage(BaseModel):
    __root__: PositiveInt = Field(..., description="Number of bytes", example=9000000000000000000000)


class UserId(BaseModel):
    __root__: constr(min_length=5) = Field(..., description="Keycloak user ID", example="123-keycloak-user-id-456")


class Username(BaseModel):
    __root__: constr(min_length=5) = Field(
        ...,
        description="The Keycloak username - usually the same as the email associated to the user",
        example="123user@email.com",
    )


class IntegerId(BaseModel):
    __root__: conint(ge=0) = Field(..., description="An integer ID used to identify different resources")


class IntegerIds(BaseModel):
    __root__: List[IntegerId] = Field(..., min_length=1)


class Name(BaseModel):
    __root__: constr(min_length=5) = Field(
        ..., description="A name for a specific resource", example="the name of a resource"
    )


class Error(BaseModel):
    code: PositiveInt = Field(..., example=1404)
    detail: Optional[str] = Field(None, example="A more detailed optional message showing what the problem was")
    message: str = Field(..., example="Something went wrong - please try again later")


class ErrorResponse(BaseModel):
    error: Error


class UserPatch(BaseModel):
    id: Optional[UserId] = None
    username: Optional[Username] = None


class UsersPatch(BaseModel):
    __root__: List[UserPatch]


class ResourcesPatch(BaseModel):
    cpu: Optional[Cpu] = None
    memory: Optional[Memory] = None
    gpu: Optional[Gpu] = None
    storage: Optional[Storage] = None


class ResourceClassPatch(ResourcesPatch):
    name: Optional[Name] = None


class QuotaPatch(BaseModel):
    __root__: ResourcesPatch


class UserWithId(UserPatch):
    pass


class UsersWithId(BaseModel):
    __root__: List[UserWithId]


class Resources(ResourcesPatch):
    pass


class ResourceClass(ResourceClassPatch):
    pass


class ResourceClassWithId(ResourceClass):
    id: IntegerId


class ResourceClasses(BaseModel):
    __root__: List[ResourceClass] = Field(..., min_length=1)


class ResourceClassesWithIdItem(ResourceClass):
    id: IntegerId


class ResourceClassesWithId(BaseModel):
    __root__: List[ResourceClassesWithIdItem] = Field(..., min_length=1)


class Quota(BaseModel):
    __root__: Resources


class ResourcePoolPatch(BaseModel):
    quota: Optional[Quota] = None
    classes: Optional[ResourceClasses] = None
    name: Optional[Name] = None


class ResourcePoolWithId(BaseModel):
    quota: Quota
    classes: List[ResourceClassWithId]
    name: Name
    id: IntegerId


class ResourcePoolsWithId(BaseModel):
    __root__: List[ResourcePoolWithId]


class ResourcePool(ResourcePoolPatch):
    pass
