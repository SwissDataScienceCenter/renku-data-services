---
openapi: 3.0.2
info:
  title: Renku data sercice
  description: A service that provides information about data, users and compute resources
  version: v1
servers:
  - url: /api/data
paths:
  /resourcePools:
    get:
      summary: Get all resource pool definitions
      parameters:
        - in: query
          description: Filter for resource pools based on the provided name as a prefix. Omitting this parameter returns all resource pools. 
          name: name
          schema:
            type: string
          required: false
      responses:
        "200":
          description: The resource pool definitions
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ResourcePoolsWithId"
      tags:
        - resourcePools
    post:
      summary: Create a new resource pool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourcePool"
      responses:
        "201":
          description: The resource pool was created
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ResourcePoolWithId"
      tags:
        - resourcePools
    put:
      summary: Update an existing resource pool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourcePoolWithId"
      responses:
        "200":
          description: The resource pool definition
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ResourcePoolWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - resourcePools
  /resourcePools/{resourcePoolId}:
    get:
      summary: Get a resource pool definition
      parameters:
        - in: path
          name: resourcePoolId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The resource pool definition
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ResourcePoolWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - resourcePools
    delete:
      summary: Remove a resource pool
      parameters:
        - in: path
          name: resourcePoolId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: The resource pool was removed or did not exist in the first place
      tags:
        - resourcePools
  /resourcePools/{resourcePoolId}/classes:
    get:
      summary: Get all resource classes in a resource pool
      parameters:
        - in: path
          name: resourcePoolId
          required: true
          schema:
            type: string
        - in: query
          description: Filter for resource classes based on the provided name as a prefix. Omitting this parameter returns all classes.
          name: name
          schema:
            type: string
          required: false
      responses:
        "200":
          description: The resource class in the specific pool
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ResourceClassesWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - classes
    post:
      summary: Create a new resource class in the specific pool
      parameters:
        - in: path
          name: resourcePoolId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceClass"
      responses:
        "201":
          description: Created a class in the resource pool
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ResourceClassWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - classes
    put:
      summary: Update an existing resource class for a specific resource pool
      parameters:
        - in: path
          name: resourcePoolId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceClassWithId"
      responses:
        "200":
          description: Updated the classes in the resource pool
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ResourceClassWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - classes
  /resourcePools/{resourcePoolId}/classes/{classId}:
    get:
      summary: Get a specific resource class in a specific resource pool
      parameters:
        - in: path
          name: resourcePoolId
          required: true
          schema:
            type: string
        - in: path
          name: classId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The resource class that was requested
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ResourceClassWithId"
        "404": 
          description: The resource class does not exist
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - classes
    delete:
      summary: Remove the specific resource class
      parameters:
        - in: path
          name: resourcePoolId
          required: true
          schema:
            type: string
        - in: path
          name: classId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: The resource class was removed or did not exist in the first place
      tags:
        - classes
  /resourcePools/{resourcePoolId}/users:
    get:
      summary: Get all users that have access to a resource pool
      parameters:
        - in: path
          name: resourcePoolId
          required: true
          schema:
            type: string
        - in: query
          description: Filter for users based on the provided username as a prefix. Omitting this parameter returns all users that have access in the resource pool.
          name: username
          schema:
            type: string
          required: false
      responses:
        "200":
          description: The list of users
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/UsersWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - users
    post:
      summary: Add users to the list of users that have access to the resource pool
      parameters:
        - in: path
          name: resourcePoolId
          required: true
          schema:
            type: string
      requestBody:
        description: List of user Ids
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersWithIdOrUsername"
            example:
              - id: 123-user-id
              - username: user@email.com
      responses:
        "201":
          description: The list of users was updated
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/UsersWithId"
              example:
                - id: 123-user-id
                  email: 123-user@email.com
                - id: 456-user-id
                  email: user@email.com
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - users
    put:
      summary: Update existing users in the list of users that have access to the resource pool
      parameters:
        - in: path
          name: resourcePoolId
          required: true
          schema:
            type: string
      requestBody:
        description: List of user Ids
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersWithId"
      responses:
        "200":
          description: The list of users was updated
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/UsersWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - users
  /resourcePools/{resourcePoolId}/users/{userId}:
    get:
      summary: Check if a specific user belongs to a specific resource pool
      parameters:
        - in: path
          name: resourcePoolId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The user belongs to the resource pool
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/UserWithId"
        "404":
          description: The user does not belong to the resource pool, or the resource pool or user do not exist
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - users
    delete:
      summary: Remove a specific user belongs from a specific resource pool
      parameters:
        - in: path
          name: resourcePoolId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: The user was removed or it was not part of the pool
      tags:
        - users
  /resourcePools/{resourcePoolId}/quota:
    get:
      summary: Get the quota associated with the resource pool
      parameters:
        - in: path
          name: resourcePoolId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The user belongs to the resource pool
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/Quota"
        "404":
          description: The resource pool or user does not exist
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - quota
    put:
      summary: Set the quota associated with the resource pool
      parameters:
        - in: path
          name: resourcePoolId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Quota"
      responses:
        "200":
          description: The user belongs to the resource pool
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/Quota"
        "404":
          description: The resource pool or user does not exist
          content:
            "application/json":
              schema: 
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - quota
  
components:
  schemas:
    ResourceClass:
      allOf:
        - $ref: "#/components/schemas/Resources"
        - $ref: "#/components/schemas/Name"
    ResourceClassWithId:
      allOf:
        - $ref: "#/components/schemas/ResourceClass"
        - $ref: "#/components/schemas/IntegerId"
    ResourceClasses:
      type: array
      items:
        $ref: "#/components/schemas/ResourceClass"
    ResourceClassesWithId:
      type: array
      items:
        $ref: "#/components/schemas/ResourceClassWithId"
      minLength: 1
    ResourcePool:
      allOf:
        - $ref: "#/components/schemas/Name"
        - type: object
          properties:
            quota:
              $ref: "#/components/schemas/Quota"
            classes:
              $ref: "#/components/schemas/ResourceClasses"
          required: ["quota", "classes"]
    ResourcePoolWithId:
      allOf:
        - $ref: "#/components/schemas/IntegerId"
        - $ref: "#/components/schemas/Name"
        - type: object
          properties:
            quota:
              $ref: "#/components/schemas/Quota"
            classes:
              $ref: "#/components/schemas/ResourceClassesWithId"
          required: ["quota", "classes"]
    ResourcePoolsWithId:
      type: array
      items:
        $ref: "#/components/schemas/ResourcePoolWithId"
    Quota:
      $ref: "#/components/schemas/Resources"
    UserWithId:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        username:
          $ref: "#/components/schemas/Username"
      required: ["id", "username"]
    UserWithIdOrUsername:
      oneOf:
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/UserId"
          required: ["id"]
        - type: object
          properties:
            username:
              $ref: "#/components/schemas/Username"
          required: ["username"]
    UsersWithIdOrUsername:
      type: array
      items:
        $ref: "#/components/schemas/UserWithIdOrUsername"
    UsersWithId:
      type: array
      items:
        $ref: "#/components/schemas/UserWithId"
    Resources:
      type: object
      properties:
        cpu:
          $ref: "#/components/schemas/Cpu"
        memory:
          $ref: "#/components/schemas/Memory"
        gpu:
          $ref: "#/components/schemas/Gpu"
        storage:
          $ref: "#/components/schemas/Storage"
      required: ["cpu", "memory", "gpu", "storage"]
    Cpu:
      type: integer
      description: Number of cpu cores
      example: 10
      exclusiveMinimum: true
      minimum: 0
    Memory:
      type: integer
      description: Number of bytes
      example: 2000000000000
      exclusiveMinimum: true
      minimum: 0
    Gpu:
      type: integer
      description: Number of GPUs
      example: 8
      minimum: 0
    Storage:
      type: integer
      description: Number of bytes
      example: 9000000000000000000000
      exclusiveMinimum: true
      minimum: 0
    UserId:
      type: string
      description: Keycloak user ID
      example: 123-keycloak-user-id-456
      minLength: 5
    Username:
      type: string
      description: The Keycloak username - usually the same as the email associated to the user
      example: 123user@email.com
      minLength: 5
    IntegerId:
      type: object
      properties:
        id:
          type: integer
          description: An integer ID used to identify different resources
          minimum: 0
      required: ["id"]
    Name:
      type: object
      properties:
        name:
          type: string
          description: A name for a specific resource
          minLength: 5
          example: "the name of a resource"
      required: ["name"]
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              minimum: 0
              exclusiveMinimum: true
              example: 1404
            detail:
              type: string
              example: "A more detailed optional message showing what the problem was"
            message:
              type: string
              example: "Something went wrong - please try again later"
          required: ["code", "message"]
      required: ["error"]
          
