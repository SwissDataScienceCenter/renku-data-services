---
openapi: 3.0.2
info:
  title: Renku data services
  description: |
    Services that provide information about data, users and compute resources. All errors
    have the same format as the schema called ErrorResponse.
  version: v1
servers:
  - url: /api/data
paths:
  /resource_pools:
    get:
      summary: Get all resource pool definitions
      parameters:
        - in: query
          description: Filter for resource pools based on the provided name as a prefix. Omitting this parameter returns all resource pools.
          name: name
          schema:
            $ref: "#/components/schemas/Name"
          required: false
      responses:
        "200":
          description: The resource pool definitions
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ResourcePoolsWithId"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - resource_pools
    post:
      summary: Create a new resource pool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourcePool"
      responses:
        "201":
          description: The resource pool was created
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ResourcePoolWithId"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - resource_pools
  /resource_pools/{resource_pool_id}:
    get:
      summary: Get a resource pool definition
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The resource pool definition
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ResourcePoolWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - resource_pools
    put:
      summary: Update an existing resource pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourcePoolPut"
      responses:
        "200":
          description: The resource pool definition
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ResourcePoolWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - resource_pools
    patch:
      summary: Update specific fields of an existing resource pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourcePoolPatch"
      responses:
        "200":
          description: The resource pool definition
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ResourcePoolWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - resource_pools
    delete:
      summary: Remove a resource pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: The resource pool was removed or did not exist in the first place
        default:
          $ref: '#/components/responses/Error'
      tags:
        - resource_pools
  /resource_pools/{resource_pool_id}/users:
    get:
      summary: Get all users that have access to a resource pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The list of users
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UsersWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - resource_pools
    post:
      summary: Add users to the list of users that have access to the resource pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
      requestBody:
        description: List of user Ids
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersWithId"
            example:
              - id: 543-user-id
              - id: 123-some-user
      responses:
        "201":
          description: The list of users was updated
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UsersWithId"
              example:
                - id: 123-user-id
                - id: user-id
                - id: 456-user-id
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - resource_pools
    put:
      summary: Set the list of users that has access to the resource pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
      requestBody:
        description: List of user Ids
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersWithId"
      responses:
        "200":
          description: The list of users was updated
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UsersWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - resource_pools
  /resource_pools/{resource_pool_id}/users/{user_id}:
    get:
      summary: Check if a specific user belongs to a specific resource pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The user belongs to the resource pool
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserWithId"
        "404":
          description: The user does not belong to the resource pool, or the resource pool or user do not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - resource_pools
    delete:
      summary: Remove a specific user from a specific resource pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: The user was removed or it was not part of the pool
        default:
          $ref: '#/components/responses/Error'
      tags:
        - resource_pools
  /resource_pools/{resource_pool_id}/classes:
    get:
      summary: Get all resource classes in a resource pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
        - in: query
          description: Filter for resource classes based on the provided name as a prefix. Omitting this parameter returns all classes.
          name: name
          schema:
            $ref: "#/components/schemas/Name"
          required: false
      responses:
        "200":
          description: The resource class in the specific pool
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ResourceClassesWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - classes
    post:
      summary: Create a new resource class in the specific pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceClass"
      responses:
        "201":
          description: Created a class in the resource pool
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ResourceClassWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - classes
  /resource_pools/{resource_pool_id}/classes/{class_id}:
    get:
      summary: Get a specific resource class in a specific resource pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
        - in: path
          name: class_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The resource class that was requested
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ResourceClassWithId"
        "404":
          description: The resource class does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - classes
    put:
      summary: Update an existing resource class for a specific resource pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
        - in: path
          name: class_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceClass"
      responses:
        "200":
          description: Updated the classes in the resource pool
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ResourceClassWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - classes
    patch:
      summary: Partially update an existing resource class for a specific resource pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
        - in: path
          name: class_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceClassPatch"
      responses:
        "200":
          description: Updated the classes in the resource pool
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ResourceClassWithId"
        "404":
          description: The resource pool does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - classes
    delete:
      summary: Remove the specific resource class
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
        - in: path
          name: class_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: The resource class was removed or did not exist in the first place
        default:
          $ref: '#/components/responses/Error'
      tags:
        - classes
  /resource_pools/{resource_pool_id}/quota:
    get:
      summary: Get the quota associated with the resource pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The user belongs to the resource pool
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Resources"
        "404":
          description: The resource pool or user does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - quota
    put:
      summary: Set the quota associated with the resource pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Resources"
      responses:
        "200":
          description: The user belongs to the resource pool
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Resources"
        "404":
          description: The resource pool or user does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - quota
    patch:
      summary: Partially update the quota for a resource pool
      parameters:
        - in: path
          name: resource_pool_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourcesPatch"
      responses:
        "200":
          description: The user belongs to the resource pool
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Resources"
        "404":
          description: The resource pool or user does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - quota
  /users:
    get:
      summary: List all users
      responses:
        "200":
          description: The list of users in the service (this is a subset of what is in Keycloak)
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UsersWithId"
      tags:
        - users
    post:
      summary: Add a user
      requestBody:
        description: User id
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserWithId"
      responses:
        "200":
          description: The user already exists
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserWithId"
        "201":
          description: The user was added
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserWithId"
        "404":
          description: The user does not exist in Keycloak
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - users
  /users/{user_id}:
    delete:
      summary: Remove a user from all resource pools
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: The user was removed or it never existed
        default:
          $ref: '#/components/responses/Error'
      tags:
        - users
  /users/{user_id}/resource_pools:
    get:
      summary: Get all resource pools that the user has access to
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: query
          description: Filter for resource pools based on the provided name as a prefix. Omitting this parameter returns all resource pools.
          name: name
          schema:
            $ref: "#/components/schemas/Name"
          required: false
      responses:
        "200":
          description: The resource pools that the user has access to
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ResourcePoolsWithId"
        "404":
          description: The user does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - users
    post:
      summary: Give the user access to the specified resource pools
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        description: List of resource pool IDs
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IntegerIds"
      responses:
        "201":
          description: The resource pools that the user has been given access to
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ResourcePoolsWithId"
        "404":
          description: The user or resource pool(s) do not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - users
    put:
      summary: Set the list of resource pools that the user has access to
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        description: List of resource pool IDs
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IntegerIds"
      responses:
        "200":
          description: The resource pools that the user has been given access to
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ResourcePoolsWithId"
        "404":
          description: The user or resource pool(s) do not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: '#/components/responses/Error'
      tags:
        - users
  /error:
    get:
      summary: Get a sample error response with status code 422
      responses:
        "422":
          description: The error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /version:
    get:
      summary: Get the version of the service
      responses:
        "200":
          description: The error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Version"

components:
  schemas:
    ResourceClass:
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/Name"
        cpu:
          $ref: "#/components/schemas/Cpu"
        memory:
          $ref: "#/components/schemas/Memory"
        gpu:
          $ref: "#/components/schemas/Gpu"
        max_storage:
          $ref: "#/components/schemas/Storage"
        default_storage:
          $ref: "#/components/schemas/Storage"
        default:
          $ref: "#/components/schemas/DefaultFlag"
      required: ["cpu", "memory", "gpu", "max_storage", "name", "default", "default_storage"]
      example:
        name: "resource class"
        cpu: 1.5
        memory: 2
        gpu: 0
        max_storage: 100
        default: false
    ResourceClassPatch:
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/Name"
        cpu:
          $ref: "#/components/schemas/Cpu"
        memory:
          $ref: "#/components/schemas/Memory"
        gpu:
          $ref: "#/components/schemas/Gpu"
        max_storage:
          $ref: "#/components/schemas/Storage"
        default_storage:
          $ref: "#/components/schemas/Storage"
        default:
          $ref: "#/components/schemas/DefaultFlag"
      example:
        name: "resource class"
        cpu: 1.5
    ResourceClassPatchWithId:
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/Name"
        cpu:
          $ref: "#/components/schemas/Cpu"
        memory:
          $ref: "#/components/schemas/Memory"
        gpu:
          $ref: "#/components/schemas/Gpu"
        max_storage:
          $ref: "#/components/schemas/Storage"
        default_storage:
          $ref: "#/components/schemas/Storage"
        id:
          $ref: "#/components/schemas/IntegerId"
        default:
          $ref: "#/components/schemas/DefaultFlag"
      required: ["id"]
      example:
        id: 1
        max_storage: 50
    ResourceClassWithId:
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/Name"
        cpu:
          $ref: "#/components/schemas/Cpu"
        memory:
          $ref: "#/components/schemas/Memory"
        gpu:
          $ref: "#/components/schemas/Gpu"
        max_storage:
          $ref: "#/components/schemas/Storage"
        default_storage:
          $ref: "#/components/schemas/Storage"
        id:
          $ref: "#/components/schemas/IntegerId"
        default:
          $ref: "#/components/schemas/DefaultFlag"
      required: ["cpu", "memory", "gpu", "max_storage", "name", "id", "default", "default_storage"]
      example:
        name: "resource class"
        cpu: 1.5
        memory: 2
        gpu: 0
        max_storage: 100
        id: 1
        default: true
    ResourceClasses:
      type: array
      items:
        $ref: "#/components/schemas/ResourceClass"
      minItems: 1
      uniqueItems: true
    ResourceClassesWithId:
      type: array
      items:
        allOf:
          - $ref: "#/components/schemas/ResourceClass"
          - type: object
            properties:
              id:
                $ref: "#/components/schemas/IntegerId"
            required: ["id"]
      uniqueItems: true
      example:
        - name: "resource class 1"
          cpu: 1.5
          memory: 2
          gpu: 0
          max_storage: 100
          id: 1
          default: true
        - name: "resource class 2"
          cpu: 4.5
          memory: 10
          gpu: 2
          max_storage: 10000
          id: 2
          default: false
    ResourceClassesPatchWithId:
      type: array
      items:
        $ref: "#/components/schemas/ResourceClassPatchWithId"
      minItems: 1
      uniqueItems: true
      example:
        - name: "resource class 1"
          id: 1
        - cpu: 4.5
          max_storage: 10000
          id: 2
    ResourcePool:
      type: object
      additionalProperties: false
      properties:
        quota:
          $ref: "#/components/schemas/Resources"
        classes:
          $ref: "#/components/schemas/ResourceClasses"
        name:
          $ref: "#/components/schemas/Name"
        public:
          $ref: "#/components/schemas/PublicFlag"
        default:
          $ref: "#/components/schemas/DefaultFlag"
      required: ["quota", "classes", "name", "public", "default"]
      example:
        quota:
          cpu: 50
          memory: 250
          storage: 15456
          gpu: 10
        public: true
        default: true
        classes:
          - name: "resource class 1"
            cpu: 1.5
            memory: 2
            gpu: 0
            max_storage: 100
          - name: "resource class 2"
            cpu: 4.5
            memory: 10
            gpu: 2
            max_storage: 10
        name: "resource pool name"
    ResourcePoolPatch:
      type: object
      additionalProperties: false
      properties:
        quota:
          $ref: "#/components/schemas/ResourcesPatch"
        classes:
          $ref: "#/components/schemas/ResourceClassesPatchWithId"
        name:
          $ref: "#/components/schemas/Name"
        public:
          $ref: "#/components/schemas/PublicFlag"
        default:
          $ref: "#/components/schemas/DefaultFlag"
      example:
        quota:
          cpu: 50
          gpu: 10
        classes:
          - name: "resource class 2"
            cpu: 4.5
            max_storage: 10000
        name: "resource pool name"
    ResourcePoolPut:
      type: object
      additionalProperties: false
      properties:
        quota:
          $ref: "#/components/schemas/Resources"
        classes:
          $ref: "#/components/schemas/ResourceClassesWithId"
        name:
          $ref: "#/components/schemas/Name"
        public:
          $ref: "#/components/schemas/PublicFlag"
        default:
          $ref: "#/components/schemas/DefaultFlag"
      required: ["quota", "classes", "name", "public", "default"]
      example:
        quota:
          cpu: 50
          memory: 250
          storage: 15456
          gpu: 10
        public: true
        default: false
        classes:
          - name: "resource class 1"
            cpu: 1.5
            memory: 2
            gpu: 0
            max_storage: 100
            id: 1
          - name: "resource class 2"
            cpu: 4.5
            memory: 10
            gpu: 2
            max_storage: 10000
            id: 2
        name: "resource pool name"
    ResourcePoolWithId:
      type: object
      additionalProperties: false
      properties:
        quota:
          $ref: "#/components/schemas/Resources"
        classes:
          type: array
          items:
            $ref: "#/components/schemas/ResourceClassWithId"
        name:
          $ref: "#/components/schemas/Name"
        id:
          $ref: "#/components/schemas/IntegerId"
        public:
          $ref: "#/components/schemas/PublicFlag"
        default:
          $ref: "#/components/schemas/DefaultFlag"
      required: ["quota", "classes", "name", "id", "public", "default"]
      example:
        quota:
          cpu: 50
          memory: 250
          storage: 15456
          gpu: 10
        public: false
        default: false
        classes:
          - name: "resource class 1"
            cpu: 1.5
            memory: 2
            gpu: 0
            max_storage: 100
            id: 1
          - name: "resource class 2"
            cpu: 4.5
            memory: 10
            gpu: 2
            max_storage: 10000
            id: 2
        name: "resource pool name"
        id: 1
    ResourcePoolsWithId:
      type: array
      items:
        $ref: "#/components/schemas/ResourcePoolWithId"
    UserWithId:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/UserId"
      required: ["id"]
      example: "some-random-keycloak-id"
    UsersWithId:
      type: array
      items:
        $ref: "#/components/schemas/UserWithId"
      uniqueItems: true
    Resources:
      type: object
      additionalProperties: false
      properties:
        cpu:
          $ref: "#/components/schemas/Cpu"
        memory:
          $ref: "#/components/schemas/Memory"
        gpu:
          $ref: "#/components/schemas/Gpu"
        storage:
          $ref: "#/components/schemas/Storage"
      required: ["cpu", "memory", "gpu", "storage"]
      example:
        cpu: 1.0
        memory: 4
        gpu: 0
        storage: 100
    ResourcesPatch:
      type: object
      additionalProperties: false
      properties:
        cpu:
          $ref: "#/components/schemas/Cpu"
        memory:
          $ref: "#/components/schemas/Memory"
        gpu:
          $ref: "#/components/schemas/Gpu"
        storage:
          $ref: "#/components/schemas/Storage"
      example:
        gpu: 0
        storage: 100
    Version:
      type: object
      properties:
        version:
          type: string
      required: ["version"]
    Cpu:
      type: number
      format: float
      description: Number of cpu cores
      example: 10
      exclusiveMinimum: true
      minimum: 0
    Memory:
      type: integer
      description: Number of gigabytes of memory
      example: 4
      exclusiveMinimum: true
      minimum: 0
    Gpu:
      type: integer
      description: Number of GPUs
      example: 8
      minimum: 0
    Storage:
      type: integer
      description: Number of gigabytes of storage
      example: 100
      exclusiveMinimum: true
      minimum: 0
    UserId:
      type: string
      description: Keycloak user ID
      example: 123-keycloak-user-id-456
      pattern: "^[A-Za-z0-9-]+$"
      minLength: 5
    IntegerId:
      type: integer
      description: An integer ID used to identify different resources
      minimum: 0
      example: 1
    IntegerIds:
      type: array
      items:
        $ref: "#/components/schemas/IntegerId"
      minItems: 1
      uniqueItems: true
      example: [1, 3, 5]
    Name:
      type: string
      description: A name for a specific resource
      minLength: 5
      example: "the name of a resource"
    DefaultFlag:
      type: boolean
      description: A default selection for resource classes or resource pools
      default: false
      example: false
    PublicFlag:
      type: boolean
      description: A resource pool whose classes can be accessed by anyone
      default: false
      example: false
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              minimum: 0
              exclusiveMinimum: true
              example: 1404
            detail:
              type: string
              example: "A more detailed optional message showing what the problem was"
            message:
              type: string
              example: "Something went wrong - please try again later"
          required: ["code", "message"]
      required: ["error"]
  responses:
    Error:
      description: The schema for all 4xx and 5xx responses
      content:
        "application/json":
          schema:
            $ref: '#/components/schemas/ErrorResponse'
