# generated by datamodel-codegen:
#   filename:  api.spec.yaml
#   timestamp: 2023-07-27T09:45:17+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import Field

from renku_data_services.storage_schemas.base import BaseAPISpec


class Example(BaseAPISpec):
    value: Optional[str] = Field(None, description="a potential value for the option (think enum)")
    help: Optional[str] = Field(None, description="help text for the value")


class Datatype(Enum):
    int = "int"
    bool = "bool"
    string = "string"
    Time = "Time"


class RCloneOption(BaseAPISpec):
    name: Optional[str] = Field(None, description="name of the option")
    help: Optional[str] = Field(None, description="help text for the option")
    provider: Optional[str] = Field(None, description="The cloud provider the option is for (See 'provider' option)")
    default: Optional[Union[float, str, bool, Dict[str, Any]]] = Field(None, description="default value for the option")
    default_str: Optional[str] = Field(None, description="string representation of the default value")
    examples: Optional[List[Example]] = None
    required: Optional[bool] = Field(None, description="whether the option is required or not")
    ispassword: Optional[bool] = Field(None, description="whether the field is a password (use **** for fields)")
    sensitive: Optional[bool] = Field(None, description="whether the value is sensitive (not stored in the service)")
    advanced: Optional[bool] = Field(
        None, description="whether this is an advanced config option (probably don't show these to users)"
    )
    exclusive: Optional[bool] = Field(None, description="if true, only values from 'examples' can be used")
    datatype: Optional[Datatype] = Field(None, description="data type of option value.")


class Error(BaseAPISpec):
    code: int = Field(..., example=1404, gt=0)
    detail: Optional[str] = Field(None, example="A more detailed optional message showing what the problem was")
    message: str = Field(..., example="Something went wrong - please try again later")


class ErrorResponse(BaseAPISpec):
    error: Error


class CloudStorageUrl(BaseAPISpec):
    git_url: str = Field(..., description="URL of a git repository", regex="^http(s)?://[^@/]+/.*\\.git")
    storage_url: str


class CloudStorage(BaseAPISpec):
    git_url: str = Field(..., description="URL of a git repository", regex="^http(s)?://[^@/]+/.*\\.git")
    storage_type: str = Field(..., description="same as rclone prefix")
    configuration: Dict[str, str] = Field(
        ..., description="Dictionary of rclone key:value pairs (based on schema from '/storage_schema')"
    )


class CloudStorageWithId(CloudStorage):
    storage_id: str = Field(
        ..., description="ULID identifier of an object", max_length=26, min_length=26, regex="^[A-Z0-9]+$"
    )


class RCloneEntry(BaseAPISpec):
    name: Optional[str] = Field(None, description="name of the provider")
    description: Optional[str] = Field(None, description="description of the provider")
    prefix: Optional[str] = Field(None, description="slug name of the provider")
    options: Optional[List[RCloneOption]] = None


class RCloneSchema(BaseAPISpec):
    __root__: List[RCloneEntry]
