openapi: 3.0.2
info:
  title: Renku Secrets Storage
  description: |
    A service to store and retrieve users' credentials across Renku services.
  version: 0.1.0
servers:
  - url: /api/data
  - url: /ui-server/api/data
paths:
  /secrets/{user_id}:
    get:
      summary: Get all user's secrets
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of all secrets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretsList"
        default:
          $ref: "#/components/responses/Error"
      tags:
        - secrets_storage_api
    post:
      summary: Add a new secret
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretPost"
      responses:
        "201":
          description: The secret was added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Secret"
        default:
          $ref: "#/components/responses/Error"
      tags:
        - secrets_storage_api
  /secrets/{secret_id}:
    get:
      summary: Get a secret
      parameters:
        - in: path
          name: secret_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The secret
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Secret"
        "404":
          description: The user or secret doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: "#/components/responses/Error"
      tags:
        - secrets_storage_api
    patch:
      summary: Update a secret's value and it's modification date
      parameters:
        - in: path
          name: secret_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretPatch"
      responses:
        "200":
          description: The patched secret
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Secret"
        "404":
          description: The user or secret doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: "#/components/responses/Error"
      tags:
        - secrets_storage_api
    delete:
      summary: Remove a secret
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: path
          name: secret_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: The secret was removed or did not exist in the first place
        default:
          $ref: "#/components/responses/Error"
      tags:
        - secrets_storage_api
components:
  schemas:
    SecretsList:
      description: A list of secrets
      type: array
      items:
        $ref: "#/components/schemas/Secret"
      minItems: 0
    Secret:
      description: A Renku secret
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/Ulid"
        name:
          $ref: "#/components/schemas/Name"
        modification_date:
          $ref: "#/components/schemas/ModificationDate"
        value:
          $ref: "#/components/schemas/Value"
      required:
        - "id"
        - "name"
        - "modification_date"
        - "value"
      example:
        id: "01AN4Z79ZS5XN0F25N3DB94T4R"
        name: "S3-Credentials"
        modification_date: "2024-01-16T11:42:05Z"
        value: "AfQgzKHgsEE9WDe6C9GL80LQcp/9BbzZ8Y"
    SecretPost:
      description: Secret metadata to be created
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/Name"
        value:
          $ref: "#/components/schemas/Value"
      required:
        - "name"
        - "value"
    SecretPatch:
      type: object
      description: Secret metadata to be modified
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/Name"
        value:
          $ref: "#/components/schemas/Value"
    Ulid:
      description: ULID identifier
      type: string
      minLength: 26
      maxLength: 26
      pattern: "^[A-Z0-9]{26}$"  # This is case-insensitive
      format: ulid
    Name:
      description: Secret name
      type: string
      minLength: 1
      maxLength: 99
      pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*$"
      example: "Data-S3-Secret_1"
    ModificationDate:
      description: The date and time the secret was created or modified (this is always in UTC)
      type: string
      format: date-time
      example: "2023-11-01T17:32:28Z"
    Value:
      description: Secret value that can be any text
      type: string
      maxLength: 5000  # TODO: What should be the max length
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              minimum: 0
              exclusiveMinimum: true
              example: 1404
            detail:
              type: string
              example: "A more detailed optional message showing what the problem was"
            message:
              type: string
              example: "Something went wrong - please try again later"
          required:
            - "code"
            - "message"
      required:
        - "error"
  responses:
    Error:
      description: The schema for all 4xx and 5xx responses
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
