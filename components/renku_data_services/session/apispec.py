# generated by datamodel-codegen:
#   filename:  api.spec.yaml
#   timestamp: 2025-02-18T08:55:10+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import ConfigDict, Field, RootModel
from renku_data_services.session.apispec_base import BaseAPISpec


class EnvironmentKind(Enum):
    GLOBAL = "GLOBAL"
    CUSTOM = "CUSTOM"


class EnvironmentImageSourceImage(Enum):
    image = "image"


class EnvironmentImageSourceBuild(Enum):
    build = "build"


class BuildCommonPart(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str = Field(
        ...,
        description="ULID identifier",
        max_length=26,
        min_length=26,
        pattern="^[0-7][0-9A-HJKMNP-TV-Z]{25}$",
    )
    environment_id: str = Field(
        ...,
        description="ULID identifier",
        max_length=26,
        min_length=26,
        pattern="^[0-7][0-9A-HJKMNP-TV-Z]{25}$",
    )
    created_at: datetime = Field(
        ...,
        description="The date and time the resource was created (in UTC and ISO-8601 format)",
        example="2023-11-01T17:32:28Z",
    )


class Status(Enum):
    in_progress = "in_progress"
    failed = "failed"
    cancelled = "cancelled"


class BuildNotCompletedPart(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    status: Status = Field(..., example="in_progress")


class Status1(Enum):
    succeeded = "succeeded"


class Status2(Enum):
    cancelled = "cancelled"


class BuildPatch(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    status: Optional[Status2] = None


class BuildLogs(RootModel[Optional[Dict[str, str]]]):
    root: Optional[Dict[str, str]] = None


class BuildResult(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    image: str = Field(
        ...,
        description="A container image",
        example="renku/renkulab-py:3.10-0.18.1",
        max_length=500,
        pattern="^[a-z0-9]+((\\.|_|__|-+)[a-z0-9]+)*(\\/[a-z0-9]+((\\.|_|__|-+)[a-z0-9]+)*)*(:[a-zA-Z0-9_][a-zA-Z0-9._-]{0,127}|@sha256:[a-fA-F0-9]{64}){0,1}$",
    )
    completed_at: datetime = Field(
        ...,
        description="The date and time the resource was created (in UTC and ISO-8601 format)",
        example="2023-11-01T17:32:28Z",
    )
    repository_url: str
    repository_git_commit_sha: str


class BuildStatus(Enum):
    in_progress = "in_progress"
    succeeded = "succeeded"
    failed = "failed"
    cancelled = "cancelled"


class Error(BaseAPISpec):
    code: int = Field(..., example=1404, gt=0)
    detail: Optional[str] = Field(
        None, example="A more detailed optional message showing what the problem was"
    )
    message: str = Field(..., example="Something went wrong - please try again later")


class ErrorResponse(BaseAPISpec):
    error: Error


class GetEnvironmentParams(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    include_archived: bool = Field(
        False, description="Whether to return archived environments or not"
    )


class EnvironmentsGetParametersQuery(BaseAPISpec):
    get_environment_params: Optional[GetEnvironmentParams] = None


class BuildsBuildIdLogsGetParametersQuery(BaseAPISpec):
    max_lines: int = 250


class EnvironmentWithoutContainerImage(BaseAPISpec):
    id: str = Field(
        ...,
        description="ULID identifier",
        max_length=26,
        min_length=26,
        pattern="^[0-7][0-9A-HJKMNP-TV-Z]{25}$",
    )
    name: str = Field(
        ...,
        description="Renku session name",
        example="My Renku Session :)",
        max_length=99,
        min_length=1,
    )
    creation_date: datetime = Field(
        ...,
        description="The date and time the resource was created (in UTC and ISO-8601 format)",
        example="2023-11-01T17:32:28Z",
    )
    description: Optional[str] = Field(
        None, description="A description for the resource", max_length=500
    )
    default_url: str = Field(
        ...,
        description="The default path to open in a session",
        example="/lab",
        max_length=200,
    )
    uid: int = Field(
        ..., description="The user ID used to run the session", gt=0, le=65535
    )
    gid: int = Field(
        ..., description="The group ID used to run the session", gt=0, le=65535
    )
    working_directory: Optional[str] = Field(
        None,
        description="The location where the session will start, if left unset it will default to the session image working directory.",
        example="/home/jovyan/work",
        min_length=1,
    )
    mount_directory: Optional[str] = Field(
        None,
        description="The location where the persistent storage for the session will be mounted, usually it should be identical to or a parent of the working directory, if left unset will default to the working directory.",
        example="/home/jovyan/work",
        min_length=1,
    )
    port: int = Field(
        ...,
        description="The TCP port (on any container in the session) where user requests will be routed to from the ingress",
        gt=0,
        lt=65400,
    )
    command: Optional[List[str]] = Field(
        None,
        description="The command that will be run i.e. will overwrite the image Dockerfile ENTRYPOINT, equivalent to command in Kubernetes",
        min_length=1,
    )
    args: Optional[List[str]] = Field(
        None,
        description="The arguments that will follow the command, i.e. will overwrite the image Dockerfile CMD, equivalent to args in Kubernetes",
        min_length=1,
    )
    is_archived: Optional[bool] = Field(
        None,
        description="Whether this environment is archived and not for use in new projects or not",
    )


class Environment(EnvironmentWithoutContainerImage):
    container_image: str = Field(
        ...,
        description="A container image",
        example="renku/renkulab-py:3.10-0.18.1",
        max_length=500,
        pattern="^[a-z0-9]+((\\.|_|__|-+)[a-z0-9]+)*(\\/[a-z0-9]+((\\.|_|__|-+)[a-z0-9]+)*)*(:[a-zA-Z0-9_][a-zA-Z0-9._-]{0,127}|@sha256:[a-fA-F0-9]{64}){0,1}$",
    )


class EnvironmentWithImageGet(Environment):
    environment_image_source: EnvironmentImageSourceImage
    environment_kind: EnvironmentKind = "custom"


class EnvironmentPost(BaseAPISpec):
    name: str = Field(
        ...,
        description="Renku session name",
        example="My Renku Session :)",
        max_length=99,
        min_length=1,
    )
    description: Optional[str] = Field(
        None, description="A description for the resource", max_length=500
    )
    container_image: str = Field(
        ...,
        description="A container image",
        example="renku/renkulab-py:3.10-0.18.1",
        max_length=500,
        pattern="^[a-z0-9]+((\\.|_|__|-+)[a-z0-9]+)*(\\/[a-z0-9]+((\\.|_|__|-+)[a-z0-9]+)*)*(:[a-zA-Z0-9_][a-zA-Z0-9._-]{0,127}|@sha256:[a-fA-F0-9]{64}){0,1}$",
    )
    default_url: str = Field(
        "/lab",
        description="The default path to open in a session",
        example="/lab",
        max_length=200,
    )
    uid: int = Field(
        1000, description="The user ID used to run the session", gt=0, le=65535
    )
    gid: int = Field(
        1000, description="The group ID used to run the session", gt=0, le=65535
    )
    working_directory: Optional[str] = Field(
        None,
        description="The location where the session will start, if left unset it will default to the session image working directory.",
        example="/home/jovyan/work",
        min_length=1,
    )
    mount_directory: Optional[str] = Field(
        None,
        description="The location where the persistent storage for the session will be mounted, usually it should be identical to or a parent of the working directory, if left unset will default to the working directory.",
        example="/home/jovyan/work",
        min_length=1,
    )
    port: int = Field(
        8080,
        description="The TCP port (on any container in the session) where user requests will be routed to from the ingress",
        gt=0,
        lt=65400,
    )
    command: Optional[List[str]] = Field(
        None,
        description="The command that will be run i.e. will overwrite the image Dockerfile ENTRYPOINT, equivalent to command in Kubernetes",
        min_length=1,
    )
    args: Optional[List[str]] = Field(
        None,
        description="The arguments that will follow the command, i.e. will overwrite the image Dockerfile CMD, equivalent to args in Kubernetes",
        min_length=1,
    )
    is_archived: bool = Field(
        False,
        description="Whether this environment is archived and not for use in new projects or not",
    )
    environment_image_source: EnvironmentImageSourceImage


class EnvironmentPatch(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = Field(
        None,
        description="Renku session name",
        example="My Renku Session :)",
        max_length=99,
        min_length=1,
    )
    description: Optional[str] = Field(
        None, description="A description for the resource", max_length=500
    )
    container_image: Optional[str] = Field(
        None,
        description="A container image",
        example="renku/renkulab-py:3.10-0.18.1",
        max_length=500,
        pattern="^[a-z0-9]+((\\.|_|__|-+)[a-z0-9]+)*(\\/[a-z0-9]+((\\.|_|__|-+)[a-z0-9]+)*)*(:[a-zA-Z0-9_][a-zA-Z0-9._-]{0,127}|@sha256:[a-fA-F0-9]{64}){0,1}$",
    )
    default_url: Optional[str] = Field(
        None,
        description="The default path to open in a session",
        example="/lab",
        max_length=200,
    )
    uid: Optional[int] = Field(
        None, description="The user ID used to run the session", gt=0, le=65535
    )
    gid: Optional[int] = Field(
        None, description="The group ID used to run the session", gt=0, le=65535
    )
    working_directory: Optional[str] = Field(None, example="/home/jovyan/work")
    mount_directory: Optional[str] = Field(None, example="/home/jovyan/work")
    port: Optional[int] = Field(
        None,
        description="The TCP port (on any container in the session) where user requests will be routed to from the ingress",
        gt=0,
        lt=65400,
    )
    command: Optional[List[str]] = Field(
        None,
        description="The command that will be run i.e. will overwrite the image Dockerfile ENTRYPOINT, equivalent to command in Kubernetes",
        min_length=1,
    )
    args: Optional[List[str]] = Field(
        None,
        description="The arguments that will follow the command, i.e. will overwrite the image Dockerfile CMD, equivalent to args in Kubernetes",
        min_length=1,
    )
    is_archived: Optional[bool] = Field(
        None,
        description="Whether this environment is archived and not for use in new projects or not",
    )


class EnvironmentIdOnlyPatch(BaseAPISpec):
    id: Optional[str] = Field(
        None,
        description="Id of the environment to use",
        example="01AN4Z79ZS6XX96588FDX0H099",
        min_length=1,
    )


class EnvironmentIdOnlyPost(BaseAPISpec):
    id: str = Field(
        ...,
        description="Id of the environment to use",
        example="01AN4Z79ZS6XX96588FDX0H099",
        min_length=1,
    )


class BuildParameters(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    repository: str = Field(..., description="A git repository URL")
    builder_variant: str = Field(
        ...,
        description="Type of virtual environment manager when building custom environments.",
        max_length=99,
        min_length=1,
    )
    frontend_variant: str = Field(
        ..., description="User's Frontend Choice.", max_length=99, min_length=1
    )


class BuildParametersPost(BuildParameters):
    environment_image_source: EnvironmentImageSourceBuild


class BuildParametersPatch(BaseAPISpec):
    repository: Optional[str] = Field(None, description="A git repository URL")
    builder_variant: Optional[str] = Field(
        None,
        description="Type of virtual environment manager when building custom environments.",
        max_length=99,
        min_length=1,
    )
    frontend_variant: Optional[str] = Field(
        None, description="User's Frontend Choice.", max_length=99, min_length=1
    )


class Build1(BuildCommonPart):
    pass


class Build2(BuildNotCompletedPart, Build1):
    pass


class BuildCompletedPart(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    status: Status1 = Field(..., example="succeeded")
    result: BuildResult


class EnvironmentList(RootModel[List[Environment]]):
    root: List[Environment] = Field(..., description="A list of session environments")


class EnvironmentWithBuildGet(EnvironmentWithoutContainerImage):
    container_image: Optional[str] = Field(
        None,
        description="A container image",
        example="renku/renkulab-py:3.10-0.18.1",
        max_length=500,
        pattern="^[a-z0-9]+((\\.|_|__|-+)[a-z0-9]+)*(\\/[a-z0-9]+((\\.|_|__|-+)[a-z0-9]+)*)*(:[a-zA-Z0-9_][a-zA-Z0-9._-]{0,127}|@sha256:[a-fA-F0-9]{64}){0,1}$",
    )
    build_parameters: BuildParameters
    environment_image_source: EnvironmentImageSourceBuild
    environment_kind: EnvironmentKind = "custom"


class EnvironmentPostInLauncherHelper(EnvironmentPost):
    environment_kind: EnvironmentKind


class EnvironmentPatchInLauncher(EnvironmentPatch):
    environment_kind: Optional[EnvironmentKind] = None
    environment_image_source: Optional[
        Union[EnvironmentImageSourceImage, EnvironmentImageSourceBuild]
    ] = Field(None, description="Source of the environment's image")
    build_parameters: Optional[BuildParametersPatch] = None


class SessionLauncherPost(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(
        ...,
        description="Renku session name",
        example="My Renku Session :)",
        max_length=99,
        min_length=1,
    )
    project_id: str = Field(
        ...,
        description="ULID identifier",
        max_length=26,
        min_length=26,
        pattern="^[0-7][0-9A-HJKMNP-TV-Z]{25}$",
    )
    description: Optional[str] = Field(
        None, description="A description for the resource", max_length=500
    )
    resource_class_id: Optional[int] = Field(
        None, description="The identifier of a resource class"
    )
    disk_storage: Optional[int] = Field(
        None,
        description="The size of disk storage for the session, in gigabytes",
        example=8,
        ge=1,
    )
    environment: Union[
        EnvironmentIdOnlyPost,
        Union[EnvironmentPostInLauncherHelper, BuildParametersPost],
    ]


class SessionLauncherPatch(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = Field(
        None,
        description="Renku session name",
        example="My Renku Session :)",
        max_length=99,
        min_length=1,
    )
    description: Optional[str] = Field(
        None, description="A description for the resource", max_length=500
    )
    resource_class_id: Optional[int] = Field(
        None, description="The identifier of a resource class"
    )
    disk_storage: Optional[int] = Field(None, ge=1)
    environment: Optional[Union[EnvironmentPatchInLauncher, EnvironmentIdOnlyPatch]] = (
        None
    )


class Build3(BuildCompletedPart, Build1):
    pass


class BuildList(RootModel[List[Union[Build2, Build3]]]):
    root: List[Union[Build2, Build3]] = Field(
        ..., description="A list of container image builds"
    )


class SessionLauncher(BaseAPISpec):
    id: str = Field(
        ...,
        description="ULID identifier",
        max_length=26,
        min_length=26,
        pattern="^[0-7][0-9A-HJKMNP-TV-Z]{25}$",
    )
    project_id: str = Field(
        ...,
        description="ULID identifier",
        max_length=26,
        min_length=26,
        pattern="^[0-7][0-9A-HJKMNP-TV-Z]{25}$",
    )
    name: str = Field(
        ...,
        description="Renku session name",
        example="My Renku Session :)",
        max_length=99,
        min_length=1,
    )
    creation_date: datetime = Field(
        ...,
        description="The date and time the resource was created (in UTC and ISO-8601 format)",
        example="2023-11-01T17:32:28Z",
    )
    description: Optional[str] = Field(
        None, description="A description for the resource", max_length=500
    )
    environment: Union[EnvironmentWithImageGet, EnvironmentWithBuildGet]
    resource_class_id: Optional[int] = Field(
        ..., description="The identifier of a resource class"
    )
    disk_storage: Optional[int] = Field(
        None,
        description="The size of disk storage for the session, in gigabytes",
        example=8,
        ge=1,
    )


class SessionLaunchersList(RootModel[List[SessionLauncher]]):
    root: List[SessionLauncher] = Field(
        ..., description="A list of Renku session launchers", min_length=0
    )
