# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-03-03T12:23:11+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import ConfigDict, Field
from renku_data_services.session.cr_base import BaseCRD


class ConfigMapKeyRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(..., description="The key to select.")
    name: str = Field(
        default="",
        description="Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="Specify whether the ConfigMap or its key must be defined",
    )


class FieldRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    apiVersion: Optional[str] = Field(
        default=None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description="Path of the field to select in the specified API version."
    )


class ResourceFieldRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    containerName: Optional[str] = Field(
        default=None,
        description="Container name: required for volumes, optional for env vars",
    )
    divisor: Optional[Union[int, str]] = Field(
        default=None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description="Required: resource to select")


class SecretKeyRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(
        ...,
        description="The key of the secret to select from.  Must be a valid secret key.",
    )
    name: str = Field(
        default="",
        description="Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="Specify whether the Secret or its key must be defined",
    )


class ValueFrom(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    configMapKeyRef: Optional[ConfigMapKeyRef] = Field(
        default=None, description="Selects a key of a ConfigMap."
    )
    fieldRef: Optional[FieldRef] = Field(
        default=None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        default=None,
        description="Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItem(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: str = Field(
        ..., description="Name of the environment variable. Must be a C_IDENTIFIER."
    )
    value: Optional[str] = Field(
        default=None,
        description='Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to "".',
    )
    valueFrom: Optional[ValueFrom] = Field(
        default=None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class Severity(Enum):
    low = "low"
    medium = "medium"
    high = "high"


class Ignore(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    id: Optional[List[str]] = Field(
        default=None,
        description="ID references the security issues to be ignored in vulnerability scan",
    )
    severity: Optional[Severity] = Field(
        default=None,
        description='Severity denotes the severity levels of security issues to be ignored, valid values are:\n- "low": it will exclude low severity vulnerabilities, displaying only medium, high and critical vulnerabilities\n- "medium": it will exclude low and medium severity vulnerabilities, displaying only high and critical vulnerabilities\n- "high": it will exclude low, medium and high severity vulnerabilities, displaying only the critical vulnerabilities',
    )
    unfixed: Optional[bool] = Field(
        default=None,
        description="Unfixed indicates to ignore vulnerabilities for which no fix exists",
    )


class VulnerabilityScan(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    enabled: Optional[bool] = Field(
        default=None,
        description="Enabled indicates whether to run vulnerability scan for image",
    )
    failOnFinding: Optional[bool] = Field(
        default=None,
        description="FailOnFinding indicates whether to fail the build run if the vulnerability scan results in vulnerabilities",
    )
    ignore: Optional[Ignore] = Field(
        default=None,
        description="Ignore refers to ignore options for vulnerability scan",
    )


class Output(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    annotations: Optional[Dict[str, str]] = Field(
        default=None,
        description="Annotations references the additional annotations to be applied on the image",
    )
    image: str = Field(..., description="Image is the reference of the image.")
    insecure: Optional[bool] = Field(
        default=None, description="Insecure defines whether the registry is not secure"
    )
    labels: Optional[Dict[str, str]] = Field(
        default=None,
        description="Labels references the additional labels to be applied on the image",
    )
    pushSecret: Optional[str] = Field(
        default=None,
        description="Describes the secret name for pushing a container image.",
    )
    timestamp: Optional[str] = Field(
        default=None,
        description='Timestamp references the optional image timestamp to be set, valid values are:\n- "Zero", to set 00:00:00 UTC on 1 January 1970\n- "SourceTimestamp", to set the source timestamp dereived from the input source\n- "BuildTimestamp", to set the timestamp of the current build itself\n- Parsable integer number defined as the epoch seconds\n- or nil/empty to not set any specific timestamp',
    )
    vulnerabilityScan: Optional[VulnerabilityScan] = Field(
        default=None,
        description="VulnerabilityScan provides configurations about running a scan for your generated image",
    )


class ConfigMapValue(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    format: Optional[str] = Field(
        default=None,
        description="An optional format to add pre- or suffix to the object value. For example 'KEY=${SECRET_VALUE}' or 'KEY=${CONFIGMAP_VALUE}' depending on the context.",
    )
    key: str = Field(..., description="Key inside the object")
    name: str = Field(..., description="Name of the object")


class SecretValue(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    format: Optional[str] = Field(
        default=None,
        description="An optional format to add pre- or suffix to the object value. For example 'KEY=${SECRET_VALUE}' or 'KEY=${CONFIGMAP_VALUE}' depending on the context.",
    )
    key: str = Field(..., description="Key inside the object")
    name: str = Field(..., description="Name of the object")


class Value(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    configMapValue: Optional[ConfigMapValue] = Field(
        default=None, description="The ConfigMap value of the parameter"
    )
    secretValue: Optional[SecretValue] = Field(
        default=None, description="The secret value of the parameter"
    )
    value: Optional[str] = Field(default=None, description="The value of the parameter")


class ParamValue(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    configMapValue: Optional[ConfigMapValue] = Field(
        default=None, description="The ConfigMap value of the parameter"
    )
    name: str = Field(..., description="Name of the parameter")
    secretValue: Optional[SecretValue] = Field(
        default=None, description="The secret value of the parameter"
    )
    value: Optional[str] = Field(default=None, description="The value of the parameter")
    values: Optional[List[Value]] = Field(
        default=None, description="Values of an array parameter"
    )


class Retention(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    atBuildDeletion: Optional[bool] = Field(
        default=None,
        description="AtBuildDeletion defines if related BuildRuns should be deleted when deleting the Build.",
    )
    failedLimit: Optional[int] = Field(
        default=None,
        description="FailedLimit defines the maximum number of failed buildruns that should exist.",
        ge=1,
        le=10000,
    )
    succeededLimit: Optional[int] = Field(
        default=None,
        description="SucceededLimit defines the maximum number of succeeded buildruns that should exist.",
        ge=1,
        le=10000,
    )
    ttlAfterFailed: Optional[str] = Field(
        default=None,
        description="TTLAfterFailed defines the maximum duration of time the failed buildrun should exist.",
    )
    ttlAfterSucceeded: Optional[str] = Field(
        default=None,
        description="TTLAfterSucceeded defines the maximum duration of time the succeeded buildrun should exist.",
    )


class Git(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    cloneSecret: Optional[str] = Field(
        default=None,
        description="CloneSecret references a Secret that contains credentials to access\nthe repository.",
    )
    revision: Optional[str] = Field(
        default=None,
        description="Revision describes the Git revision (e.g., branch, tag, commit SHA,\netc.) to fetch.\n\n\nIf not defined, it will fallback to the repository's default branch.",
    )
    url: str = Field(..., description="URL describes the URL of the Git repository.")


class Local(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: Optional[str] = Field(default=None, description="Name of the local step")
    timeout: Optional[str] = Field(
        default=None,
        description="Timeout how long the BuildSource execution must take.",
    )


class OciArtifact(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    image: str = Field(..., description="Image reference, i.e. quay.io/org/image:tag")
    prune: Optional[str] = Field(
        default=None,
        description="Prune specifies whether the image is suppose to be deleted. Allowed\nvalues are 'Never' (no deletion) and `AfterPull` (removal after the\nimage was successfully pulled from the registry).\n\n\nIf not defined, it defaults to 'Never'.",
    )
    pullSecret: Optional[str] = Field(
        default=None,
        description="PullSecret references a Secret that contains credentials to access\nthe repository.",
    )


class Source(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    contextDir: Optional[str] = Field(
        default=None,
        description="ContextDir is a path to subfolder in the repo. Optional.",
    )
    git: Optional[Git] = Field(
        default=None, description="Git contains the details for the source of type Git"
    )
    local: Optional[Local] = Field(
        default=None,
        description="Local contains the details for the source of type Local",
    )
    ociArtifact: Optional[OciArtifact] = Field(
        default=None,
        description="OCIArtifact contains the details for the source of type OCIArtifact",
    )
    type: str = Field(
        ..., description="Type is the BuildSource qualifier, the type of the source."
    )


class Strategy(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    kind: Optional[str] = Field(
        default=None,
        description="BuildStrategyKind indicates the kind of the buildstrategy, namespaced or cluster scoped.",
    )
    name: str = Field(
        ...,
        description="Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
    )


class Toleration(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    effect: Optional[str] = Field(
        default=None,
        description="Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
    )
    key: Optional[str] = Field(
        default=None,
        description="Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.",
    )
    operator: Optional[str] = Field(
        default=None,
        description="Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.",
    )
    tolerationSeconds: Optional[int] = Field(
        default=None,
        description="TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.",
    )
    value: Optional[str] = Field(
        default=None,
        description="Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.",
    )


class Github(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    branches: Optional[List[str]] = Field(
        default=None,
        description="Branches slice of branch names where the event applies.",
    )
    events: Optional[List[str]] = Field(
        default=None, description="Events GitHub event names.", min_length=1
    )


class Image(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    names: Optional[List[str]] = Field(
        default=None, description="Names fully qualified image names."
    )


class ObjectRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: Optional[str] = Field(default=None, description="Name target object name.")
    selector: Optional[Dict[str, str]] = Field(
        default=None, description="Selector label selector."
    )
    status: Optional[List[str]] = Field(
        default=None, description="Status object status."
    )


class WhenItem(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    github: Optional[Github] = Field(
        default=None,
        description="GitHub describes how to trigger builds based on GitHub (SCM) events.",
    )
    image: Optional[Image] = Field(
        default=None, description="Image slice of image names where the event applies."
    )
    name: str = Field(
        ..., description="Name name or the short description of the trigger condition."
    )
    objectRef: Optional[ObjectRef] = Field(
        default=None,
        description="ObjectRef describes how to match a foreign resource, either using the name or the label\nselector, plus the current resource status.",
    )
    type: str = Field(..., description="Type the event type")


class Trigger(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    triggerSecret: Optional[str] = Field(
        default=None,
        description="TriggerSecret points to a local object carrying the secret token to validate webhook request.",
    )
    when: Optional[List[WhenItem]] = Field(
        default=None,
        description="When the list of scenarios when a new build should take place.",
    )


class AwsElasticBlockStore(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\nTODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    partition: Optional[int] = Field(
        default=None,
        description='partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as "1".\nSimilarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).',
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly value true will force the readOnly setting in VolumeMounts.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    )
    volumeID: str = Field(
        ...,
        description="volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    )


class AzureDisk(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    cachingMode: Optional[str] = Field(
        default=None,
        description="cachingMode is the Host Caching mode: None, Read Only, Read Write.",
    )
    diskName: str = Field(
        ..., description="diskName is the Name of the data disk in the blob storage"
    )
    diskURI: str = Field(
        ..., description="diskURI is the URI of data disk in the blob storage"
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    kind: Optional[str] = Field(
        default=None,
        description="kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )


class AzureFile(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    secretName: str = Field(
        ...,
        description="secretName is the  name of secret that contains Azure Storage Account Name and Key",
    )
    shareName: str = Field(..., description="shareName is the azure share Name")


class SecretRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: str = Field(
        default="",
        description="Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
    )


class Cephfs(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    monitors: List[str] = Field(
        ...,
        description="monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    path: Optional[str] = Field(
        default=None,
        description="path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    secretFile: Optional[str] = Field(
        default=None,
        description="secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    user: Optional[str] = Field(
        default=None,
        description="user is optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )


class Cinder(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef is optional: points to a secret object containing parameters used to connect\nto OpenStack.",
    )
    volumeID: str = Field(
        ...,
        description="volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
    )


class Item(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(..., description="key is the key to project.")
    mode: Optional[int] = Field(
        default=None,
        description="mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.",
    )


class ConfigMap(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="defaultMode is optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    items: Optional[List[Item]] = Field(
        default=None,
        description="items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    name: str = Field(
        default="",
        description="Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional specify whether the ConfigMap or its keys must be defined",
    )


class NodePublishSecretRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: str = Field(
        default="",
        description="Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
    )


class Csi(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    driver: str = Field(
        ...,
        description="driver is the name of the CSI driver that handles this volume.\nConsult with your admin for the correct name as registered in the cluster.",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType to mount. Ex. "ext4", "xfs", "ntfs".\nIf not provided, the empty value is passed to the associated CSI driver\nwhich will determine the default filesystem to apply.',
    )
    nodePublishSecretRef: Optional[NodePublishSecretRef] = Field(
        default=None,
        description="nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and  may be empty if no secret is required. If the\nsecret object contains more than one secret, all secret references are passed.",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly specifies a read-only configuration for the volume.\nDefaults to false (read/write).",
    )
    volumeAttributes: Optional[Dict[str, str]] = Field(
        default=None,
        description="volumeAttributes stores driver-specific properties that are passed to the CSI\ndriver. Consult your driver's documentation for supported values.",
    )


class Item1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fieldRef: Optional[FieldRef] = Field(
        default=None,
        description="Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.",
    )
    mode: Optional[int] = Field(
        default=None,
        description="Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        default=None,
        description="Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
    )


class DownwardAPI(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="Optional: mode bits to use on created files by default. Must be a\nOptional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    items: Optional[List[Item1]] = Field(
        default=None, description="Items is a list of downward API volume file"
    )


class EmptyDir(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    medium: Optional[str] = Field(
        default=None,
        description='medium represents what type of storage medium should back this directory.\nThe default is "" which means to use the node\'s default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
    )
    sizeLimit: Optional[Union[int, str]] = Field(
        default=None,
        description="sizeLimit is the total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value between\nthe SizeLimit specified here and the sum of memory limits of all containers in a pod.\nThe default is nil which means that the limit is undefined.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    )


class DataSource(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    apiGroup: Optional[str] = Field(
        default=None,
        description="APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
    )
    kind: str = Field(..., description="Kind is the type of resource being referenced")
    name: str = Field(..., description="Name is the name of resource being referenced")


class DataSourceRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    apiGroup: Optional[str] = Field(
        default=None,
        description="APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
    )
    kind: str = Field(..., description="Kind is the type of resource being referenced")
    name: str = Field(..., description="Name is the name of resource being referenced")
    namespace: Optional[str] = Field(
        default=None,
        description="Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
    )


class Resources(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    limits: Optional[Dict[str, Union[int, str]]] = Field(
        default=None,
        description="Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    )
    requests: Optional[Dict[str, Union[int, str]]] = Field(
        default=None,
        description="Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    )


class MatchExpression(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(
        ..., description="key is the label key that the selector applies to."
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        default=None,
        description="values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
    )


class Selector(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    matchExpressions: Optional[List[MatchExpression]] = Field(
        default=None,
        description="matchExpressions is a list of label selector requirements. The requirements are ANDed.",
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        default=None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is "key", the\noperator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class Spec2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    accessModes: Optional[List[str]] = Field(
        default=None,
        description="accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    )
    dataSource: Optional[DataSource] = Field(
        default=None,
        description="dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.",
    )
    dataSourceRef: Optional[DataSourceRef] = Field(
        default=None,
        description="dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
    )
    resources: Optional[Resources] = Field(
        default=None,
        description="resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
    )
    selector: Optional[Selector] = Field(
        default=None,
        description="selector is a label query over volumes to consider for binding.",
    )
    storageClassName: Optional[str] = Field(
        default=None,
        description="storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
    )
    volumeAttributesClassName: Optional[str] = Field(
        default=None,
        description="volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.",
    )
    volumeMode: Optional[str] = Field(
        default=None,
        description="volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.",
    )
    volumeName: Optional[str] = Field(
        default=None,
        description="volumeName is the binding reference to the PersistentVolume backing this claim.",
    )


class VolumeClaimTemplate(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    metadata: Optional[Dict[str, Any]] = Field(
        default=None,
        description="May contain labels and annotations that will be copied into the PVC\nwhen creating it. No other fields are allowed and will be rejected during\nvalidation.",
    )
    spec: Spec2 = Field(
        ...,
        description="The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here.",
    )


class Ephemeral(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    volumeClaimTemplate: Optional[VolumeClaimTemplate] = Field(
        default=None,
        description="Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be `<pod name>-<volume name>` where\n`<volume name>` is the name from the `PodSpec.Volumes` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\n\nRequired, must not be nil.",
    )


class Fc(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nTODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    lun: Optional[int] = Field(
        default=None, description="lun is Optional: FC target lun number"
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    targetWWNs: Optional[List[str]] = Field(
        default=None,
        description="targetWWNs is Optional: FC target worldwide names (WWNs)",
    )
    wwids: Optional[List[str]] = Field(
        default=None,
        description="wwids Optional: FC volume world wide identifiers (wwids)\nEither wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
    )


class FlexVolume(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    driver: str = Field(
        ..., description="driver is the name of the driver to use for this volume."
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
    )
    options: Optional[Dict[str, str]] = Field(
        default=None,
        description="options is Optional: this field holds extra command options if any.",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef is Optional: secretRef is reference to the secret object containing\nsensitive information to pass to the plugin scripts. This may be\nempty if no secret object is specified. If the secret object\ncontains more than one secret, all secrets are passed to the plugin\nscripts.",
    )


class Flocker(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    datasetName: Optional[str] = Field(
        default=None,
        description="datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker\nshould be considered as deprecated",
    )
    datasetUUID: Optional[str] = Field(
        default=None,
        description="datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset",
    )


class GcePersistentDisk(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\nTODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    partition: Optional[int] = Field(
        default=None,
        description='partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as "1".\nSimilarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )
    pdName: str = Field(
        ...,
        description="pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    )


class GitRepo(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    directory: Optional[str] = Field(
        default=None,
        description="directory is the target directory name.\nMust not contain or start with '..'.  If '.' is supplied, the volume directory will be the\ngit repository.  Otherwise, if specified, the volume will contain the git repository in\nthe subdirectory with the given name.",
    )
    repository: str = Field(..., description="repository is the URL")
    revision: Optional[str] = Field(
        default=None,
        description="revision is the commit hash for the specified revision.",
    )


class Glusterfs(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    endpoints: str = Field(
        ...,
        description="endpoints is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    )
    path: str = Field(
        ...,
        description="path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    )


class HostPath(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    path: str = Field(
        ...,
        description="path of the directory on the host.\nIf the path is a symlink, it will follow the link to the real path.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    )
    type: Optional[str] = Field(
        default=None,
        description='type for HostPath Volume\nDefaults to ""\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
    )


class Iscsi(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    chapAuthDiscovery: Optional[bool] = Field(
        default=None,
        description="chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
    )
    chapAuthSession: Optional[bool] = Field(
        default=None,
        description="chapAuthSession defines whether support iSCSI Session CHAP authentication",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\nTODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    initiatorName: Optional[str] = Field(
        default=None,
        description="initiatorName is the custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n<target portal>:<volume name> will be created for the connection.",
    )
    iqn: str = Field(..., description="iqn is the target iSCSI Qualified Name.")
    iscsiInterface: Optional[str] = Field(
        default=None,
        description="iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).",
    )
    lun: int = Field(..., description="lun represents iSCSI Target Lun number.")
    portals: Optional[List[str]] = Field(
        default=None,
        description="portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef is the CHAP Secret for iSCSI target and initiator authentication",
    )
    targetPortal: str = Field(
        ...,
        description="targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).",
    )


class Nfs(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    path: str = Field(
        ...,
        description="path that is exported by the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the NFS export to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    )
    server: str = Field(
        ...,
        description="server is the hostname or IP address of the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    )


class PersistentVolumeClaim(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    claimName: str = Field(
        ...,
        description="claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly Will force the ReadOnly setting in VolumeMounts.\nDefault false.",
    )


class PhotonPersistentDisk(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    pdID: str = Field(
        ...,
        description="pdID is the ID that identifies Photon Controller persistent disk",
    )


class PortworxVolume(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fSType represents the filesystem type to mount\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    volumeID: str = Field(
        ..., description="volumeID uniquely identifies a Portworx volume"
    )


class LabelSelector(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    matchExpressions: Optional[List[MatchExpression]] = Field(
        default=None,
        description="matchExpressions is a list of label selector requirements. The requirements are ANDed.",
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        default=None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is "key", the\noperator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class ClusterTrustBundle(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    labelSelector: Optional[LabelSelector] = Field(
        default=None,
        description='Select all ClusterTrustBundles that match this label selector.  Only has\neffect if signerName is set.  Mutually-exclusive with name.  If unset,\ninterpreted as "match nothing".  If set but empty, interpreted as "match\neverything".',
    )
    name: Optional[str] = Field(
        default=None,
        description="Select a single ClusterTrustBundle by object name.  Mutually-exclusive\nwith signerName and labelSelector.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="If true, don't block pod startup if the referenced ClusterTrustBundle(s)\naren't available.  If using name, then the named ClusterTrustBundle is\nallowed not to exist.  If using signerName, then the combination of\nsignerName and labelSelector is allowed to match zero\nClusterTrustBundles.",
    )
    path: str = Field(
        ..., description="Relative path from the volume root to write the bundle."
    )
    signerName: Optional[str] = Field(
        default=None,
        description="Select all ClusterTrustBundles that match this signer name.\nMutually-exclusive with name.  The contents of all selected\nClusterTrustBundles will be unified and deduplicated.",
    )


class Item2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(..., description="key is the key to project.")
    mode: Optional[int] = Field(
        default=None,
        description="mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.",
    )


class ConfigMap1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    items: Optional[List[Item2]] = Field(
        default=None,
        description="items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    name: str = Field(
        default="",
        description="Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional specify whether the ConfigMap or its keys must be defined",
    )


class Item3(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fieldRef: Optional[FieldRef] = Field(
        default=None,
        description="Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.",
    )
    mode: Optional[int] = Field(
        default=None,
        description="Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        default=None,
        description="Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
    )


class DownwardAPI1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    items: Optional[List[Item3]] = Field(
        default=None, description="Items is a list of DownwardAPIVolume file"
    )


class Item4(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(..., description="key is the key to project.")
    mode: Optional[int] = Field(
        default=None,
        description="mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.",
    )


class Secret(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    items: Optional[List[Item4]] = Field(
        default=None,
        description="items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    name: str = Field(
        default="",
        description="Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional field specify whether the Secret or its key must be defined",
    )


class ServiceAccountToken(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    audience: Optional[str] = Field(
        default=None,
        description="audience is the intended audience of the token. A recipient of a token\nmust identify itself with an identifier specified in the audience of the\ntoken, and otherwise should reject the token. The audience defaults to the\nidentifier of the apiserver.",
    )
    expirationSeconds: Optional[int] = Field(
        default=None,
        description="expirationSeconds is the requested duration of validity of the service\naccount token. As the token approaches expiration, the kubelet volume\nplugin will proactively rotate the service account token. The kubelet will\nstart trying to rotate the token if the token is older than 80 percent of\nits time to live or if the token is older than 24 hours.Defaults to 1 hour\nand must be at least 10 minutes.",
    )
    path: str = Field(
        ...,
        description="path is the path relative to the mount point of the file to project the\ntoken into.",
    )


class Source1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    clusterTrustBundle: Optional[ClusterTrustBundle] = Field(
        default=None,
        description="ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field\nof ClusterTrustBundle objects in an auto-updating file.\n\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\n\nClusterTrustBundle objects can either be selected by name, or by the\ncombination of signer name and a label selector.\n\n\nKubelet performs aggressive normalization of the PEM contents written\ninto the pod filesystem.  Esoteric PEM features such as inter-block\ncomments and block headers are stripped.  Certificates are deduplicated.\nThe ordering of certificates within the file is arbitrary, and Kubelet\nmay change the order over time.",
    )
    configMap: Optional[ConfigMap1] = Field(
        default=None,
        description="configMap information about the configMap data to project",
    )
    downwardAPI: Optional[DownwardAPI1] = Field(
        default=None,
        description="downwardAPI information about the downwardAPI data to project",
    )
    secret: Optional[Secret] = Field(
        default=None, description="secret information about the secret data to project"
    )
    serviceAccountToken: Optional[ServiceAccountToken] = Field(
        default=None,
        description="serviceAccountToken is information about the serviceAccountToken data to project",
    )


class Projected(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="defaultMode are the mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    sources: Optional[List[Source1]] = Field(
        default=None, description="sources is the list of volume projections"
    )


class Quobyte(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    group: Optional[str] = Field(
        default=None, description="group to map volume access to\nDefault is no group"
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the Quobyte volume to be mounted with read-only permissions.\nDefaults to false.",
    )
    registry: str = Field(
        ...,
        description="registry represents a single or multiple Quobyte Registry services\nspecified as a string as host:port pair (multiple entries are separated with commas)\nwhich acts as the central registry for volumes",
    )
    tenant: Optional[str] = Field(
        default=None,
        description="tenant owning the given Quobyte volume in the Backend\nUsed with dynamically provisioned Quobyte volumes, value is set by the plugin",
    )
    user: Optional[str] = Field(
        default=None,
        description="user to map volume access to\nDefaults to serivceaccount user",
    )
    volume: str = Field(
        ...,
        description="volume is a string that references an already created Quobyte volume by name.",
    )


class Rbd(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\nTODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    image: str = Field(
        ...,
        description="image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    keyring: Optional[str] = Field(
        default=None,
        description="keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    monitors: List[str] = Field(
        ...,
        description="monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    pool: Optional[str] = Field(
        default=None,
        description="pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    user: Optional[str] = Field(
        default=None,
        description="user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )


class ScaleIO(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs".\nDefault is "xfs".',
    )
    gateway: str = Field(
        ..., description="gateway is the host address of the ScaleIO API Gateway."
    )
    protectionDomain: Optional[str] = Field(
        default=None,
        description="protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    secretRef: SecretRef = Field(
        ...,
        description="secretRef references to the secret for ScaleIO user and other\nsensitive information. If this is not provided, Login operation will fail.",
    )
    sslEnabled: Optional[bool] = Field(
        default=None,
        description="sslEnabled Flag enable/disable SSL communication with Gateway, default false",
    )
    storageMode: Optional[str] = Field(
        default=None,
        description="storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.",
    )
    storagePool: Optional[str] = Field(
        default=None,
        description="storagePool is the ScaleIO Storage Pool associated with the protection domain.",
    )
    system: str = Field(
        ...,
        description="system is the name of the storage system as configured in ScaleIO.",
    )
    volumeName: Optional[str] = Field(
        default=None,
        description="volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source.",
    )


class Secret1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="defaultMode is Optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values\nfor mode bits. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    items: Optional[List[Item4]] = Field(
        default=None,
        description="items If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional field specify whether the Secret or its keys must be defined",
    )
    secretName: Optional[str] = Field(
        default=None,
        description="secretName is the name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
    )


class Storageos(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.  If not specified, default values will be attempted.",
    )
    volumeName: Optional[str] = Field(
        default=None,
        description="volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace.",
    )
    volumeNamespace: Optional[str] = Field(
        default=None,
        description='volumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod\'s namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to "default" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.',
    )


class VsphereVolume(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    storagePolicyID: Optional[str] = Field(
        default=None,
        description="storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
    )
    storagePolicyName: Optional[str] = Field(
        default=None,
        description="storagePolicyName is the storage Policy Based Management (SPBM) profile name.",
    )
    volumePath: str = Field(
        ..., description="volumePath is the path that identifies vSphere volume vmdk"
    )


class Volume(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    awsElasticBlockStore: Optional[AwsElasticBlockStore] = Field(
        default=None,
        description="awsElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    )
    azureDisk: Optional[AzureDisk] = Field(
        default=None,
        description="azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
    )
    azureFile: Optional[AzureFile] = Field(
        default=None,
        description="azureFile represents an Azure File Service mount on the host and bind mount to the pod.",
    )
    cephfs: Optional[Cephfs] = Field(
        default=None,
        description="cephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
    )
    cinder: Optional[Cinder] = Field(
        default=None,
        description="cinder represents a cinder volume attached and mounted on kubelets host machine.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
    )
    configMap: Optional[ConfigMap] = Field(
        default=None,
        description="configMap represents a configMap that should populate this volume",
    )
    csi: Optional[Csi] = Field(
        default=None,
        description="csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).",
    )
    downwardAPI: Optional[DownwardAPI] = Field(
        default=None,
        description="downwardAPI represents downward API about the pod that should populate this volume",
    )
    emptyDir: Optional[EmptyDir] = Field(
        default=None,
        description="emptyDir represents a temporary directory that shares a pod's lifetime.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    )
    ephemeral: Optional[Ephemeral] = Field(
        default=None,
        description="ephemeral represents a volume that is handled by a cluster storage driver.\nThe volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,\nand deleted when the pod is removed.\n\n\nUse this if:\na) the volume is only needed while the pod runs,\nb) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and\nd) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\n\nUse PersistentVolumeClaim or one of the vendor-specific\nAPIs for volumes that persist for longer than the lifecycle\nof an individual pod.\n\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to\nbe used that way - see the documentation of the driver for\nmore information.\n\n\nA pod can use both types of ephemeral volumes and\npersistent volumes at the same time.",
    )
    fc: Optional[Fc] = Field(
        default=None,
        description="fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
    )
    flexVolume: Optional[FlexVolume] = Field(
        default=None,
        description="flexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.",
    )
    flocker: Optional[Flocker] = Field(
        default=None,
        description="flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
    )
    gcePersistentDisk: Optional[GcePersistentDisk] = Field(
        default=None,
        description="gcePersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    )
    gitRepo: Optional[GitRepo] = Field(
        default=None,
        description="gitRepo represents a git repository at a particular revision.\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an\nEmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir\ninto the Pod's container.",
    )
    glusterfs: Optional[Glusterfs] = Field(
        default=None,
        description="glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md",
    )
    hostPath: Optional[HostPath] = Field(
        default=None,
        description="hostPath represents a pre-existing file or directory on the host\nmachine that is directly exposed to the container. This is generally\nused for system agents or other privileged things that are allowed\nto see the host machine. Most containers will NOT need this.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n---\nTODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not\nmount host directories as read/write.",
    )
    iscsi: Optional[Iscsi] = Field(
        default=None,
        description="iscsi represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://examples.k8s.io/volumes/iscsi/README.md",
    )
    name: str = Field(..., description="Name of the Build Volume")
    nfs: Optional[Nfs] = Field(
        default=None,
        description="nfs represents an NFS mount on the host that shares a pod's lifetime\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    )
    persistentVolumeClaim: Optional[PersistentVolumeClaim] = Field(
        default=None,
        description="persistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    )
    photonPersistentDisk: Optional[PhotonPersistentDisk] = Field(
        default=None,
        description="photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
    )
    portworxVolume: Optional[PortworxVolume] = Field(
        default=None,
        description="portworxVolume represents a portworx volume attached and mounted on kubelets host machine",
    )
    projected: Optional[Projected] = Field(
        default=None,
        description="projected items for all in one resources secrets, configmaps, and downward API",
    )
    quobyte: Optional[Quobyte] = Field(
        default=None,
        description="quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
    )
    rbd: Optional[Rbd] = Field(
        default=None,
        description="rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/rbd/README.md",
    )
    scaleIO: Optional[ScaleIO] = Field(
        default=None,
        description="scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
    )
    secret: Optional[Secret1] = Field(
        default=None,
        description="secret represents a secret that should populate this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
    )
    storageos: Optional[Storageos] = Field(
        default=None,
        description="storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
    )
    vsphereVolume: Optional[VsphereVolume] = Field(
        default=None,
        description="vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
    )


class Spec1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    env: Optional[List[EnvItem]] = Field(
        default=None,
        description="Env contains additional environment variables that should be passed to the build container",
    )
    nodeSelector: Optional[Dict[str, str]] = Field(
        default=None,
        description="NodeSelector is a selector which must be true for the pod to fit on a node.\nSelector which must match a node's labels for the pod to be scheduled on that node.\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
    )
    output: Output = Field(
        ...,
        description="Output refers to the location where the built image would be pushed.",
    )
    paramValues: Optional[List[ParamValue]] = Field(
        default=None,
        description="Params is a list of key/value that could be used\nto set strategy parameters",
    )
    retention: Optional[Retention] = Field(
        default=None, description="Contains information about retention params"
    )
    schedulerName: Optional[str] = Field(
        default=None,
        description="SchedulerName specifies the scheduler to be used to dispatch the Pod",
    )
    source: Optional[Source] = Field(
        default=None,
        description="Source refers to the location where the source code is,\nthis could be a git repository, a local source or an oci\nartifact",
    )
    strategy: Strategy = Field(
        ...,
        description="Strategy references the BuildStrategy to use to build the container\nimage.",
    )
    timeout: Optional[str] = Field(
        default=None,
        description="Timeout defines the maximum amount of time the Build should take to execute.",
    )
    tolerations: Optional[List[Toleration]] = Field(
        default=None, description="If specified, the pod's tolerations."
    )
    trigger: Optional[Trigger] = Field(
        default=None,
        description="Trigger defines the scenarios where a new build should be triggered.",
    )
    volumes: Optional[List[Volume]] = Field(
        default=None,
        description="Volumes contains volume Overrides of the BuildStrategy volumes in case those are allowed\nto be overridden. Must only contain volumes that exist in the corresponding BuildStrategy",
    )


class Build(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: Optional[str] = Field(
        default=None,
        description="Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
    )
    spec: Optional[Spec1] = Field(
        default=None, description="Spec refers to an embedded build specification"
    )


class ValueFrom1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    configMapKeyRef: Optional[ConfigMapKeyRef] = Field(
        default=None, description="Selects a key of a ConfigMap."
    )
    fieldRef: Optional[FieldRef] = Field(
        default=None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        default=None,
        description="Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItem1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: str = Field(
        ..., description="Name of the environment variable. Must be a C_IDENTIFIER."
    )
    value: Optional[str] = Field(
        default=None,
        description='Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to "".',
    )
    valueFrom: Optional[ValueFrom1] = Field(
        default=None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class Ignore1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    id: Optional[List[str]] = Field(
        default=None,
        description="ID references the security issues to be ignored in vulnerability scan",
    )
    severity: Optional[Severity] = Field(
        default=None,
        description='Severity denotes the severity levels of security issues to be ignored, valid values are:\n- "low": it will exclude low severity vulnerabilities, displaying only medium, high and critical vulnerabilities\n- "medium": it will exclude low and medium severity vulnerabilities, displaying only high and critical vulnerabilities\n- "high": it will exclude low, medium and high severity vulnerabilities, displaying only the critical vulnerabilities',
    )
    unfixed: Optional[bool] = Field(
        default=None,
        description="Unfixed indicates to ignore vulnerabilities for which no fix exists",
    )


class VulnerabilityScan1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    enabled: Optional[bool] = Field(
        default=None,
        description="Enabled indicates whether to run vulnerability scan for image",
    )
    failOnFinding: Optional[bool] = Field(
        default=None,
        description="FailOnFinding indicates whether to fail the build run if the vulnerability scan results in vulnerabilities",
    )
    ignore: Optional[Ignore1] = Field(
        default=None,
        description="Ignore refers to ignore options for vulnerability scan",
    )


class Output1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    annotations: Optional[Dict[str, str]] = Field(
        default=None,
        description="Annotations references the additional annotations to be applied on the image",
    )
    image: str = Field(..., description="Image is the reference of the image.")
    insecure: Optional[bool] = Field(
        default=None, description="Insecure defines whether the registry is not secure"
    )
    labels: Optional[Dict[str, str]] = Field(
        default=None,
        description="Labels references the additional labels to be applied on the image",
    )
    pushSecret: Optional[str] = Field(
        default=None,
        description="Describes the secret name for pushing a container image.",
    )
    timestamp: Optional[str] = Field(
        default=None,
        description='Timestamp references the optional image timestamp to be set, valid values are:\n- "Zero", to set 00:00:00 UTC on 1 January 1970\n- "SourceTimestamp", to set the source timestamp dereived from the input source\n- "BuildTimestamp", to set the timestamp of the current build itself\n- Parsable integer number defined as the epoch seconds\n- or nil/empty to not set any specific timestamp',
    )
    vulnerabilityScan: Optional[VulnerabilityScan1] = Field(
        default=None,
        description="VulnerabilityScan provides configurations about running a scan for your generated image",
    )


class Value1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    configMapValue: Optional[ConfigMapValue] = Field(
        default=None, description="The ConfigMap value of the parameter"
    )
    secretValue: Optional[SecretValue] = Field(
        default=None, description="The secret value of the parameter"
    )
    value: Optional[str] = Field(default=None, description="The value of the parameter")


class ParamValue1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    configMapValue: Optional[ConfigMapValue] = Field(
        default=None, description="The ConfigMap value of the parameter"
    )
    name: str = Field(..., description="Name of the parameter")
    secretValue: Optional[SecretValue] = Field(
        default=None, description="The secret value of the parameter"
    )
    value: Optional[str] = Field(default=None, description="The value of the parameter")
    values: Optional[List[Value1]] = Field(
        default=None, description="Values of an array parameter"
    )


class Retention1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    ttlAfterFailed: Optional[str] = Field(
        default=None,
        description="TTLAfterFailed defines the maximum duration of time the failed buildrun should exist.",
    )
    ttlAfterSucceeded: Optional[str] = Field(
        default=None,
        description="TTLAfterSucceeded defines the maximum duration of time the succeeded buildrun should exist.",
    )


class Source2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    local: Optional[Local] = Field(
        default=None,
        description="Local contains the details for the source of type Local",
    )
    type: str = Field(
        ...,
        description="Type is the BuildRunSource qualifier, the type of the source.\nOnly Local is supported.",
    )


class Cephfs1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    monitors: List[str] = Field(
        ...,
        description="monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    path: Optional[str] = Field(
        default=None,
        description="path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    secretFile: Optional[str] = Field(
        default=None,
        description="secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    user: Optional[str] = Field(
        default=None,
        description="user is optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )


class Cinder1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef is optional: points to a secret object containing parameters used to connect\nto OpenStack.",
    )
    volumeID: str = Field(
        ...,
        description="volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
    )


class ConfigMap2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="defaultMode is optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    items: Optional[List[Item4]] = Field(
        default=None,
        description="items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    name: str = Field(
        default="",
        description="Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional specify whether the ConfigMap or its keys must be defined",
    )


class Csi1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    driver: str = Field(
        ...,
        description="driver is the name of the CSI driver that handles this volume.\nConsult with your admin for the correct name as registered in the cluster.",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType to mount. Ex. "ext4", "xfs", "ntfs".\nIf not provided, the empty value is passed to the associated CSI driver\nwhich will determine the default filesystem to apply.',
    )
    nodePublishSecretRef: Optional[NodePublishSecretRef] = Field(
        default=None,
        description="nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and  may be empty if no secret is required. If the\nsecret object contains more than one secret, all secret references are passed.",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly specifies a read-only configuration for the volume.\nDefaults to false (read/write).",
    )
    volumeAttributes: Optional[Dict[str, str]] = Field(
        default=None,
        description="volumeAttributes stores driver-specific properties that are passed to the CSI\ndriver. Consult your driver's documentation for supported values.",
    )


class Item7(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fieldRef: Optional[FieldRef] = Field(
        default=None,
        description="Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.",
    )
    mode: Optional[int] = Field(
        default=None,
        description="Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        default=None,
        description="Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
    )


class DownwardAPI2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="Optional: mode bits to use on created files by default. Must be a\nOptional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    items: Optional[List[Item7]] = Field(
        default=None, description="Items is a list of downward API volume file"
    )


class Selector1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    matchExpressions: Optional[List[MatchExpression]] = Field(
        default=None,
        description="matchExpressions is a list of label selector requirements. The requirements are ANDed.",
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        default=None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is "key", the\noperator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class Spec3(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    accessModes: Optional[List[str]] = Field(
        default=None,
        description="accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    )
    dataSource: Optional[DataSource] = Field(
        default=None,
        description="dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.",
    )
    dataSourceRef: Optional[DataSourceRef] = Field(
        default=None,
        description="dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
    )
    resources: Optional[Resources] = Field(
        default=None,
        description="resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
    )
    selector: Optional[Selector1] = Field(
        default=None,
        description="selector is a label query over volumes to consider for binding.",
    )
    storageClassName: Optional[str] = Field(
        default=None,
        description="storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
    )
    volumeAttributesClassName: Optional[str] = Field(
        default=None,
        description="volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.",
    )
    volumeMode: Optional[str] = Field(
        default=None,
        description="volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.",
    )
    volumeName: Optional[str] = Field(
        default=None,
        description="volumeName is the binding reference to the PersistentVolume backing this claim.",
    )


class VolumeClaimTemplate1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    metadata: Optional[Dict[str, Any]] = Field(
        default=None,
        description="May contain labels and annotations that will be copied into the PVC\nwhen creating it. No other fields are allowed and will be rejected during\nvalidation.",
    )
    spec: Spec3 = Field(
        ...,
        description="The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here.",
    )


class Ephemeral1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    volumeClaimTemplate: Optional[VolumeClaimTemplate1] = Field(
        default=None,
        description="Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be `<pod name>-<volume name>` where\n`<volume name>` is the name from the `PodSpec.Volumes` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\n\nRequired, must not be nil.",
    )


class FlexVolume1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    driver: str = Field(
        ..., description="driver is the name of the driver to use for this volume."
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
    )
    options: Optional[Dict[str, str]] = Field(
        default=None,
        description="options is Optional: this field holds extra command options if any.",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef is Optional: secretRef is reference to the secret object containing\nsensitive information to pass to the plugin scripts. This may be\nempty if no secret object is specified. If the secret object\ncontains more than one secret, all secrets are passed to the plugin\nscripts.",
    )


class Iscsi1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    chapAuthDiscovery: Optional[bool] = Field(
        default=None,
        description="chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
    )
    chapAuthSession: Optional[bool] = Field(
        default=None,
        description="chapAuthSession defines whether support iSCSI Session CHAP authentication",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\nTODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    initiatorName: Optional[str] = Field(
        default=None,
        description="initiatorName is the custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n<target portal>:<volume name> will be created for the connection.",
    )
    iqn: str = Field(..., description="iqn is the target iSCSI Qualified Name.")
    iscsiInterface: Optional[str] = Field(
        default=None,
        description="iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).",
    )
    lun: int = Field(..., description="lun represents iSCSI Target Lun number.")
    portals: Optional[List[str]] = Field(
        default=None,
        description="portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef is the CHAP Secret for iSCSI target and initiator authentication",
    )
    targetPortal: str = Field(
        ...,
        description="targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).",
    )


class LabelSelector1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    matchExpressions: Optional[List[MatchExpression]] = Field(
        default=None,
        description="matchExpressions is a list of label selector requirements. The requirements are ANDed.",
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        default=None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is "key", the\noperator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class ClusterTrustBundle1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    labelSelector: Optional[LabelSelector1] = Field(
        default=None,
        description='Select all ClusterTrustBundles that match this label selector.  Only has\neffect if signerName is set.  Mutually-exclusive with name.  If unset,\ninterpreted as "match nothing".  If set but empty, interpreted as "match\neverything".',
    )
    name: Optional[str] = Field(
        default=None,
        description="Select a single ClusterTrustBundle by object name.  Mutually-exclusive\nwith signerName and labelSelector.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="If true, don't block pod startup if the referenced ClusterTrustBundle(s)\naren't available.  If using name, then the named ClusterTrustBundle is\nallowed not to exist.  If using signerName, then the combination of\nsignerName and labelSelector is allowed to match zero\nClusterTrustBundles.",
    )
    path: str = Field(
        ..., description="Relative path from the volume root to write the bundle."
    )
    signerName: Optional[str] = Field(
        default=None,
        description="Select all ClusterTrustBundles that match this signer name.\nMutually-exclusive with name.  The contents of all selected\nClusterTrustBundles will be unified and deduplicated.",
    )


class Item8(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(..., description="key is the key to project.")
    mode: Optional[int] = Field(
        default=None,
        description="mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.",
    )


class ConfigMap3(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    items: Optional[List[Item8]] = Field(
        default=None,
        description="items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    name: str = Field(
        default="",
        description="Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional specify whether the ConfigMap or its keys must be defined",
    )


class Item9(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fieldRef: Optional[FieldRef] = Field(
        default=None,
        description="Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.",
    )
    mode: Optional[int] = Field(
        default=None,
        description="Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        default=None,
        description="Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
    )


class DownwardAPI3(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    items: Optional[List[Item9]] = Field(
        default=None, description="Items is a list of DownwardAPIVolume file"
    )


class Item10(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(..., description="key is the key to project.")
    mode: Optional[int] = Field(
        default=None,
        description="mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.",
    )


class Secret2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    items: Optional[List[Item10]] = Field(
        default=None,
        description="items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    name: str = Field(
        default="",
        description="Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional field specify whether the Secret or its key must be defined",
    )


class Source3(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    clusterTrustBundle: Optional[ClusterTrustBundle1] = Field(
        default=None,
        description="ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field\nof ClusterTrustBundle objects in an auto-updating file.\n\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\n\nClusterTrustBundle objects can either be selected by name, or by the\ncombination of signer name and a label selector.\n\n\nKubelet performs aggressive normalization of the PEM contents written\ninto the pod filesystem.  Esoteric PEM features such as inter-block\ncomments and block headers are stripped.  Certificates are deduplicated.\nThe ordering of certificates within the file is arbitrary, and Kubelet\nmay change the order over time.",
    )
    configMap: Optional[ConfigMap3] = Field(
        default=None,
        description="configMap information about the configMap data to project",
    )
    downwardAPI: Optional[DownwardAPI3] = Field(
        default=None,
        description="downwardAPI information about the downwardAPI data to project",
    )
    secret: Optional[Secret2] = Field(
        default=None, description="secret information about the secret data to project"
    )
    serviceAccountToken: Optional[ServiceAccountToken] = Field(
        default=None,
        description="serviceAccountToken is information about the serviceAccountToken data to project",
    )


class Projected1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="defaultMode are the mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    sources: Optional[List[Source3]] = Field(
        default=None, description="sources is the list of volume projections"
    )


class Rbd1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\nTODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    image: str = Field(
        ...,
        description="image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    keyring: Optional[str] = Field(
        default=None,
        description="keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    monitors: List[str] = Field(
        ...,
        description="monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    pool: Optional[str] = Field(
        default=None,
        description="pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    user: Optional[str] = Field(
        default=None,
        description="user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )


class ScaleIO1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs".\nDefault is "xfs".',
    )
    gateway: str = Field(
        ..., description="gateway is the host address of the ScaleIO API Gateway."
    )
    protectionDomain: Optional[str] = Field(
        default=None,
        description="protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    secretRef: SecretRef = Field(
        ...,
        description="secretRef references to the secret for ScaleIO user and other\nsensitive information. If this is not provided, Login operation will fail.",
    )
    sslEnabled: Optional[bool] = Field(
        default=None,
        description="sslEnabled Flag enable/disable SSL communication with Gateway, default false",
    )
    storageMode: Optional[str] = Field(
        default=None,
        description="storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.",
    )
    storagePool: Optional[str] = Field(
        default=None,
        description="storagePool is the ScaleIO Storage Pool associated with the protection domain.",
    )
    system: str = Field(
        ...,
        description="system is the name of the storage system as configured in ScaleIO.",
    )
    volumeName: Optional[str] = Field(
        default=None,
        description="volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source.",
    )


class Secret3(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="defaultMode is Optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values\nfor mode bits. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    items: Optional[List[Item10]] = Field(
        default=None,
        description="items If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional field specify whether the Secret or its keys must be defined",
    )
    secretName: Optional[str] = Field(
        default=None,
        description="secretName is the name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
    )


class Storageos1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.  If not specified, default values will be attempted.",
    )
    volumeName: Optional[str] = Field(
        default=None,
        description="volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace.",
    )
    volumeNamespace: Optional[str] = Field(
        default=None,
        description='volumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod\'s namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to "default" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.',
    )


class Volume1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    awsElasticBlockStore: Optional[AwsElasticBlockStore] = Field(
        default=None,
        description="awsElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    )
    azureDisk: Optional[AzureDisk] = Field(
        default=None,
        description="azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
    )
    azureFile: Optional[AzureFile] = Field(
        default=None,
        description="azureFile represents an Azure File Service mount on the host and bind mount to the pod.",
    )
    cephfs: Optional[Cephfs1] = Field(
        default=None,
        description="cephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
    )
    cinder: Optional[Cinder1] = Field(
        default=None,
        description="cinder represents a cinder volume attached and mounted on kubelets host machine.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
    )
    configMap: Optional[ConfigMap2] = Field(
        default=None,
        description="configMap represents a configMap that should populate this volume",
    )
    csi: Optional[Csi1] = Field(
        default=None,
        description="csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).",
    )
    downwardAPI: Optional[DownwardAPI2] = Field(
        default=None,
        description="downwardAPI represents downward API about the pod that should populate this volume",
    )
    emptyDir: Optional[EmptyDir] = Field(
        default=None,
        description="emptyDir represents a temporary directory that shares a pod's lifetime.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    )
    ephemeral: Optional[Ephemeral1] = Field(
        default=None,
        description="ephemeral represents a volume that is handled by a cluster storage driver.\nThe volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,\nand deleted when the pod is removed.\n\n\nUse this if:\na) the volume is only needed while the pod runs,\nb) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and\nd) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\n\nUse PersistentVolumeClaim or one of the vendor-specific\nAPIs for volumes that persist for longer than the lifecycle\nof an individual pod.\n\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to\nbe used that way - see the documentation of the driver for\nmore information.\n\n\nA pod can use both types of ephemeral volumes and\npersistent volumes at the same time.",
    )
    fc: Optional[Fc] = Field(
        default=None,
        description="fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
    )
    flexVolume: Optional[FlexVolume1] = Field(
        default=None,
        description="flexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.",
    )
    flocker: Optional[Flocker] = Field(
        default=None,
        description="flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
    )
    gcePersistentDisk: Optional[GcePersistentDisk] = Field(
        default=None,
        description="gcePersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    )
    gitRepo: Optional[GitRepo] = Field(
        default=None,
        description="gitRepo represents a git repository at a particular revision.\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an\nEmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir\ninto the Pod's container.",
    )
    glusterfs: Optional[Glusterfs] = Field(
        default=None,
        description="glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md",
    )
    hostPath: Optional[HostPath] = Field(
        default=None,
        description="hostPath represents a pre-existing file or directory on the host\nmachine that is directly exposed to the container. This is generally\nused for system agents or other privileged things that are allowed\nto see the host machine. Most containers will NOT need this.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n---\nTODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not\nmount host directories as read/write.",
    )
    iscsi: Optional[Iscsi1] = Field(
        default=None,
        description="iscsi represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://examples.k8s.io/volumes/iscsi/README.md",
    )
    name: str = Field(..., description="Name of the Build Volume")
    nfs: Optional[Nfs] = Field(
        default=None,
        description="nfs represents an NFS mount on the host that shares a pod's lifetime\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    )
    persistentVolumeClaim: Optional[PersistentVolumeClaim] = Field(
        default=None,
        description="persistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    )
    photonPersistentDisk: Optional[PhotonPersistentDisk] = Field(
        default=None,
        description="photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
    )
    portworxVolume: Optional[PortworxVolume] = Field(
        default=None,
        description="portworxVolume represents a portworx volume attached and mounted on kubelets host machine",
    )
    projected: Optional[Projected1] = Field(
        default=None,
        description="projected items for all in one resources secrets, configmaps, and downward API",
    )
    quobyte: Optional[Quobyte] = Field(
        default=None,
        description="quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
    )
    rbd: Optional[Rbd1] = Field(
        default=None,
        description="rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/rbd/README.md",
    )
    scaleIO: Optional[ScaleIO1] = Field(
        default=None,
        description="scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
    )
    secret: Optional[Secret3] = Field(
        default=None,
        description="secret represents a secret that should populate this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
    )
    storageos: Optional[Storageos1] = Field(
        default=None,
        description="storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
    )
    vsphereVolume: Optional[VsphereVolume] = Field(
        default=None,
        description="vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
    )


class Spec(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    build: Build = Field(
        ...,
        description="Build refers to an embedded build specification\nThis field is mandatory",
    )
    env: Optional[List[EnvItem1]] = Field(
        default=None,
        description="Env contains additional environment variables that should be passed to the build container",
    )
    nodeSelector: Optional[Dict[str, str]] = Field(
        default=None,
        description="NodeSelector is a selector which must be true for the pod to fit on a node.\nSelector which must match a node's labels for the pod to be scheduled on that node.\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
    )
    output: Optional[Output1] = Field(
        default=None,
        description="Output refers to the location where the generated\nimage would be pushed to. It will overwrite the output image in build spec",
    )
    paramValues: Optional[List[ParamValue1]] = Field(
        default=None,
        description="Params is a list of key/value that could be used\nto set strategy parameters",
    )
    retention: Optional[Retention1] = Field(
        default=None, description="Contains information about retention params"
    )
    schedulerName: Optional[str] = Field(
        default=None,
        description="SchedulerName specifies the scheduler to be used to dispatch the Pod",
    )
    serviceAccount: Optional[str] = Field(
        default=None,
        description="ServiceAccount refers to the kubernetes serviceaccount\nwhich is used for resource control.\nDefault serviceaccount will be set if it is empty",
    )
    source: Optional[Source2] = Field(
        default=None,
        description="Source refers to the location where the source code is,\nthis could only be a local source",
    )
    state: Optional[str] = Field(
        default=None,
        description="State is used for canceling a buildrun (and maybe more later on).",
    )
    timeout: Optional[str] = Field(
        default=None,
        description="Timeout defines the maximum run time of this BuildRun.",
    )
    tolerations: Optional[List[Toleration]] = Field(
        default=None, description="If specified, the pod's tolerations."
    )
    volumes: Optional[List[Volume1]] = Field(
        default=None,
        description="Volumes contains volume Overrides of the BuildStrategy volumes in case those are allowed\nto be overridden. Must only contain volumes that exist in the corresponding BuildStrategy",
    )


class ValueFrom2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    configMapKeyRef: Optional[ConfigMapKeyRef] = Field(
        default=None, description="Selects a key of a ConfigMap."
    )
    fieldRef: Optional[FieldRef] = Field(
        default=None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        default=None,
        description="Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItem2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: str = Field(
        ..., description="Name of the environment variable. Must be a C_IDENTIFIER."
    )
    value: Optional[str] = Field(
        default=None,
        description='Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to "".',
    )
    valueFrom: Optional[ValueFrom2] = Field(
        default=None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class Ignore2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    id: Optional[List[str]] = Field(
        default=None,
        description="ID references the security issues to be ignored in vulnerability scan",
    )
    severity: Optional[Severity] = Field(
        default=None,
        description='Severity denotes the severity levels of security issues to be ignored, valid values are:\n- "low": it will exclude low severity vulnerabilities, displaying only medium, high and critical vulnerabilities\n- "medium": it will exclude low and medium severity vulnerabilities, displaying only high and critical vulnerabilities\n- "high": it will exclude low, medium and high severity vulnerabilities, displaying only the critical vulnerabilities',
    )
    unfixed: Optional[bool] = Field(
        default=None,
        description="Unfixed indicates to ignore vulnerabilities for which no fix exists",
    )


class VulnerabilityScan2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    enabled: Optional[bool] = Field(
        default=None,
        description="Enabled indicates whether to run vulnerability scan for image",
    )
    failOnFinding: Optional[bool] = Field(
        default=None,
        description="FailOnFinding indicates whether to fail the build run if the vulnerability scan results in vulnerabilities",
    )
    ignore: Optional[Ignore2] = Field(
        default=None,
        description="Ignore refers to ignore options for vulnerability scan",
    )


class Output2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    annotations: Optional[Dict[str, str]] = Field(
        default=None,
        description="Annotations references the additional annotations to be applied on the image",
    )
    image: str = Field(..., description="Image is the reference of the image.")
    insecure: Optional[bool] = Field(
        default=None, description="Insecure defines whether the registry is not secure"
    )
    labels: Optional[Dict[str, str]] = Field(
        default=None,
        description="Labels references the additional labels to be applied on the image",
    )
    pushSecret: Optional[str] = Field(
        default=None,
        description="Describes the secret name for pushing a container image.",
    )
    timestamp: Optional[str] = Field(
        default=None,
        description='Timestamp references the optional image timestamp to be set, valid values are:\n- "Zero", to set 00:00:00 UTC on 1 January 1970\n- "SourceTimestamp", to set the source timestamp dereived from the input source\n- "BuildTimestamp", to set the timestamp of the current build itself\n- Parsable integer number defined as the epoch seconds\n- or nil/empty to not set any specific timestamp',
    )
    vulnerabilityScan: Optional[VulnerabilityScan2] = Field(
        default=None,
        description="VulnerabilityScan provides configurations about running a scan for your generated image",
    )


class Value2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    configMapValue: Optional[ConfigMapValue] = Field(
        default=None, description="The ConfigMap value of the parameter"
    )
    secretValue: Optional[SecretValue] = Field(
        default=None, description="The secret value of the parameter"
    )
    value: Optional[str] = Field(default=None, description="The value of the parameter")


class ParamValue2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    configMapValue: Optional[ConfigMapValue] = Field(
        default=None, description="The ConfigMap value of the parameter"
    )
    name: str = Field(..., description="Name of the parameter")
    secretValue: Optional[SecretValue] = Field(
        default=None, description="The secret value of the parameter"
    )
    value: Optional[str] = Field(default=None, description="The value of the parameter")
    values: Optional[List[Value2]] = Field(
        default=None, description="Values of an array parameter"
    )


class Retention2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    atBuildDeletion: Optional[bool] = Field(
        default=None,
        description="AtBuildDeletion defines if related BuildRuns should be deleted when deleting the Build.",
    )
    failedLimit: Optional[int] = Field(
        default=None,
        description="FailedLimit defines the maximum number of failed buildruns that should exist.",
        ge=1,
        le=10000,
    )
    succeededLimit: Optional[int] = Field(
        default=None,
        description="SucceededLimit defines the maximum number of succeeded buildruns that should exist.",
        ge=1,
        le=10000,
    )
    ttlAfterFailed: Optional[str] = Field(
        default=None,
        description="TTLAfterFailed defines the maximum duration of time the failed buildrun should exist.",
    )
    ttlAfterSucceeded: Optional[str] = Field(
        default=None,
        description="TTLAfterSucceeded defines the maximum duration of time the succeeded buildrun should exist.",
    )


class Source4(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    contextDir: Optional[str] = Field(
        default=None,
        description="ContextDir is a path to subfolder in the repo. Optional.",
    )
    git: Optional[Git] = Field(
        default=None, description="Git contains the details for the source of type Git"
    )
    local: Optional[Local] = Field(
        default=None,
        description="Local contains the details for the source of type Local",
    )
    ociArtifact: Optional[OciArtifact] = Field(
        default=None,
        description="OCIArtifact contains the details for the source of type OCIArtifact",
    )
    type: str = Field(
        ..., description="Type is the BuildSource qualifier, the type of the source."
    )


class WhenItem1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    github: Optional[Github] = Field(
        default=None,
        description="GitHub describes how to trigger builds based on GitHub (SCM) events.",
    )
    image: Optional[Image] = Field(
        default=None, description="Image slice of image names where the event applies."
    )
    name: str = Field(
        ..., description="Name name or the short description of the trigger condition."
    )
    objectRef: Optional[ObjectRef] = Field(
        default=None,
        description="ObjectRef describes how to match a foreign resource, either using the name or the label\nselector, plus the current resource status.",
    )
    type: str = Field(..., description="Type the event type")


class Trigger1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    triggerSecret: Optional[str] = Field(
        default=None,
        description="TriggerSecret points to a local object carrying the secret token to validate webhook request.",
    )
    when: Optional[List[WhenItem1]] = Field(
        default=None,
        description="When the list of scenarios when a new build should take place.",
    )


class Cephfs2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    monitors: List[str] = Field(
        ...,
        description="monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    path: Optional[str] = Field(
        default=None,
        description="path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    secretFile: Optional[str] = Field(
        default=None,
        description="secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    user: Optional[str] = Field(
        default=None,
        description="user is optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )


class Cinder2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef is optional: points to a secret object containing parameters used to connect\nto OpenStack.",
    )
    volumeID: str = Field(
        ...,
        description="volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
    )


class ConfigMap4(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="defaultMode is optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    items: Optional[List[Item10]] = Field(
        default=None,
        description="items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    name: str = Field(
        default="",
        description="Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional specify whether the ConfigMap or its keys must be defined",
    )


class Csi2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    driver: str = Field(
        ...,
        description="driver is the name of the CSI driver that handles this volume.\nConsult with your admin for the correct name as registered in the cluster.",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType to mount. Ex. "ext4", "xfs", "ntfs".\nIf not provided, the empty value is passed to the associated CSI driver\nwhich will determine the default filesystem to apply.',
    )
    nodePublishSecretRef: Optional[NodePublishSecretRef] = Field(
        default=None,
        description="nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and  may be empty if no secret is required. If the\nsecret object contains more than one secret, all secret references are passed.",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly specifies a read-only configuration for the volume.\nDefaults to false (read/write).",
    )
    volumeAttributes: Optional[Dict[str, str]] = Field(
        default=None,
        description="volumeAttributes stores driver-specific properties that are passed to the CSI\ndriver. Consult your driver's documentation for supported values.",
    )


class Item13(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fieldRef: Optional[FieldRef] = Field(
        default=None,
        description="Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.",
    )
    mode: Optional[int] = Field(
        default=None,
        description="Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        default=None,
        description="Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
    )


class DownwardAPI4(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="Optional: mode bits to use on created files by default. Must be a\nOptional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    items: Optional[List[Item13]] = Field(
        default=None, description="Items is a list of downward API volume file"
    )


class Selector2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    matchExpressions: Optional[List[MatchExpression]] = Field(
        default=None,
        description="matchExpressions is a list of label selector requirements. The requirements are ANDed.",
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        default=None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is "key", the\noperator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class Spec4(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    accessModes: Optional[List[str]] = Field(
        default=None,
        description="accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    )
    dataSource: Optional[DataSource] = Field(
        default=None,
        description="dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.",
    )
    dataSourceRef: Optional[DataSourceRef] = Field(
        default=None,
        description="dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
    )
    resources: Optional[Resources] = Field(
        default=None,
        description="resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
    )
    selector: Optional[Selector2] = Field(
        default=None,
        description="selector is a label query over volumes to consider for binding.",
    )
    storageClassName: Optional[str] = Field(
        default=None,
        description="storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
    )
    volumeAttributesClassName: Optional[str] = Field(
        default=None,
        description="volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.",
    )
    volumeMode: Optional[str] = Field(
        default=None,
        description="volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.",
    )
    volumeName: Optional[str] = Field(
        default=None,
        description="volumeName is the binding reference to the PersistentVolume backing this claim.",
    )


class VolumeClaimTemplate2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    metadata: Optional[Dict[str, Any]] = Field(
        default=None,
        description="May contain labels and annotations that will be copied into the PVC\nwhen creating it. No other fields are allowed and will be rejected during\nvalidation.",
    )
    spec: Spec4 = Field(
        ...,
        description="The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here.",
    )


class Ephemeral2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    volumeClaimTemplate: Optional[VolumeClaimTemplate2] = Field(
        default=None,
        description="Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be `<pod name>-<volume name>` where\n`<volume name>` is the name from the `PodSpec.Volumes` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\n\nRequired, must not be nil.",
    )


class FlexVolume2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    driver: str = Field(
        ..., description="driver is the name of the driver to use for this volume."
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
    )
    options: Optional[Dict[str, str]] = Field(
        default=None,
        description="options is Optional: this field holds extra command options if any.",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef is Optional: secretRef is reference to the secret object containing\nsensitive information to pass to the plugin scripts. This may be\nempty if no secret object is specified. If the secret object\ncontains more than one secret, all secrets are passed to the plugin\nscripts.",
    )


class Iscsi2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    chapAuthDiscovery: Optional[bool] = Field(
        default=None,
        description="chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
    )
    chapAuthSession: Optional[bool] = Field(
        default=None,
        description="chapAuthSession defines whether support iSCSI Session CHAP authentication",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\nTODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    initiatorName: Optional[str] = Field(
        default=None,
        description="initiatorName is the custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n<target portal>:<volume name> will be created for the connection.",
    )
    iqn: str = Field(..., description="iqn is the target iSCSI Qualified Name.")
    iscsiInterface: Optional[str] = Field(
        default=None,
        description="iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).",
    )
    lun: int = Field(..., description="lun represents iSCSI Target Lun number.")
    portals: Optional[List[str]] = Field(
        default=None,
        description="portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef is the CHAP Secret for iSCSI target and initiator authentication",
    )
    targetPortal: str = Field(
        ...,
        description="targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).",
    )


class LabelSelector2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    matchExpressions: Optional[List[MatchExpression]] = Field(
        default=None,
        description="matchExpressions is a list of label selector requirements. The requirements are ANDed.",
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        default=None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is "key", the\noperator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class ClusterTrustBundle2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    labelSelector: Optional[LabelSelector2] = Field(
        default=None,
        description='Select all ClusterTrustBundles that match this label selector.  Only has\neffect if signerName is set.  Mutually-exclusive with name.  If unset,\ninterpreted as "match nothing".  If set but empty, interpreted as "match\neverything".',
    )
    name: Optional[str] = Field(
        default=None,
        description="Select a single ClusterTrustBundle by object name.  Mutually-exclusive\nwith signerName and labelSelector.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="If true, don't block pod startup if the referenced ClusterTrustBundle(s)\naren't available.  If using name, then the named ClusterTrustBundle is\nallowed not to exist.  If using signerName, then the combination of\nsignerName and labelSelector is allowed to match zero\nClusterTrustBundles.",
    )
    path: str = Field(
        ..., description="Relative path from the volume root to write the bundle."
    )
    signerName: Optional[str] = Field(
        default=None,
        description="Select all ClusterTrustBundles that match this signer name.\nMutually-exclusive with name.  The contents of all selected\nClusterTrustBundles will be unified and deduplicated.",
    )


class Item14(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(..., description="key is the key to project.")
    mode: Optional[int] = Field(
        default=None,
        description="mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.",
    )


class ConfigMap5(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    items: Optional[List[Item14]] = Field(
        default=None,
        description="items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    name: str = Field(
        default="",
        description="Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional specify whether the ConfigMap or its keys must be defined",
    )


class Item15(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fieldRef: Optional[FieldRef] = Field(
        default=None,
        description="Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.",
    )
    mode: Optional[int] = Field(
        default=None,
        description="Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        default=None,
        description="Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
    )


class DownwardAPI5(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    items: Optional[List[Item15]] = Field(
        default=None, description="Items is a list of DownwardAPIVolume file"
    )


class Item16(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(..., description="key is the key to project.")
    mode: Optional[int] = Field(
        default=None,
        description="mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.",
    )


class Secret4(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    items: Optional[List[Item16]] = Field(
        default=None,
        description="items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    name: str = Field(
        default="",
        description="Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional field specify whether the Secret or its key must be defined",
    )


class Source5(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    clusterTrustBundle: Optional[ClusterTrustBundle2] = Field(
        default=None,
        description="ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field\nof ClusterTrustBundle objects in an auto-updating file.\n\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\n\nClusterTrustBundle objects can either be selected by name, or by the\ncombination of signer name and a label selector.\n\n\nKubelet performs aggressive normalization of the PEM contents written\ninto the pod filesystem.  Esoteric PEM features such as inter-block\ncomments and block headers are stripped.  Certificates are deduplicated.\nThe ordering of certificates within the file is arbitrary, and Kubelet\nmay change the order over time.",
    )
    configMap: Optional[ConfigMap5] = Field(
        default=None,
        description="configMap information about the configMap data to project",
    )
    downwardAPI: Optional[DownwardAPI5] = Field(
        default=None,
        description="downwardAPI information about the downwardAPI data to project",
    )
    secret: Optional[Secret4] = Field(
        default=None, description="secret information about the secret data to project"
    )
    serviceAccountToken: Optional[ServiceAccountToken] = Field(
        default=None,
        description="serviceAccountToken is information about the serviceAccountToken data to project",
    )


class Projected2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="defaultMode are the mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    sources: Optional[List[Source5]] = Field(
        default=None, description="sources is the list of volume projections"
    )


class Rbd2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\nTODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    image: str = Field(
        ...,
        description="image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    keyring: Optional[str] = Field(
        default=None,
        description="keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    monitors: List[str] = Field(
        ...,
        description="monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    pool: Optional[str] = Field(
        default=None,
        description="pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    user: Optional[str] = Field(
        default=None,
        description="user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )


class ScaleIO2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs".\nDefault is "xfs".',
    )
    gateway: str = Field(
        ..., description="gateway is the host address of the ScaleIO API Gateway."
    )
    protectionDomain: Optional[str] = Field(
        default=None,
        description="protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    secretRef: SecretRef = Field(
        ...,
        description="secretRef references to the secret for ScaleIO user and other\nsensitive information. If this is not provided, Login operation will fail.",
    )
    sslEnabled: Optional[bool] = Field(
        default=None,
        description="sslEnabled Flag enable/disable SSL communication with Gateway, default false",
    )
    storageMode: Optional[str] = Field(
        default=None,
        description="storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.",
    )
    storagePool: Optional[str] = Field(
        default=None,
        description="storagePool is the ScaleIO Storage Pool associated with the protection domain.",
    )
    system: str = Field(
        ...,
        description="system is the name of the storage system as configured in ScaleIO.",
    )
    volumeName: Optional[str] = Field(
        default=None,
        description="volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source.",
    )


class Secret5(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="defaultMode is Optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values\nfor mode bits. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    items: Optional[List[Item16]] = Field(
        default=None,
        description="items If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional field specify whether the Secret or its keys must be defined",
    )
    secretName: Optional[str] = Field(
        default=None,
        description="secretName is the name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
    )


class Storageos2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="secretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.  If not specified, default values will be attempted.",
    )
    volumeName: Optional[str] = Field(
        default=None,
        description="volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace.",
    )
    volumeNamespace: Optional[str] = Field(
        default=None,
        description='volumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod\'s namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to "default" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.',
    )


class Volume2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    awsElasticBlockStore: Optional[AwsElasticBlockStore] = Field(
        default=None,
        description="awsElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    )
    azureDisk: Optional[AzureDisk] = Field(
        default=None,
        description="azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
    )
    azureFile: Optional[AzureFile] = Field(
        default=None,
        description="azureFile represents an Azure File Service mount on the host and bind mount to the pod.",
    )
    cephfs: Optional[Cephfs2] = Field(
        default=None,
        description="cephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
    )
    cinder: Optional[Cinder2] = Field(
        default=None,
        description="cinder represents a cinder volume attached and mounted on kubelets host machine.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
    )
    configMap: Optional[ConfigMap4] = Field(
        default=None,
        description="configMap represents a configMap that should populate this volume",
    )
    csi: Optional[Csi2] = Field(
        default=None,
        description="csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).",
    )
    downwardAPI: Optional[DownwardAPI4] = Field(
        default=None,
        description="downwardAPI represents downward API about the pod that should populate this volume",
    )
    emptyDir: Optional[EmptyDir] = Field(
        default=None,
        description="emptyDir represents a temporary directory that shares a pod's lifetime.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    )
    ephemeral: Optional[Ephemeral2] = Field(
        default=None,
        description="ephemeral represents a volume that is handled by a cluster storage driver.\nThe volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,\nand deleted when the pod is removed.\n\n\nUse this if:\na) the volume is only needed while the pod runs,\nb) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and\nd) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\n\nUse PersistentVolumeClaim or one of the vendor-specific\nAPIs for volumes that persist for longer than the lifecycle\nof an individual pod.\n\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to\nbe used that way - see the documentation of the driver for\nmore information.\n\n\nA pod can use both types of ephemeral volumes and\npersistent volumes at the same time.",
    )
    fc: Optional[Fc] = Field(
        default=None,
        description="fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
    )
    flexVolume: Optional[FlexVolume2] = Field(
        default=None,
        description="flexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.",
    )
    flocker: Optional[Flocker] = Field(
        default=None,
        description="flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
    )
    gcePersistentDisk: Optional[GcePersistentDisk] = Field(
        default=None,
        description="gcePersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    )
    gitRepo: Optional[GitRepo] = Field(
        default=None,
        description="gitRepo represents a git repository at a particular revision.\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an\nEmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir\ninto the Pod's container.",
    )
    glusterfs: Optional[Glusterfs] = Field(
        default=None,
        description="glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md",
    )
    hostPath: Optional[HostPath] = Field(
        default=None,
        description="hostPath represents a pre-existing file or directory on the host\nmachine that is directly exposed to the container. This is generally\nused for system agents or other privileged things that are allowed\nto see the host machine. Most containers will NOT need this.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n---\nTODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not\nmount host directories as read/write.",
    )
    iscsi: Optional[Iscsi2] = Field(
        default=None,
        description="iscsi represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://examples.k8s.io/volumes/iscsi/README.md",
    )
    name: str = Field(..., description="Name of the Build Volume")
    nfs: Optional[Nfs] = Field(
        default=None,
        description="nfs represents an NFS mount on the host that shares a pod's lifetime\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    )
    persistentVolumeClaim: Optional[PersistentVolumeClaim] = Field(
        default=None,
        description="persistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    )
    photonPersistentDisk: Optional[PhotonPersistentDisk] = Field(
        default=None,
        description="photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
    )
    portworxVolume: Optional[PortworxVolume] = Field(
        default=None,
        description="portworxVolume represents a portworx volume attached and mounted on kubelets host machine",
    )
    projected: Optional[Projected2] = Field(
        default=None,
        description="projected items for all in one resources secrets, configmaps, and downward API",
    )
    quobyte: Optional[Quobyte] = Field(
        default=None,
        description="quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
    )
    rbd: Optional[Rbd2] = Field(
        default=None,
        description="rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/rbd/README.md",
    )
    scaleIO: Optional[ScaleIO2] = Field(
        default=None,
        description="scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
    )
    secret: Optional[Secret5] = Field(
        default=None,
        description="secret represents a secret that should populate this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
    )
    storageos: Optional[Storageos2] = Field(
        default=None,
        description="storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
    )
    vsphereVolume: Optional[VsphereVolume] = Field(
        default=None,
        description="vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
    )


class BuildSpec(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    env: Optional[List[EnvItem2]] = Field(
        default=None,
        description="Env contains additional environment variables that should be passed to the build container",
    )
    nodeSelector: Optional[Dict[str, str]] = Field(
        default=None,
        description="NodeSelector is a selector which must be true for the pod to fit on a node.\nSelector which must match a node's labels for the pod to be scheduled on that node.\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
    )
    output: Output2 = Field(
        ...,
        description="Output refers to the location where the built image would be pushed.",
    )
    paramValues: Optional[List[ParamValue2]] = Field(
        default=None,
        description="Params is a list of key/value that could be used\nto set strategy parameters",
    )
    retention: Optional[Retention2] = Field(
        default=None, description="Contains information about retention params"
    )
    schedulerName: Optional[str] = Field(
        default=None,
        description="SchedulerName specifies the scheduler to be used to dispatch the Pod",
    )
    source: Optional[Source4] = Field(
        default=None,
        description="Source refers to the location where the source code is,\nthis could be a git repository, a local source or an oci\nartifact",
    )
    strategy: Strategy = Field(
        ...,
        description="Strategy references the BuildStrategy to use to build the container\nimage.",
    )
    timeout: Optional[str] = Field(
        default=None,
        description="Timeout defines the maximum amount of time the Build should take to execute.",
    )
    tolerations: Optional[List[Toleration]] = Field(
        default=None, description="If specified, the pod's tolerations."
    )
    trigger: Optional[Trigger1] = Field(
        default=None,
        description="Trigger defines the scenarios where a new build should be triggered.",
    )
    volumes: Optional[List[Volume2]] = Field(
        default=None,
        description="Volumes contains volume Overrides of the BuildStrategy volumes in case those are allowed\nto be overridden. Must only contain volumes that exist in the corresponding BuildStrategy",
    )


class Condition(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    lastTransitionTime: datetime = Field(
        ...,
        description="LastTransitionTime last time the condition transit from one status to another.",
    )
    message: str = Field(
        ...,
        description="A human readable message indicating details about the transition.",
    )
    reason: str = Field(
        ..., description="The reason for the condition last transition."
    )
    status: str = Field(
        ..., description="Status of the condition, one of True, False, Unknown."
    )
    type: str = Field(..., description="Type of condition")


class Location(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    container: Optional[str] = None
    pod: Optional[str] = None


class FailureDetails(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    location: Optional[Location] = Field(
        default=None,
        description="Location describes the location where the failure happened",
    )
    message: Optional[str] = None
    reason: Optional[str] = None


class Vulnerability(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    id: Optional[str] = None
    severity: Optional[str] = Field(
        default=None,
        description="VulnerabilitySeverity is an enum for the possible values for severity of a vulnerability",
    )


class Output3(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    digest: Optional[str] = Field(
        default=None, description="Digest holds the digest of output image"
    )
    size: Optional[int] = Field(
        default=None, description="Size holds the compressed size of output image"
    )
    vulnerabilities: Optional[List[Vulnerability]] = Field(
        default=None,
        description="Vulnerabilities holds the list of vulnerabilities detected in the image",
    )


class Git2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    branchName: Optional[str] = Field(
        default=None,
        description="BranchName holds the default branch name of the git source\nthis will be set only when revision is not specified in Build object",
    )
    commitAuthor: Optional[str] = Field(
        default=None, description="CommitAuthor holds the commit author of a git source"
    )
    commitSha: Optional[str] = Field(
        default=None, description="CommitSha holds the commit sha of git source"
    )


class OciArtifact2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    digest: Optional[str] = Field(
        default=None, description="Digest hold the image digest result"
    )


class Source6(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    git: Optional[Git2] = Field(
        default=None,
        description="Git holds the results emitted from the\nsource step of type git",
    )
    ociArtifact: Optional[OciArtifact2] = Field(
        default=None,
        description="OciArtifact holds the results emitted from\nthe source step of type ociArtifact",
    )
    timestamp: Optional[datetime] = Field(
        default=None,
        description="Timestamp holds the timestamp of the source, which\ndepends on the actual source type and could range from\nbeing the commit timestamp or the fileystem timestamp\nof the most recent source file in the working directory",
    )


class Status(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    buildSpec: Optional[BuildSpec] = Field(
        default=None, description="BuildSpec is the Build Spec of this BuildRun."
    )
    completionTime: Optional[datetime] = Field(
        default=None, description="CompletionTime is the time the build completed."
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions holds the latest available observations of a resource's current state.",
    )
    failureDetails: Optional[FailureDetails] = Field(
        default=None,
        description="FailureDetails contains error details that are collected and surfaced from TaskRun",
    )
    output: Optional[Output3] = Field(
        default=None,
        description="Output holds the results emitted from step definition of an output",
    )
    source: Optional[Source6] = Field(
        default=None,
        description="Source holds the results emitted from the source step",
    )
    startTime: Optional[datetime] = Field(
        default=None, description="StartTime is the time the build is actually started."
    )
    taskRunName: Optional[str] = Field(
        default=None,
        description="TaskRunName is the name of the TaskRun responsible for executing this BuildRun.",
    )


class Model(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    apiVersion: Optional[str] = Field(
        default=None,
        description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    )
    kind: Optional[str] = Field(
        default=None,
        description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec = Field(
        ..., description="BuildRunSpec defines the desired state of BuildRun"
    )
    status: Optional[Status] = Field(
        default=None,
        description="BuildRunStatus defines the observed state of BuildRun",
    )
