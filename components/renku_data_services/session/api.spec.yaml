openapi: 3.0.2
info:
  title: Renku 1.0 Environment and Session Management Service
  description: |
    Service that allows creating, deleting, and managing Renku 1.0 environments and sessions.
  version: 0.1.0
servers:
  - url: /api/data
  - url: /ui-server/api/data
paths:
  /sessions:
    get:
      summary: Get all user's sessions
      responses:
        "200":
          description: List of sessions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionsList"
        default:
          $ref: "#/components/responses/Error"
      tags:
        - sessions
    post:
      summary: Create a new session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionPost"
      responses:
        "201":
          description: The session was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        default:
          $ref: "#/components/responses/Error"
      tags:
        - sessions
  /sessions/{session_id}:
    get:
      summary: Get a session
      parameters:
        - in: path
          name: session_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        "404":
          description: The session does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: "#/components/responses/Error"
      tags:
        - sessions
    patch:
      summary: Update specific fields of an existing session
      parameters:
        - in: path
          name: session_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionPatch"
      responses:
        "200":
          description: The patched session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        "404":
          description: The session does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          $ref: "#/components/responses/Error"
      tags:
        - sessions
    delete:
      summary: Remove a session
      parameters:
        - in: path
          name: session_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: The session was removed or did not exist in the first place
        default:
          $ref: "#/components/responses/Error"
      tags:
        - sessions
    post:
      summary: Start a session
      parameters:
        - in: path
          name: session_id
          required: true
          schema:
            type: string
      responses:
        "201":
          description: The session was started
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        default:
          $ref: "#/components/responses/Error"
      tags:
        - sessions
components:
  schemas:
    SessionsList:
      description: A list of Renku sessions
      type: array
      items:
        $ref: "#/components/schemas/Session"
      minItems: 0
    Session:
      description: A Renku native session definition and metadata
      type: object
      properties:
        # TODO: Do we need a slug for sessions!?
        id:
          $ref: "#/components/schemas/Ulid"
        name:
          $ref: "#/components/schemas/Name"
        creation_date:
          $ref: "#/components/schemas/CreationDate"
        description:
          $ref: "#/components/schemas/Description"
        environment_id:
          $ref: "#/components/schemas/EnvironmentId"
        project_id:
          $ref: "#/components/schemas/Ulid"
      required:
        - "id"
        - "name"
        - "creation_date"
        - "environment_id"
      example:
        id: "01AN4Z79ZS5XN0F25N3DB94T4R"
        name: "Renku R Session"
        creation_date: "2023-11-01T17:32:28Z"
        description: "R compute session"
        environment_id: "01AN4Z79ZS6XX96588FDX0H099"
    SessionPost:
      description: Metadata to create a session
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/Name"
        description:
          $ref: "#/components/schemas/Description"
        environment_id:
          $ref: "#/components/schemas/EnvironmentId"
        project_id:
          $ref: "#/components/schemas/Ulid"
      required:
        - "name"
        - "environment_id"
        - "project_id"
    SessionPatch:
      type: object
      description: Update a session
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/Name"
        description:
          $ref: "#/components/schemas/Description"
        environment_id:
          $ref: "#/components/schemas/EnvironmentId"
    Ulid:
      description: ULID identifier
      type: string
      minLength: 26
      maxLength: 26
      pattern: "^[A-Z0-9]{26}$"  # This is case-insensitive
      format: ulid
    Name:
      description: Renku session name
      type: string
      minLength: 1
      maxLength: 99
      example: "My Renku Session :)"
    EnvironmentId:
      description: Id of the environment to create a session from, or content of a Dockerfile, or a reference
      type: string
      minLength: 1
      example: |
          FROM ${RENKU_BASE_IMAGE} as builder
          ARG RENKU_VERSION=2.7.0
          ...
    CreationDate:
      description: The date and time the session was created (time is always in UTC)
      type: string
      format: date-time
      example: "2023-11-01T17:32:28Z"
    Description:
      description: A description for session
      type: string
      maxLength: 500
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              minimum: 0
              exclusiveMinimum: true
              example: 1404
            detail:
              type: string
              example: "A more detailed optional message showing what the problem was"
            message:
              type: string
              example: "Something went wrong - please try again later"
          required:
            - "code"
            - "message"
      required:
        - "error"
  responses:
    Error:
      description: The schema for all 4xx and 5xx responses
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
