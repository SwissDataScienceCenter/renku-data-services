# generated by datamodel-codegen:
#   filename:  api.spec.yaml
#   timestamp: 2023-11-19T19:41:33+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import Field, RootModel

from renku_data_services.project.apispec_base import BaseAPISpec


class ProjectsList(RootModel):
    root: List[Project] = Field(..., description="A list of Renku projects", min_items=0)


class Project(BaseAPISpec):
    class Config:
        extra = "forbid"

    id: Ulid
    name: Name
    slug: Slug
    creation_date: CreationDate
    created_by: User
    repositories: Optional[RepositoriesList] = None
    visibility: Visibility
    description: Optional[Description] = None
    members: Optional[MembersWithRoles] = None


class ProjectPost(BaseAPISpec):
    class Config:
        extra = "forbid"

    name: Name
    slug: Optional[Slug] = None
    repositories: Optional[RepositoriesList] = None
    visibility: Optional[Visibility] = "private"
    description: Optional[Description] = None


class ProjectPatch(BaseAPISpec):
    class Config:
        extra = "forbid"

    name: Optional[Name] = None
    slug: Optional[Slug] = None
    repositories: Optional[RepositoriesList] = None
    visibility: Optional[Visibility] = None
    description: Optional[Description] = None


class Ulid(RootModel):
    root: str = Field(..., description="ULID identifier", max_length=26, min_length=26, pattern="^[A-Z0-9]{26}$")


class Name(RootModel):
    root: str = Field(..., description="Renku project name", example="My Renku Project :)", max_length=99, min_length=1)


class Slug(RootModel):
    root: str = Field(
        ...,
        description="A command-line friendly name for a project",
        example="my-renku-project",
        max_length=99,
        min_length=1,
        pattern="^[a-z0-9]+[a-z0-9._-]*$",
    )


class CreationDate(RootModel):
    root: datetime = Field(
        ...,
        description="The date and time the project was created (time is always in UTC)",
        example="2023-11-01T17:32:28Z",
    )


class Description(RootModel):
    root: str = Field(..., description="A description for project", max_length=500)


class UserId(RootModel):
    root: str = Field(
        ...,
        description="User's KeyCloak ID",
        example="123-keycloak-user-id-456",
        min_length=1,
        pattern="^[A-Za-z0-9-]+$",
    )


class GitUrl(RootModel):
    root: str = Field(..., description="URL of a Git repository")


class Visibility(Enum):
    private = "private"
    public = "public"


class Role(Enum):
    member = "member"
    owner = "owner"


class Version(BaseAPISpec):
    version: str


class User(BaseAPISpec):
    class Config:
        extra = "forbid"

    id: UserId


class RepositoriesList(RootModel):
    root: List[GitUrl] = Field(
        ...,
        description="A list of repository URLs",
        example=[
            "https://github.com/SwissDataScienceCenter/project-1.git",
            "git@github.com:SwissDataScienceCenter/project-2.git",
        ],
        min_items=0,
    )


class MembersWithRoles(RootModel):
    root: List[MemberWithRole] = Field(
        ..., description="List of users and their access level to the project", min_items=0
    )


class MemberWithRole(BaseAPISpec):
    class Config:
        extra = "forbid"

    user: User
    role: Role


class Error(BaseAPISpec):
    code: int = Field(..., example=1404, gt=0)
    detail: Optional[str] = Field(None, example="A more detailed optional message showing what the problem was")
    message: str = Field(..., example="Something went wrong - please try again later")


class ErrorResponse(BaseAPISpec):
    error: Error
