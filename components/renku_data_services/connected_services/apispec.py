# generated by datamodel-codegen:
#   filename:  api.spec.yaml
#   timestamp: 2024-05-03T08:04:39+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import ConfigDict, Field, RootModel
from renku_data_services.connected_services.apispec_base import BaseAPISpec


class ConnectionStatus(Enum):
    connected = "connected"
    pending = "pending"


class Error(BaseAPISpec):
    code: int = Field(..., example=1404, gt=0)
    detail: Optional[str] = Field(
        None, example="A more detailed optional message showing what the problem was"
    )
    message: str = Field(..., example="Something went wrong - please try again later")


class ErrorResponse(BaseAPISpec):
    error: Error


class AdminProvider(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str = Field(..., example="some-id")
    client_id: str = Field(..., example="some-client-id")
    display_name: str = Field(..., example="my oauth2 application")
    scope: str = Field(..., example="api")
    url: str = Field(..., example="https://example.org")


class AdminProviderPost(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str = Field(..., example="some-id")
    client_id: str = Field(..., example="some-client-id")
    client_secret: Optional[str] = Field(None, example="some-client-secret")
    display_name: str = Field(..., example="my oauth2 application")
    scope: str = Field(..., example="api")
    url: str = Field(..., example="https://example.org")


class AdminProviderPatch(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    client_id: Optional[str] = Field(None, example="some-client-id")
    client_secret: Optional[str] = Field(None, example="some-client-secret")
    display_name: Optional[str] = Field(None, example="my oauth2 application")
    scope: Optional[str] = Field(None, example="api")
    url: Optional[str] = Field(None, example="https://example.org")


class Provider(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str = Field(..., example="some-id")
    display_name: str = Field(..., example="my oauth2 application")
    url: str = Field(..., example="https://example.org")


class Connection(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str = Field(
        ...,
        description="ULID identifier",
        max_length=26,
        min_length=26,
        pattern="^[A-Z0-9]{26}$",
    )
    provider_id: str = Field(..., example="some-id")
    status: ConnectionStatus


class ConnectedAccount(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    username: str = Field(..., example="some-username")
    web_url: str = Field(..., example="https://example.org")


class AdminProviderList(RootModel[List[AdminProvider]]):
    root: List[AdminProvider]


class ProviderList(RootModel[List[Provider]]):
    root: List[Provider]


class ConnectionList(RootModel[List[Connection]]):
    root: List[Connection]
