# generated by datamodel-codegen:
#   filename:  api.spec.yaml
#   timestamp: 2025-10-31T14:40:52+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import ConfigDict, Field, RootModel
from renku_data_services.crc.apispec_base import BaseAPISpec


class UserPatch(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    no_default_access: Optional[bool] = Field(
        None,
        description="If set to true the user will not be able to use the default resource pool",
    )


class UserPut(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    no_default_access: bool = Field(
        ...,
        description="If set to true the user will not be able to use the default resource pool",
    )


class Version(BaseAPISpec):
    version: str


class IntegerId(RootModel[int]):
    root: int = Field(
        ...,
        description="An integer ID used to identify different resources",
        examples=[1],
        ge=0,
    )


class IntegerIds(RootModel[List[IntegerId]]):
    root: List[IntegerId] = Field(..., examples=[[1, 3, 5]], min_length=1)


class Kind(Enum):
    firecrest = "firecrest"


class RemoteConfigurationPatchReset(BaseAPISpec):
    pass
    model_config = ConfigDict(
        extra="forbid",
    )


class RemoteConfigurationFirecrestPatch(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    kind: Optional[Kind] = Field(
        None, description="Kind of remote resource pool", examples=["firecrest"]
    )
    provider_id: Optional[str] = Field(
        None,
        description="The ID of a provider (see oauth2 section).\nThis is used to allow seamless authentication using Renku integrations.\n",
        examples=["my-provider"],
    )
    api_url: Optional[str] = Field(
        None,
        description="The base URL of the FirecREST API",
        examples=["https://api.cscs.ch/hpc/firecrest/v2"],
    )
    system_name: Optional[str] = Field(
        None,
        description="The name of the system to use with the FirecREST API",
        examples=["eiger"],
    )
    partition: Optional[str] = Field(
        None,
        description="The partition to use when submitting jobs",
        examples=["normal"],
    )


class Toleration(BaseAPISpec):
    effect: Optional[str] = Field(
        None,
        description="Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
    )
    key: Optional[str] = Field(
        None,
        description="Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.",
    )
    operator: Optional[str] = Field(
        None,
        description="Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.",
    )
    tolerationSeconds: Optional[int] = Field(
        None,
        description="TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.",
    )
    value: Optional[str] = Field(
        None,
        description="Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.",
    )


class NodeAffinity(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    key: str = Field(
        ...,
        description="A valid K8s label",
        examples=["some-label-1"],
        max_length=63,
        min_length=3,
        pattern="^[a-z0-9A-Z][a-z0-9A-Z-_./]*[a-z0-9A-Z]$",
    )
    required_during_scheduling: bool = False


class NodeAffinityListResponse(RootModel[List[NodeAffinity]]):
    root: List[NodeAffinity] = Field(
        [],
        description="A list of k8s labels used for tolerations and/or node affinity",
        examples=[[{"key": "test-label-1", "required_during_scheduling": False}]],
        min_length=0,
    )


class Error(BaseAPISpec):
    code: int = Field(..., examples=[1404], gt=0)
    detail: Optional[str] = Field(
        None, examples=["A more detailed optional message showing what the problem was"]
    )
    message: str = Field(
        ..., examples=["Something went wrong - please try again later"]
    )


class ErrorResponse(BaseAPISpec):
    error: Error


class Protocol(Enum):
    http = "http"
    https = "https"


class IngressAnnotations(BaseAPISpec):
    pass
    model_config = ConfigDict(
        extra="allow",
    )


class ResourcePoolsParams(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    cpu: float = Field(0.0, description="Number of cpu cores", examples=[10], ge=0.0)
    gpu: int = Field(
        0, description="Number of GPUs", examples=[8], ge=0, le=9223372036854775807
    )
    memory: int = Field(
        0,
        description="Number of gigabytes of memory",
        examples=[4],
        ge=0,
        le=9223372036854775807,
    )
    max_storage: int = Field(
        0,
        description="Number of gigabytes of storage",
        examples=[100],
        ge=0,
        le=9223372036854775807,
    )


class ResourcePoolsGetParametersQuery(BaseAPISpec):
    resource_pools_params: Optional[ResourcePoolsParams] = None


class ResourceClassParams(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = Field(
        None,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )


class ResourcePoolsResourcePoolIdClassesGetParametersQuery(BaseAPISpec):
    resource_class_params: Optional[ResourceClassParams] = None


class UserResourceParams(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = Field(
        None,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )


class UsersUserIdResourcePoolsGetParametersQuery(BaseAPISpec):
    user_resource_params: Optional[UserResourceParams] = None


class Cluster(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(
        ...,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )
    config_name: str = Field(
        ...,
        description="The name of the Kubernetes configuration to use to connect to the remote cluster. This is currently used to find a file named `<KubeConfigRoot>/<config_name>`.\n\nThis configuration is expected to have a default namespace defined. It will be used for all remote operations requiring a namespace, as well for namespaced objects.\n",
        examples=["a-remote-cluster.yaml"],
        pattern="^[a-zA-Z0-9._-]+[.]yaml$",
    )
    session_protocol: Protocol
    session_host: str = Field(
        ..., max_length=256, pattern="^([0-9a-zA-Z:_-]+[.])*[0-9a-zA-Z:_-]+$"
    )
    session_port: int = Field(..., ge=0, le=65536)
    session_path: str
    session_ingress_class_name: Optional[str] = Field(None, max_length=256)
    session_ingress_annotations: IngressAnnotations
    session_tls_secret_name: str = Field(..., max_length=256)
    session_storage_class: Optional[str] = Field(None, max_length=256)
    service_account_name: Optional[str] = Field(
        None,
        description="A name of any K8s resource (i.e. Pod, Service, Secret, etc.).\nThis is pattern imposes the stricter rules applied to some resource type names\nthat need to follow DNS label standard and therefore can be used for all types.\nLooser rules can be applied to a smaller subset of resource types.\n",
        examples=["some-k8s-resource"],
        max_length=63,
        min_length=1,
        pattern="^[a-z0-9][a-z0-9-]*[a-z0-9]$",
    )


class ClusterPatch(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = Field(
        None,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )
    config_name: Optional[str] = Field(
        None,
        description="The name of the Kubernetes configuration to use to connect to the remote cluster. This is currently used to find a file named `<KubeConfigRoot>/<config_name>`.\n\nThis configuration is expected to have a default namespace defined. It will be used for all remote operations requiring a namespace, as well for namespaced objects.\n",
        examples=["a-remote-cluster.yaml"],
        pattern="^[a-zA-Z0-9._-]+[.]yaml$",
    )
    session_protocol: Optional[Protocol] = None
    session_host: Optional[str] = Field(
        None, max_length=256, pattern="^([0-9a-zA-Z:_-]+[.])*[0-9a-zA-Z:_-]+$"
    )
    session_port: Optional[int] = Field(None, ge=0, le=65536)
    session_path: Optional[str] = None
    session_ingress_class_name: Optional[str] = Field(None, max_length=256)
    session_ingress_annotations: Optional[IngressAnnotations] = None
    session_tls_secret_name: Optional[str] = Field(None, max_length=256)
    session_storage_class: Optional[str] = Field(None, max_length=256)
    service_account_name: Optional[str] = Field(
        None,
        description="A name of any K8s resource (i.e. Pod, Service, Secret, etc.).\nThis is pattern imposes the stricter rules applied to some resource type names\nthat need to follow DNS label standard and therefore can be used for all types.\nLooser rules can be applied to a smaller subset of resource types. An empty\nstring indicates that the value should be removed if present in the DB.\n",
        examples=["some-k8s-resource"],
        max_length=63,
        min_length=0,
        pattern="^[a-z0-9][a-z0-9-]*[a-z0-9]$",
    )


class ClusterWithId(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(
        ...,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )
    config_name: str = Field(
        ...,
        description="The name of the Kubernetes configuration to use to connect to the remote cluster. This is currently used to find a file named `<KubeConfigRoot>/<config_name>`.\n\nThis configuration is expected to have a default namespace defined. It will be used for all remote operations requiring a namespace, as well for namespaced objects.\n",
        examples=["a-remote-cluster.yaml"],
        pattern="^[a-zA-Z0-9._-]+[.]yaml$",
    )
    id: str = Field(
        ...,
        description="ULID identifier",
        max_length=26,
        min_length=26,
        pattern="^[0-7][0-9A-HJKMNP-TV-Z]{25}$",
    )
    session_protocol: Protocol
    session_host: str = Field(
        ..., max_length=256, pattern="^([0-9a-zA-Z:_-]+[.])*[0-9a-zA-Z:_-]+$"
    )
    session_port: int = Field(..., ge=0, le=65536)
    session_path: str
    session_ingress_class_name: Optional[str] = Field(None, max_length=256)
    session_ingress_annotations: IngressAnnotations
    session_tls_secret_name: str = Field(..., max_length=256)
    session_storage_class: Optional[str] = Field(None, max_length=256)
    service_account_name: Optional[str] = None


class ClustersWithId(RootModel[List[ClusterWithId]]):
    root: List[ClusterWithId]


class Cluster1(BaseAPISpec):
    id: str = Field(
        ...,
        description="ULID identifier",
        max_length=26,
        min_length=26,
        pattern="^[0-7][0-9A-HJKMNP-TV-Z]{25}$",
    )


class PoolUserWithId(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str = Field(
        ...,
        description="Keycloak user ID",
        examples=["f74a228b-1790-4276-af5f-25c2424e9b0c"],
        pattern="^[A-Za-z0-9]{1}[A-Za-z0-9-]+$",
    )
    no_default_access: bool = Field(
        False,
        description="If set to true the user will not be able to use the default resource pool",
    )


class PoolUsersWithId(RootModel[List[PoolUserWithId]]):
    root: List[PoolUserWithId]


class QuotaPatch(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    cpu: Optional[float] = Field(
        None, description="Number of cpu cores", examples=[10], gt=0.0
    )
    memory: Optional[int] = Field(
        None,
        description="Number of gigabytes of memory",
        examples=[4],
        gt=0,
        le=9223372036854775807,
    )
    gpu: Optional[int] = Field(
        None, description="Number of GPUs", examples=[8], ge=0, le=9223372036854775807
    )


class QuotaWithId(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    cpu: float = Field(..., description="Number of cpu cores", examples=[10], gt=0.0)
    memory: int = Field(
        ...,
        description="Number of gigabytes of memory",
        examples=[4],
        gt=0,
        le=9223372036854775807,
    )
    gpu: int = Field(
        ..., description="Number of GPUs", examples=[8], ge=0, le=9223372036854775807
    )
    id: str = Field(
        ...,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )


class QuotaWithOptionalId(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    cpu: float = Field(..., description="Number of cpu cores", examples=[10], gt=0.0)
    memory: int = Field(
        ...,
        description="Number of gigabytes of memory",
        examples=[4],
        gt=0,
        le=9223372036854775807,
    )
    gpu: int = Field(
        ..., description="Number of GPUs", examples=[8], ge=0, le=9223372036854775807
    )
    id: Optional[str] = Field(
        None,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )


class RemoteConfigurationFirecrest(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    kind: Kind = Field(
        ..., description="Kind of remote resource pool", examples=["firecrest"]
    )
    provider_id: Optional[str] = Field(
        None,
        description="The ID of a provider (see oauth2 section).\nThis is used to allow seamless authentication using Renku integrations.\n",
        examples=["my-provider"],
    )
    api_url: str = Field(
        ...,
        description="The base URL of the FirecREST API",
        examples=["https://api.cscs.ch/hpc/firecrest/v2"],
    )
    system_name: str = Field(
        ...,
        description="The name of the system to use with the FirecREST API",
        examples=["eiger"],
    )
    partition: Optional[str] = Field(
        None,
        description="The partition to use when submitting jobs",
        examples=["normal"],
    )


class ResourceClass(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(
        ...,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )
    cpu: float = Field(..., description="Number of cpu cores", examples=[10], gt=0.0)
    memory: int = Field(
        ...,
        description="Number of gigabytes of memory",
        examples=[4],
        gt=0,
        le=9223372036854775807,
    )
    gpu: int = Field(
        ..., description="Number of GPUs", examples=[8], ge=0, le=9223372036854775807
    )
    max_storage: int = Field(
        ...,
        description="Number of gigabytes of storage",
        examples=[100],
        gt=0,
        le=9223372036854775807,
    )
    default_storage: int = Field(
        ...,
        description="Number of gigabytes of storage",
        examples=[100],
        gt=0,
        le=9223372036854775807,
    )
    default: bool = Field(
        ...,
        description="A default selection for resource classes or resource pools",
        examples=[False],
    )
    tolerations: Optional[List[Toleration]] = Field(
        None,
        description="A list of toleration items used for pod scheduling in Kubernetes.\n",
    )
    node_affinities: Optional[List[NodeAffinity]] = Field(
        None,
        description="A list of k8s labels used for tolerations and/or node affinity",
        examples=[[{"key": "test-label-1", "required_during_scheduling": False}]],
        min_length=0,
    )


class ResourceClassPatch(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = Field(
        None,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )
    cpu: Optional[float] = Field(
        None, description="Number of cpu cores", examples=[10], gt=0.0
    )
    memory: Optional[int] = Field(
        None,
        description="Number of gigabytes of memory",
        examples=[4],
        gt=0,
        le=9223372036854775807,
    )
    gpu: Optional[int] = Field(
        None, description="Number of GPUs", examples=[8], ge=0, le=9223372036854775807
    )
    max_storage: Optional[int] = Field(
        None,
        description="Number of gigabytes of storage",
        examples=[100],
        gt=0,
        le=9223372036854775807,
    )
    default_storage: Optional[int] = Field(
        None,
        description="Number of gigabytes of storage",
        examples=[100],
        gt=0,
        le=9223372036854775807,
    )
    default: Optional[bool] = Field(
        None,
        description="A default selection for resource classes or resource pools",
        examples=[False],
    )
    tolerations: Optional[List[Toleration]] = Field(
        None,
        description="A list of toleration items used for pod scheduling in Kubernetes.\n",
    )
    node_affinities: Optional[List[NodeAffinity]] = Field(
        None,
        description="A list of k8s labels used for tolerations and/or node affinity",
        examples=[[{"key": "test-label-1", "required_during_scheduling": False}]],
        min_length=0,
    )


class ResourceClassPatchWithId(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = Field(
        None,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )
    cpu: Optional[float] = Field(
        None, description="Number of cpu cores", examples=[10], gt=0.0
    )
    memory: Optional[int] = Field(
        None,
        description="Number of gigabytes of memory",
        examples=[4],
        gt=0,
        le=9223372036854775807,
    )
    gpu: Optional[int] = Field(
        None, description="Number of GPUs", examples=[8], ge=0, le=9223372036854775807
    )
    max_storage: Optional[int] = Field(
        None,
        description="Number of gigabytes of storage",
        examples=[100],
        gt=0,
        le=9223372036854775807,
    )
    default_storage: Optional[int] = Field(
        None,
        description="Number of gigabytes of storage",
        examples=[100],
        gt=0,
        le=9223372036854775807,
    )
    id: int = Field(
        ...,
        description="An integer ID used to identify different resources",
        examples=[1],
        ge=0,
    )
    default: Optional[bool] = Field(
        None,
        description="A default selection for resource classes or resource pools",
        examples=[False],
    )
    tolerations: Optional[List[Toleration]] = Field(
        None,
        description="A list of toleration items used for pod scheduling in Kubernetes.\n",
    )
    node_affinities: Optional[List[NodeAffinity]] = Field(
        None,
        description="A list of k8s labels used for tolerations and/or node affinity",
        examples=[[{"key": "test-label-1", "required_during_scheduling": False}]],
        min_length=0,
    )


class ResourceClassWithId(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(
        ...,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )
    cpu: float = Field(..., description="Number of cpu cores", examples=[10], gt=0.0)
    memory: int = Field(
        ...,
        description="Number of gigabytes of memory",
        examples=[4],
        gt=0,
        le=9223372036854775807,
    )
    gpu: int = Field(
        ..., description="Number of GPUs", examples=[8], ge=0, le=9223372036854775807
    )
    max_storage: int = Field(
        ...,
        description="Number of gigabytes of storage",
        examples=[100],
        gt=0,
        le=9223372036854775807,
    )
    default_storage: int = Field(
        ...,
        description="Number of gigabytes of storage",
        examples=[100],
        gt=0,
        le=9223372036854775807,
    )
    id: int = Field(
        ...,
        description="An integer ID used to identify different resources",
        examples=[1],
        ge=0,
    )
    default: bool = Field(
        ...,
        description="A default selection for resource classes or resource pools",
        examples=[False],
    )
    tolerations: Optional[List[Toleration]] = Field(
        None,
        description="A list of toleration items used for pod scheduling in Kubernetes.\n",
    )
    node_affinities: Optional[List[NodeAffinity]] = Field(
        None,
        description="A list of k8s labels used for tolerations and/or node affinity",
        examples=[[{"key": "test-label-1", "required_during_scheduling": False}]],
        min_length=0,
    )


class ResourceClassWithIdFiltered(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(
        ...,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )
    cpu: float = Field(..., description="Number of cpu cores", examples=[10], gt=0.0)
    memory: int = Field(
        ...,
        description="Number of gigabytes of memory",
        examples=[4],
        gt=0,
        le=9223372036854775807,
    )
    gpu: int = Field(
        ..., description="Number of GPUs", examples=[8], ge=0, le=9223372036854775807
    )
    max_storage: int = Field(
        ...,
        description="Number of gigabytes of storage",
        examples=[100],
        gt=0,
        le=9223372036854775807,
    )
    default_storage: int = Field(
        ...,
        description="Number of gigabytes of storage",
        examples=[100],
        gt=0,
        le=9223372036854775807,
    )
    id: int = Field(
        ...,
        description="An integer ID used to identify different resources",
        examples=[1],
        ge=0,
    )
    default: bool = Field(
        ...,
        description="A default selection for resource classes or resource pools",
        examples=[False],
    )
    matching: Optional[bool] = None
    tolerations: Optional[List[Toleration]] = Field(
        None,
        description="A list of toleration items used for pod scheduling in Kubernetes.\n",
    )
    node_affinities: Optional[List[NodeAffinity]] = Field(
        None,
        description="A list of k8s labels used for tolerations and/or node affinity",
        examples=[[{"key": "test-label-1", "required_during_scheduling": False}]],
        min_length=0,
    )


class ResourceClassesWithIdResponse(RootModel[List[ResourceClassWithId]]):
    root: List[ResourceClassWithId] = Field(
        ...,
        examples=[
            [
                {
                    "name": "resource class 1",
                    "cpu": 1.5,
                    "memory": 2,
                    "gpu": 0,
                    "max_storage": 100,
                    "id": 1,
                    "default": True,
                    "default_storage": 10,
                },
                {
                    "name": "resource class 2",
                    "cpu": 4.5,
                    "memory": 10,
                    "gpu": 2,
                    "default_storage": 10,
                    "max_storage": 10000,
                    "id": 2,
                    "default": False,
                },
            ]
        ],
    )


class ResourcePoolPatch(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    quota: Optional[QuotaPatch] = None
    classes: Optional[List[ResourceClassPatchWithId]] = Field(
        None,
        examples=[
            [
                {"name": "resource class 1", "id": 1},
                {"cpu": 4.5, "max_storage": 10000, "id": 2},
            ]
        ],
        min_length=1,
    )
    name: Optional[str] = Field(
        None,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )
    public: Optional[bool] = Field(
        None,
        description="A resource pool whose classes can be accessed by anyone",
        examples=[False],
    )
    default: Optional[bool] = Field(
        None,
        description="A default selection for resource classes or resource pools",
        examples=[False],
    )
    remote: Optional[
        Union[RemoteConfigurationPatchReset, RemoteConfigurationFirecrestPatch]
    ] = Field(
        None,
        description="Patch for the configuration used by to start sessions remotely\n",
    )
    idle_threshold: Optional[int] = Field(
        None,
        description="A threshold in seconds after which a session gets hibernated (0 means no threshold)",
        ge=0,
        le=2147483647,
    )
    hibernation_threshold: Optional[int] = Field(
        None,
        description="A threshold in seconds after which a session gets culled/deleted (0 means no threshold)",
        ge=0,
        le=2147483647,
    )
    cluster_id: Optional[str] = Field(
        None,
        description="ULID identifier",
        max_length=26,
        min_length=26,
        pattern="^[0-7][0-9A-HJKMNP-TV-Z]{25}$",
    )


class ResourcePool(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    quota: Optional[QuotaWithOptionalId] = None
    classes: List[ResourceClass]
    name: str = Field(
        ...,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )
    public: bool = Field(
        ...,
        description="A resource pool whose classes can be accessed by anyone",
        examples=[False],
    )
    default: bool = Field(
        ...,
        description="A default selection for resource classes or resource pools",
        examples=[False],
    )
    remote: Optional[RemoteConfigurationFirecrest] = Field(
        None,
        description="The configuration used by Renku to start sessions remotely.\nIf this field is present, the corresponding resource pool starts remote sessions.\n",
    )
    idle_threshold: Optional[int] = Field(
        None,
        description="A threshold in seconds after which a session gets hibernated (0 means no threshold)",
        ge=0,
        le=2147483647,
    )
    hibernation_threshold: Optional[int] = Field(
        None,
        description="A threshold in seconds after which a session gets culled/deleted (0 means no threshold)",
        ge=0,
        le=2147483647,
    )
    cluster_id: Optional[str] = Field(
        None,
        description="ULID identifier",
        max_length=26,
        min_length=26,
        pattern="^[0-7][0-9A-HJKMNP-TV-Z]{25}$",
    )


class ResourcePoolPut(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    quota: Optional[QuotaWithId] = None
    classes: List[ResourceClassWithId] = Field(
        ...,
        examples=[
            [
                {
                    "name": "resource class 1",
                    "cpu": 1.5,
                    "memory": 2,
                    "gpu": 0,
                    "max_storage": 100,
                    "id": 1,
                    "default": True,
                    "default_storage": 10,
                },
                {
                    "name": "resource class 2",
                    "cpu": 4.5,
                    "memory": 10,
                    "gpu": 2,
                    "default_storage": 10,
                    "max_storage": 10000,
                    "id": 2,
                    "default": False,
                },
            ]
        ],
    )
    name: str = Field(
        ...,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )
    public: bool = Field(
        ...,
        description="A resource pool whose classes can be accessed by anyone",
        examples=[False],
    )
    default: bool = Field(
        ...,
        description="A default selection for resource classes or resource pools",
        examples=[False],
    )
    remote: Optional[RemoteConfigurationFirecrest] = Field(
        None,
        description="The configuration used by Renku to start sessions remotely.\nIf this field is present, the corresponding resource pool starts remote sessions.\n",
    )
    idle_threshold: Optional[int] = Field(
        None,
        description="A threshold in seconds after which a session gets hibernated (0 means no threshold)",
        ge=0,
        le=2147483647,
    )
    hibernation_threshold: Optional[int] = Field(
        None,
        description="A threshold in seconds after which a session gets culled/deleted (0 means no threshold)",
        ge=0,
        le=2147483647,
    )
    cluster_id: Optional[str] = Field(
        None,
        description="ULID identifier",
        max_length=26,
        min_length=26,
        pattern="^[0-7][0-9A-HJKMNP-TV-Z]{25}$",
    )


class ResourcePoolWithId(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    quota: Optional[QuotaWithId] = None
    classes: List[ResourceClassWithId]
    name: str = Field(
        ...,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )
    id: int = Field(
        ...,
        description="An integer ID used to identify different resources",
        examples=[1],
        ge=0,
    )
    public: bool = Field(
        ...,
        description="A resource pool whose classes can be accessed by anyone",
        examples=[False],
    )
    default: bool = Field(
        ...,
        description="A default selection for resource classes or resource pools",
        examples=[False],
    )
    remote: Optional[RemoteConfigurationFirecrest] = Field(
        None,
        description="The configuration used by Renku to start sessions remotely.\nIf this field is present, the corresponding resource pool starts remote sessions.\n",
    )
    idle_threshold: Optional[int] = Field(
        None,
        description="A threshold in seconds after which a session gets hibernated (0 means no threshold)",
        ge=0,
        le=2147483647,
    )
    hibernation_threshold: Optional[int] = Field(
        None,
        description="A threshold in seconds after which a session gets culled/deleted (0 means no threshold)",
        ge=0,
        le=2147483647,
    )
    cluster: Optional[Cluster1] = None


class ResourcePoolWithIdFiltered(BaseAPISpec):
    model_config = ConfigDict(
        extra="forbid",
    )
    quota: Optional[QuotaWithId] = None
    classes: List[ResourceClassWithIdFiltered]
    name: str = Field(
        ...,
        description="A name for a specific resource",
        examples=["the name of a resource"],
        min_length=5,
    )
    id: int = Field(
        ...,
        description="An integer ID used to identify different resources",
        examples=[1],
        ge=0,
    )
    public: bool = Field(
        ...,
        description="A resource pool whose classes can be accessed by anyone",
        examples=[False],
    )
    default: bool = Field(
        ...,
        description="A default selection for resource classes or resource pools",
        examples=[False],
    )
    remote: Optional[RemoteConfigurationFirecrest] = Field(
        None,
        description="The configuration used by Renku to start sessions remotely.\nIf this field is present, the corresponding resource pool starts remote sessions.\n",
    )
    idle_threshold: Optional[int] = Field(
        None,
        description="A threshold in seconds after which a session gets hibernated (0 means no threshold)",
        ge=0,
        le=2147483647,
    )
    hibernation_threshold: Optional[int] = Field(
        None,
        description="A threshold in seconds after which a session gets culled/deleted (0 means no threshold)",
        ge=0,
        le=2147483647,
    )
    cluster_id: Optional[str] = Field(
        None,
        description="ULID identifier",
        max_length=26,
        min_length=26,
        pattern="^[0-7][0-9A-HJKMNP-TV-Z]{25}$",
    )


class ResourcePoolsWithId(RootModel[List[ResourcePoolWithId]]):
    root: List[ResourcePoolWithId]


class ResourcePoolsWithIdFiltered(RootModel[List[ResourcePoolWithIdFiltered]]):
    root: List[ResourcePoolWithIdFiltered]
