"""expand and separate environments from session launchers

Revision ID: 584598f3b769
Revises: b8cbd62e85b9
Create Date: 2024-08-12 14:25:24.292285

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "584598f3b769"
down_revision = "b8cbd62e85b9"
branch_labels = None
depends_on = None

default_url: str = "/lab"
working_dir: str = "/home/jovyan/work"
mount_dir: str = "/home/jovyan/work"
uid: int = 1000
gid: int = 100
port: int = 8888


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Migrate session launchers
    # NOTE: CASCADE below drops the environment_kind column in session launchers which depends on this type
    op.execute("DROP TYPE environmentkind CASCADE")
    op.execute("CREATE TYPE environmentkind AS ENUM ('GLOBAL', 'CUSTOM')")
    op.add_column(
        "environments",
        sa.Column("environment_kind", sa.Enum("GLOBAL", "CUSTOM", name="environmentkind"), nullable=True),
        schema="sessions",
    )
    op.execute("UPDATE sessions.environments SET environment_kind = 'GLOBAL' WHERE environment_kind is NULL")
    # NOTE: When the session launcher has environment_id set to null then it is a custom environment
    # NOTE: We populate the name column in the new environment with the session launcher id
    # This way we can join the newly add environments with their launchers and update the foreign key in the launchers
    # with the newly created environments.
    # NOTE: Since postgres cannot autogenerate ulids we use the session launcher ulid when creating the environment
    op.execute(
        "INSERT INTO sessions.environments(id, name, created_by_id, creation_date, container_image, default_url, environment_kind) "
        "SELECT generate_ulid(), id, created_by_id, creation_date, container_image, default_url, 'CUSTOM' "
        "FROM sessions.launchers "
        "WHERE environment_id IS NULL"
    )
    op.execute(
        "UPDATE sessions.launchers "
        "SET environment_id = sessions.environments.id "
        "FROM sessions.environments "
        "WHERE sessions.environments.name = sessions.launchers.id"
    )
    # NOTE: Make the environment name human readable when the join and udpate is done
    op.execute(
        "UPDATE sessions.environments "
        "SET name = CONCAT('Custom environment for session launcher ID ', name) "
        "WHERE environment_kind = 'CUSTOM'"
    )
    # Drop unused fields from session launchers
    op.drop_column("launchers", "default_url", schema="sessions")
    op.drop_column("launchers", "container_image", schema="sessions")
    # Add new fields to environment
    op.add_column("environments", sa.Column("port", sa.Integer(), nullable=True), schema="sessions")
    op.add_column("environments", sa.Column("working_directory", sa.String(), nullable=True), schema="sessions")
    op.add_column("environments", sa.Column("mount_directory", sa.String(), nullable=True), schema="sessions")
    op.add_column("environments", sa.Column("uid", sa.Integer(), nullable=True), schema="sessions")
    op.add_column("environments", sa.Column("gid", sa.Integer(), nullable=True), schema="sessions")
    op.execute(sa.text("UPDATE sessions.environments SET port = :port WHERE port is NULL").bindparams(port=port))
    op.execute(
        sa.text(
            "UPDATE sessions.environments SET working_directory = :working_dir WHERE working_directory is NULL"
        ).bindparams(working_dir=working_dir)
    )
    op.execute(
        sa.text(
            "UPDATE sessions.environments SET mount_directory = :mount_dir WHERE mount_directory is NULL"
        ).bindparams(mount_dir=mount_dir)
    )
    op.execute(sa.text("UPDATE sessions.environments SET uid = :uid WHERE uid is NULL").bindparams(uid=uid))
    op.execute(sa.text("UPDATE sessions.environments SET gid = :gid WHERE gid is NULL").bindparams(gid=gid))
    op.execute(
        sa.text("UPDATE sessions.environments SET default_url = :default_url WHERE default_url is NULL").bindparams(
            default_url=default_url
        )
    )
    # Set proper nullable constraints
    op.alter_column("environments", "port", nullable=False, schema="sessions")
    op.alter_column("environments", "working_directory", nullable=False, schema="sessions")
    op.alter_column("environments", "mount_directory", nullable=False, schema="sessions")
    op.alter_column("environments", "uid", nullable=False, schema="sessions")
    op.alter_column("environments", "gid", nullable=False, schema="sessions")
    op.alter_column("environments", "environment_kind", nullable=False, schema="sessions")
    op.alter_column(
        "environments", "default_url", existing_type=sa.VARCHAR(length=200), nullable=False, schema="sessions"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("ALTER TYPE environmentkind RENAME TO environmentkind_old;")
    op.execute("CREATE TYPE environmentkind AS ENUM ('global_environment', 'container_image')")
    op.add_column(
        "launchers",
        sa.Column("container_image", sa.VARCHAR(length=500), autoincrement=False, nullable=True),
        schema="sessions",
    )
    op.add_column(
        "launchers",
        sa.Column(
            "environment_kind",
            postgresql.ENUM("global_environment", "container_image", name="environmentkind"),
            autoincrement=False,
            nullable=True,
        ),
        schema="sessions",
    )
    op.add_column(
        "launchers",
        sa.Column("default_url", sa.VARCHAR(length=200), autoincrement=False, nullable=True),
        schema="sessions",
    )
    # Move the custom environments spec back into the session launcher table
    op.execute(
        "UPDATE sessions.launchers "
        "SET default_url = environments.default_url, "
        "container_image = environments.container_image, "
        "environment_kind = 'container_image' "
        "FROM sessions.environments "
        "WHERE launchers.environment_id = environments.id AND "
        "environments.environment_kind = 'CUSTOM'"
    )
    op.execute("UPDATE sessions.launchers SET environment_kind = 'global_environment' WHERE environment_kind IS NULL")
    op.alter_column("launchers", "environment_kind", nullable=False, schema="sessions")
    op.alter_column(
        "environments", "default_url", existing_type=sa.VARCHAR(length=200), nullable=True, schema="sessions"
    )
    op.drop_column("environments", "environment_kind", schema="sessions")
    op.drop_column("environments", "gid", schema="sessions")
    op.drop_column("environments", "uid", schema="sessions")
    op.drop_column("environments", "mount_directory", schema="sessions")
    op.drop_column("environments", "working_directory", schema="sessions")
    op.drop_column("environments", "port", schema="sessions")
    op.execute("DROP TYPE environmentkind_old CASCADE")
    # ### end Alembic commands ###
