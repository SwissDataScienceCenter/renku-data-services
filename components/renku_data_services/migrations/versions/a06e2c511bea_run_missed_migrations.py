"""run missed migrations

Revision ID: a06e2c511bea
Revises: e16782d6bf32
Create Date: 2024-03-11 16:23:52.894901

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "a06e2c511bea"
down_revision = "e16782d6bf32"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "projects", "creation_date", existing_type=postgresql.TIMESTAMP(timezone=True), nullable=True, schema="projects"
    )
    op.drop_constraint(
        "projects_repositories_project_id_fkey", "projects_repositories", schema="projects", type_="foreignkey"
    )
    op.create_foreign_key(
        None,
        "projects_repositories",
        "projects",
        ["project_id"],
        ["id"],
        source_schema="projects",
        referent_schema="projects",
        ondelete="CASCADE",
    )
    op.create_index(
        op.f("ix_resource_pools_node_affinities_key"), "node_affinities", ["key"], unique=False, schema="resource_pools"
    )
    op.create_index(
        op.f("ix_resource_pools_tolerations_key"), "tolerations", ["key"], unique=False, schema="resource_pools"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_resource_pools_tolerations_key"), table_name="tolerations", schema="resource_pools")
    op.drop_index(op.f("ix_resource_pools_node_affinities_key"), table_name="node_affinities", schema="resource_pools")
    op.drop_constraint(None, "projects_repositories", schema="projects", type_="foreignkey")
    op.create_foreign_key(
        "projects_repositories_project_id_fkey",
        "projects_repositories",
        "projects",
        ["project_id"],
        ["id"],
        source_schema="projects",
        referent_schema="projects",
    )
    op.alter_column(
        "projects",
        "creation_date",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        schema="projects",
    )
    # ### end Alembic commands ###
