"""add missing entitity slug constraints

Revision ID: 04b2a0242f43
Revises: 35ea9d8f54e8
Create Date: 2025-08-22 16:34:20.530644

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "04b2a0242f43"
down_revision = "35ea9d8f54e8"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Deduplicate existing data that may have conflicts that the new constraints below will not allow
    subquery1 = (
        # Duplicate project slugs
        "SELECT id, ROW_NUMBER() OVER (PARTITION BY namespace_id, slug ORDER by id DESC) as row_number "
        "FROM common.entity_slugs "
        "WHERE data_connector_id IS NULL AND project_id IS NOT NULL "
        "UNION "
        # Duplicate slugs for DCs owned by user/group
        "SELECT id, ROW_NUMBER() OVER (PARTITION BY namespace_id, slug ORDER by id DESC) as row_number "
        "FROM common.entity_slugs "
        "WHERE data_connector_id IS NOT NULL AND project_id IS NULL "
        "UNION "
        # Duplicate slugs for DCs owned by a project
        "SELECT id, ROW_NUMBER() OVER (PARTITION BY namespace_id, project_id, slug ORDER by id DESC) as row_number "
        "FROM common.entity_slugs "
        "WHERE data_connector_id IS NOT NULL AND project_id IS NOT NULL "
    )
    # NOTE: There should be 1 row per group, if there are 2 or more rows those are all duplicates that need to be deduplicated
    subquery2 = f"SELECT id FROM ({subquery1}) WHERE row_number >= 2"  # nosec: B608
    op.execute(
        # NOTE: We truncate the original slug to make sure we have enough space since the slug can be 99 characters long.
        sa.text(
            f"UPDATE common.entity_slugs SET slug = LEFT(slug,83) || '-duplicate-' || substr(md5(random()::text), 1, 5) WHERE id IN ({subquery2}) "  # nosec: B608
        )
    )
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(
        "entity_slugs_unique_slugs_data_connector_in_group_user_slugs",
        "entity_slugs",
        ["namespace_id", "data_connector_id", "slug"],
        unique=True,
        schema="common",
        postgresql_nulls_not_distinct=True,
        postgresql_where="project_id IS NULL",
    )
    op.create_index(
        "entity_slugs_unique_slugs_data_connector_in_project_slugs_1",
        "entity_slugs",
        ["namespace_id", "project_id", "slug"],
        unique=True,
        schema="common",
        postgresql_nulls_not_distinct=True,
        postgresql_where="project_id IS NOT NULL AND data_connector_id IS NOT NULL",
    )
    op.create_index(
        "entity_slugs_unique_slugs_data_connector_in_project_slugs_2",
        "entity_slugs",
        ["namespace_id", "data_connector_id", "slug"],
        unique=True,
        schema="common",
        postgresql_nulls_not_distinct=True,
        postgresql_where="project_id IS NOT NULL AND data_connector_id IS NOT NULL",
    )
    op.create_index(
        "entity_slugs_unique_slugs_project_slugs",
        "entity_slugs",
        ["namespace_id", "slug"],
        unique=True,
        schema="common",
        postgresql_nulls_not_distinct=True,
        postgresql_where="data_connector_id IS NULL",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "entity_slugs_unique_slugs_project_slugs",
        table_name="entity_slugs",
        schema="common",
        postgresql_nulls_not_distinct=True,
        postgresql_where="data_connector_id IS NULL",
    )
    op.drop_index(
        "entity_slugs_unique_slugs_data_connector_in_project_slugs_2",
        table_name="entity_slugs",
        schema="common",
        postgresql_nulls_not_distinct=True,
        postgresql_where="project_id IS NOT NULL AND data_connector_id IS NOT NULL",
    )
    op.drop_index(
        "entity_slugs_unique_slugs_data_connector_in_project_slugs_1",
        table_name="entity_slugs",
        schema="common",
        postgresql_nulls_not_distinct=True,
        postgresql_where="project_id IS NOT NULL AND data_connector_id IS NOT NULL",
    )
    op.drop_index(
        "entity_slugs_unique_slugs_data_connector_in_group_user_slugs",
        table_name="entity_slugs",
        schema="common",
        postgresql_nulls_not_distinct=True,
        postgresql_where="project_id IS NULL",
    )
    # ### end Alembic commands ###
