"""move user preferences to user schema

Revision ID: 17eea03f938e
Revises: dcc1c1ee662f
Create Date: 2024-07-26 14:37:29.556827

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "17eea03f938e"
down_revision = "dcc1c1ee662f"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_preferences",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column(
            "pinned_projects",
            sa.JSON().with_variant(postgresql.JSONB(astext_type=sa.Text()), "postgresql"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
        schema="users",
    )
    # ### end Alembic commands ###
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    if "user_preferences" in inspector.get_schema_names() and "user_preferences" in inspector.get_table_names(
        schema="user_preferences"
    ):
        # migrate old user preferences
        statement = sa.sql.text(
            """
            INSERT INTO users.user_preferences
            SELECT *
            FROM user_preferences.user_preferences
            """
        )
        conn.execute(statement)

        op.drop_table("user_preferences", schema="user_preferences")
        op.execute("DROP SCHEMA user_preferences")


def downgrade() -> None:
    op.execute("CREATE SCHEMA user_preferences")
    op.create_table(
        "user_preferences",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column(
            "pinned_projects",
            sa.JSON().with_variant(postgresql.JSONB(astext_type=sa.Text()), "postgresql"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
        schema="user_preferences",
    )
    conn = op.get_bind()
    statement = sa.sql.text(
        """
        INSERT INTO user_preferences.user_preferences
        SELECT *
        FROM users.user_preferences
        """
    )
    conn.execute(statement)

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_preferences", schema="users")
    # ### end Alembic commands ###
