"""create initial global environments

Revision ID: 450ae3930996
Revises: d71f0f795d30
Create Date: 2025-02-07 02:34:53.408066

"""

import json
import logging
import os
from dataclasses import dataclass
from pathlib import Path

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects.postgresql import JSONB

from renku_data_services.base_models.core import InternalServiceAdmin

JSONVariant = sa.JSON().with_variant(JSONB(), "postgresql")
# revision identifiers, used by Alembic.
revision = "450ae3930996"
down_revision = "d71f0f795d30"
branch_labels = None
depends_on = None


@dataclass
class Environment:
    name: str
    container_image: str
    default_url: str
    port: int = 8888
    description: str = ""
    working_directory: str | None = None
    mount_directory: str | None = None
    uid: int = 1000
    gid: int = 1000
    args: list[str] | None = None
    command: list[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        connection = op.get_bind()

        initial_env = os.environ.get("SESSIONS_INITIAL_ENVIRONMENTS_PATH")

        if not initial_env:
            logging.info("skipping creation of default global environments")
            return

        initial_env_path = Path(initial_env)

        if not initial_env_path or not initial_env_path.is_file():
            logging.info("skipping creation of default global environments")

        with open(initial_env_path) as f:
            envs = json.load(f)
        if not isinstance(envs, list):
            logging.warn("default global envs is not a valid list, skipping creation of default global envs")
            return

        if not envs:
            logging.info("no default global envs found")
            return

        logging.info("creating global environments")
        for env in envs:
            if not isinstance(env, dict):
                logging.warn(f"env is not a valid dict, skipping: {env}")
                continue
            try:
                new_env = Environment(**env)
            except ValueError as e:
                logging.warn(f"couldn't parse default environment spec, skipping: {e}")
                continue

            env_stmt = (
                sa.select(sa.column("id", type_=sa.String))
                .select_from(sa.table("environments", schema="sessions"))
                .where(sa.column("name") == sa.literal(new_env.name, type_=sa.Text()))
            )
            existing_envs = connection.execute(env_stmt).all()
            if len(existing_envs) > 0:
                logging.info(f"environment {env["name"]} already exists, skipping creation")
                continue

            op.execute(
                sa.text(
                    """INSERT INTO sessions.environments(
                        id, 
                        name, description,
                        created_by_id, 
                        creation_date, 
                        container_image, 
                        default_url, 
                        port,
                        working_directory,
                        mount_directory,
                        uid,
                        gid,
                        args,
                        command,
                        environment_kind 
                    )VALUES (
                        generate_ulid(), 
                        :name, 
                        :description, 
                        :created_by_id, 
                        now(), 
                        :container_image, 
                        :default_url,
                        :port,
                        :working_directory,
                        :mount_directory,
                        :uid,
                        :gid,
                        :args,
                        :command,
                        'GLOBAL'
                    )"""  # nosec: B608
                ).bindparams(
                    sa.bindparam("name", value=new_env.name, type_=sa.Text),
                    sa.bindparam("description", value=new_env.description, type_=sa.Text),
                    sa.bindparam("created_by_id", value=InternalServiceAdmin.id, type_=sa.Text),
                    sa.bindparam("container_image", value=new_env.container_image, type_=sa.Text),
                    sa.bindparam("default_url", value=new_env.default_url, type_=sa.Text),
                    sa.bindparam("port", value=new_env.port, type_=sa.Integer),
                    sa.bindparam("working_directory", value=new_env.working_directory, type_=sa.Text),
                    sa.bindparam("mount_directory", value=new_env.mount_directory, type_=sa.Text),
                    sa.bindparam("uid", value=new_env.uid, type_=sa.Integer),
                    sa.bindparam("gid", value=new_env.gid, type_=sa.Integer),
                    sa.bindparam("args", value=new_env.args, type_=JSONVariant),
                    sa.bindparam("command", value=new_env.command, type_=JSONVariant),
                )
            )
            logging.info(f"created global environment {new_env.name}")

    except Exception:
        logging.exception("creation of intial global environments failed")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
