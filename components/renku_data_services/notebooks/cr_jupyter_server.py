# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-09-25T12:23:56+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Mapping, Optional, Sequence, Union

from pydantic import ConfigDict, Field
from renku_data_services.notebooks.cr_base import BaseCRD


class SecretKeyRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: Optional[str] = None
    name: Optional[str] = None


class ClientSecret(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="A regular reference to the key/secret which holds the client secret of the application registered with the OIDC provider. Note that the secret has to be in the same namespace in which the custom resource object is going to be created.",
    )
    value: str = Field(..., description="The secret provided as a string value.")


class ClientSecret1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    secretKeyRef: SecretKeyRef = Field(
        ...,
        description="A regular reference to the key/secret which holds the client secret of the application registered with the OIDC provider. Note that the secret has to be in the same namespace in which the custom resource object is going to be created.",
    )
    value: Optional[str] = Field(
        default=None, description="The secret provided as a string value."
    )


class Oidc(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    authorizedEmails: Sequence[str] = Field(
        default=[],
        description='List of users (identified by Email address read from the "email" OIDC claim) which are allowed to access this Jupyter session. This list is stored as a file and passed to the `--authenticated-emails-file` option (see https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview#command-line-options).',
    )
    authorizedGroups: Sequence[str] = Field(
        default=[],
        description='List of groups of users (read from the "groups" OIDC claim) which are allowed to access this Jupyter session. This list passed to the `--allowed-group` option (see https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview#command-line-options).',
    )
    clientId: Optional[str] = Field(
        default=None,
        description="The client id of the application registered with the OIDC provider, see `--client-id` here: https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/#command-line-options",
    )
    clientSecret: Optional[Union[ClientSecret, ClientSecret1]] = Field(
        default=None,
        description="The client secret of the application registered with the OIDC provider. This secret can be given here explicitly as string or through a reference to an existing secret. Using the secret reference is the preferred option because it avoids storing the secret in clear text on the custom resource specification. See `--client-secret` here: https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/#command-line-options",
    )
    enabled: bool = False
    issuerUrl: Optional[str] = Field(
        default=None,
        description="Issuer URL of the OIDC provider, see `--oidc-issuer-url` here: https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/#command-line-options",
    )


class Auth(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    oidc: Oidc = Field(
        default={},
        description="Configuration for an OpenID connect provider to be used for access control to the jupyter server. Useful information can be found in the oauth2 proxy docs: https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/",
    )
    token: Optional[str] = Field(
        default=None,
        description='A token that will be passed to the `--ServerApp.token` option when running the Jupyter server and needed when first accessing the Jupyter server. The options are:\n\n  - By leaving this field empty, a token will be autogenerated and\nadded under the key `ServerApp.token` to the secret which is created as a child of the custom resource object.\n\n  - Setting the token to an empty string "" runs the Jupyter server\ncontainer itself without any authentication. This is recommended when enabling OIDC as authentication and authorization are then handled by the dedicated plugins.\n\n  - Set an actual value here. Note that this string will be stored\nin clear text as part of the custom resource object. This option is mostly useful for dev purposes.',
    )


class Culling(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    maxAgeSecondsThreshold: int = Field(
        default=0,
        description="The maximum allowed age for a session, regardless of whether it is active or not. A value of zero indicates that the server cannot be culled due to its age.",
        ge=0,
    )
    idleSecondsThreshold: int = Field(
        default=0,
        description="How long should a server be idle for before it is culled. A value of zero indicates that the server should never be culled for inactivity.",
        ge=0,
    )
    startingSecondsThreshold: int = Field(
        default=0,
        description="How long can a server be in starting state before it gets culled. A value of zero indicates that the server cannot be culled due to starting too long.",
        ge=0,
    )
    failedSecondsThreshold: int = Field(
        default=0,
        description="How long can a server be in failed state before it gets culled. A value of zero indicates that the server cannot be culled due to failing.",
        ge=0,
    )
    hibernatedSecondsThreshold: int = Field(
        default=0,
        description="Number of seconds where a server can be in hibernated state before it gets culled. A value of zero indicates that hibernated servers cannot be culled.",
        ge=0,
    )


class JupyterServer(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultUrl: str = Field(
        default="/lab",
        description="The default URL to redirect to from '/'. Frequently used values are '/lab' or '/rstudio'. Translates to `--ServerApp.default_url`.",
    )
    hibernated: bool = Field(
        default=False, description="Whether the server is hibernated or not."
    )
    image: str = "jupyter/minimal-notebook:latest"
    resources: Mapping[str, Any] = Field(
        default={},
        description="Regular K8s resource requests, will be set on the main notebook container.",
    )
    rootDir: str = Field(
        default="/home/jovyan/work",
        description="The absolute path to the root/notebook directory for the jupyter server. Should lead to a subdirectory of or match the path at storage.pvc.mountPath. Translates to `--ServerApp.root_dir`.",
    )


class Type(Enum):
    application_json_patch_json = "application/json-patch+json"
    application_merge_patch_json = "application/merge-patch+json"


class Patch(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    patch: Optional[Any] = None
    type: Optional[Type] = None


class Tls(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    enabled: bool = False
    secretName: Optional[str] = Field(
        default=None,
        description="The name of the K8s TLS secret. Might be pre-existing in the cluster or created under that name by a tool like cert manager when needed.",
    )


class Routing(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    host: Optional[str] = Field(
        default=None,
        description="Host under which the server will be available (eg myserver.example.com), should not include the schema.",
    )
    ingressAnnotations: Mapping[str, Any] = {}
    path: str = Field(
        default="/", description="Optionally make the server available under some path."
    )
    tls: Tls = Field(
        default={}, description="Settings for defining TLS termination by the ingress."
    )


class Pvc(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    enabled: bool = Field(
        default=False,
        description="Whether a PVC should be used to back the session. Defaults to 'false' in which case an emptyDir volume will be used.",
    )
    mountPath: str = Field(
        default="/home/jovyan/work",
        description="The absolute path to the location where the PVC should be mounted in the user session pod.",
    )
    storageClassName: Optional[str] = Field(
        default=None,
        description="Storage class to be used for the PVC. If left empty, the default storage class defined for the cluster will be used.",
    )


class Storage(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    pvc: Pvc = {}
    size: Any = Field(
        default="100Mi",
        description="Size of the PVC or sizeLimit of the emptyDir volume which backs the session respectively.",
    )


class Spec(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    auth: Auth = Field(
        default={},
        description="Settings defining access control to the jupyter server.",
    )
    culling: Culling = Field(
        default={}, description="Options about culling idle servers"
    )
    jupyterServer: JupyterServer = Field(
        default={},
        description="Configuration options (such as image to run) for the Jupyter server. See also https://jupyter-server.readthedocs.io/en/latest/other/full-config.html",
    )
    patches: Sequence[Patch] = Field(
        default=[],
        description="Patches to be applied to the created child resources after template rendering. Currently json patches and json merge patches are supported.",
    )
    routing: Routing = Field(
        default={},
        description="Settings related to how the jupyter server will be exposed outside of the cluster.",
    )
    storage: Storage = Field(
        default={}, description="Settings to define storage to back the jupyter server."
    )


class Model(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    spec: Optional[Spec] = Field(
        default=None,
        description="User defined specification for a JupyterServer custom resource.",
    )
    status: Mapping[str, Any] = Field(
        default={"children": {}, "mainPod": {}},
        description="A field for Jupyter Server status information, do not modify.",
    )
