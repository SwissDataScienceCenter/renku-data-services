# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2024-08-21T07:51:51+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import ConfigDict, Field
from renku_data_services.notebooks.cr_base import BaseCRD


class ExtraVolumeMount(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        default=None,
        description="mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.",
    )
    name: str = Field(..., description="This must match the Name of a Volume.")
    readOnly: Optional[bool] = Field(
        default=None,
        description="Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.",
    )
    subPath: Optional[str] = Field(
        default=None,
        description="Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).",
    )
    subPathExpr: Optional[str] = Field(
        default=None,
        description="Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.",
    )


class SecretRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str
    name: str


class Type(Enum):
    token = "token"
    oauth2proxy = "oauth2proxy"


class Authentication(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    enabled: bool = True
    extraVolumeMounts: Optional[List[ExtraVolumeMount]] = Field(
        default=None,
        description="Additional volume mounts for the authentication container.",
    )
    secretRef: SecretRef = Field(
        ...,
        description="Kubernetes secret that contains the authentication configuration\nFor `token` a yaml file with the following keys is required:\n  - token: the token value used to authenticate the user\n  - cookie_key: the name of the cookie where the token will be saved and searched for\nFor `oauth2proxy` please see https://oauth2-proxy.github.io/oauth2-proxy/configuration/overview#config-file.\nNote that the `upstream` and `http_address` configuration options cannot be set from the secret because\nthe operator knows how to set these options to the proper values.",
    )
    type: Type


class CloningGitConfigSecretRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str
    name: str


class GitConfigSecretRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str
    name: str


class Type1(Enum):
    git = "git"


class CodeRepository(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    clonePath: str = Field(
        default=".",
        description="Path relative to the session working directory where the repository should be cloned into.",
        example="repositories/project1",
    )
    cloningGitConfigSecretRef: Optional[CloningGitConfigSecretRef] = Field(
        default=None,
        description="The Kubernetes secret that contains the code repository configuration to be used during cloning.\nFor 'git' this is the git configuration which can be used to inject credentials in addition to any other repo-specific Git configuration.\nNOTE: you have to specify the whole config in a single key in the secret.",
    )
    gitConfigSecretRef: Optional[GitConfigSecretRef] = Field(
        default=None,
        description="The Kubernetes secret that contains the code repository configuration to be used when the session is running.\nFor 'git' this is the git configuration which can be used to inject credentials in addition to any other repo-specific Git configuration.\nNOTE: you have to specify the whole config in a single key in the secret.",
    )
    remote: str = Field(
        ...,
        description="The HTTP url to the code repository",
        example="https://github.com/SwissDataScienceCenter/renku",
    )
    revision: Optional[str] = Field(
        default=None,
        description="The tag, branch or commit SHA to checkout, if omitted then will be the tip of the default branch of the repo",
        example="main",
    )
    type: Type1 = Field(
        default="git",
        description="The type of the code repository - currently the only supported kind is git.",
    )


class Culling(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    maxAge: Optional[str] = Field(
        default=None,
        description='The maximum allowed age for a session, regardless of whether it\nis active or not. When the threshold is reached the session is hibernated.\nA value of zero indicates that Amalthea will not automatically hibernate\nthe session based on its age.\nGolang\'s time.ParseDuration is used to parse this, so values like 2h5min will work,\nvalid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".',
    )
    maxFailedDuration: Optional[str] = Field(
        default=None,
        description='How long can a server be in failed state before it gets hibernated. A\nvalue of zero indicates that the server will not be automatically\nhibernated by Amalthea if it is failing.\nGolang\'s time.ParseDuration is used to parse this, so values like 2h5min will work,\nvalid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".',
    )
    maxHibernatedDuration: Optional[str] = Field(
        default=None,
        description='How long can a session be in hibernated state before\nit gets completely deleted. A value of zero indicates that hibernated servers\nwill not be automatically be deleted by Amalthea after a period of time.\nGolang\'s time.ParseDuration is used to parse this, so values like 2h5min will work,\nvalid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".',
    )
    maxIdleDuration: Optional[str] = Field(
        default=None,
        description='How long should a server be idle for before it is hibernated. A value of\nzero indicates that Amalthea will not automatically hibernate inactive sessions.\nGolang\'s time.ParseDuration is used to parse this, so values like 2h5min will work,\nvalid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".',
    )
    maxStartingDuration: Optional[str] = Field(
        default=None,
        description='How long can a server be in starting state before it gets hibernated. A\nvalue of zero indicates that the server will not be automatically hibernated\nby Amalthea because it took to long to start.\nGolang\'s time.ParseDuration is used to parse this, so values like 2h5min will work,\nvalid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".',
    )


class Type2(Enum):
    rclone = "rclone"


class DataSource(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    mountPath: str = Field(
        default="data",
        description="Path relative to the session working directory where the data should be mounted",
        example="data/storages",
    )
    secretRef: Optional[SecretRef] = Field(
        default=None,
        description="The secret containing the configuration or credentials needed for access to the data.\nThe format of the configuration that is expected depends on the storage type.\nNOTE: define all values in a single key of the Kubernetes secret.\nrclone: any valid rclone configuration for a single remote, see the output of `rclone config providers` for validation and format.",
    )
    type: Type2 = Field(default="rclone", description="The data source type")


class ConfigMapKeyRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(..., description="The key to select.")
    name: Optional[str] = Field(
        default=None,
        description="Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="Specify whether the ConfigMap or its key must be defined",
    )


class FieldRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    apiVersion: Optional[str] = Field(
        default=None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description="Path of the field to select in the specified API version."
    )


class ResourceFieldRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    containerName: Optional[str] = Field(
        default=None,
        description="Container name: required for volumes, optional for env vars",
    )
    divisor: Optional[Union[int, str]] = Field(
        default=None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description="Required: resource to select")


class SecretKeyRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(
        ...,
        description="The key of the secret to select from.  Must be a valid secret key.",
    )
    name: Optional[str] = Field(
        default=None,
        description="Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="Specify whether the Secret or its key must be defined",
    )


class ValueFrom(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    configMapKeyRef: Optional[ConfigMapKeyRef] = Field(
        default=None, description="Selects a key of a ConfigMap."
    )
    fieldRef: Optional[FieldRef] = Field(
        default=None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        default=None,
        description="Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItem(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: str = Field(
        ..., description="Name of the environment variable. Must be a C_IDENTIFIER."
    )
    value: Optional[str] = Field(
        default=None,
        description='Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to "".',
    )
    valueFrom: Optional[ValueFrom] = Field(
        default=None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class ConfigMapRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: Optional[str] = Field(
        default=None,
        description="Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
    )
    optional: Optional[bool] = Field(
        default=None, description="Specify whether the ConfigMap must be defined"
    )


class SecretRef2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: Optional[str] = Field(
        default=None,
        description="Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
    )
    optional: Optional[bool] = Field(
        default=None, description="Specify whether the Secret must be defined"
    )


class EnvFromItem(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    configMapRef: Optional[ConfigMapRef] = Field(
        default=None, description="The ConfigMap to select from"
    )
    prefix: Optional[str] = Field(
        default=None,
        description="An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
    )
    secretRef: Optional[SecretRef2] = Field(
        default=None, description="The Secret to select from"
    )


class Exec(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    command: Optional[List[str]] = Field(
        default=None,
        description="Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeader(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: str = Field(
        ...,
        description="The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.",
    )
    value: str = Field(..., description="The header field value")


class HttpGet(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    host: Optional[str] = Field(
        default=None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set\n"Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeader]] = Field(
        default=None,
        description="Custom headers to set in the request. HTTP allows repeated headers.",
    )
    path: Optional[str] = Field(
        default=None, description="Path to access on the HTTP server."
    )
    port: Union[int, str] = Field(
        ...,
        description="Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
    )
    scheme: Optional[str] = Field(
        default=None,
        description="Scheme to use for connecting to the host.\nDefaults to HTTP.",
    )


class TcpSocket(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    host: Optional[str] = Field(
        default=None,
        description="Optional: Host name to connect to, defaults to the pod IP.",
    )
    port: Union[int, str] = Field(
        ...,
        description="Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
    )


class PostStart(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    exec: Optional[Exec] = Field(
        default=None, description="Exec specifies the action to take."
    )
    httpGet: Optional[HttpGet] = Field(
        default=None, description="HTTPGet specifies the http request to perform."
    )
    tcpSocket: Optional[TcpSocket] = Field(
        default=None,
        description="Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor the backward compatibility. There are no validation of this field and\nlifecycle hooks will fail in runtime when tcp handler is specified.",
    )


class HttpGet1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    host: Optional[str] = Field(
        default=None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set\n"Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeader]] = Field(
        default=None,
        description="Custom headers to set in the request. HTTP allows repeated headers.",
    )
    path: Optional[str] = Field(
        default=None, description="Path to access on the HTTP server."
    )
    port: Union[int, str] = Field(
        ...,
        description="Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
    )
    scheme: Optional[str] = Field(
        default=None,
        description="Scheme to use for connecting to the host.\nDefaults to HTTP.",
    )


class PreStop(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    exec: Optional[Exec] = Field(
        default=None, description="Exec specifies the action to take."
    )
    httpGet: Optional[HttpGet1] = Field(
        default=None, description="HTTPGet specifies the http request to perform."
    )
    tcpSocket: Optional[TcpSocket] = Field(
        default=None,
        description="Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor the backward compatibility. There are no validation of this field and\nlifecycle hooks will fail in runtime when tcp handler is specified.",
    )


class Lifecycle(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    postStart: Optional[PostStart] = Field(
        default=None,
        description="PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    )
    preStop: Optional[PreStop] = Field(
        default=None,
        description="PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    )


class Grpc(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    port: int = Field(
        ...,
        description="Port number of the gRPC service. Number must be in the range 1 to 65535.",
    )
    service: Optional[str] = Field(
        default=None,
        description="Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\n\nIf this is not specified, the default behavior is defined by gRPC.",
    )


class HttpGet2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    host: Optional[str] = Field(
        default=None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set\n"Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeader]] = Field(
        default=None,
        description="Custom headers to set in the request. HTTP allows repeated headers.",
    )
    path: Optional[str] = Field(
        default=None, description="Path to access on the HTTP server."
    )
    port: Union[int, str] = Field(
        ...,
        description="Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
    )
    scheme: Optional[str] = Field(
        default=None,
        description="Scheme to use for connecting to the host.\nDefaults to HTTP.",
    )


class LivenessProbe(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    exec: Optional[Exec] = Field(
        default=None, description="Exec specifies the action to take."
    )
    failureThreshold: Optional[int] = Field(
        default=None,
        description="Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
    )
    grpc: Optional[Grpc] = Field(
        default=None, description="GRPC specifies an action involving a GRPC port."
    )
    httpGet: Optional[HttpGet2] = Field(
        default=None, description="HTTPGet specifies the http request to perform."
    )
    initialDelaySeconds: Optional[int] = Field(
        default=None,
        description="Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    periodSeconds: Optional[int] = Field(
        default=None,
        description="How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
    )
    successThreshold: Optional[int] = Field(
        default=None,
        description="Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
    )
    tcpSocket: Optional[TcpSocket] = Field(
        default=None, description="TCPSocket specifies an action involving a TCP port."
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        default=None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        default=None,
        description="Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )


class Port(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    containerPort: int = Field(
        ...,
        description="Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 < x < 65536.",
    )
    hostIP: Optional[str] = Field(
        default=None, description="What host IP to bind the external port to."
    )
    hostPort: Optional[int] = Field(
        default=None,
        description="Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 < x < 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.",
    )
    name: Optional[str] = Field(
        default=None,
        description="If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.",
    )
    protocol: str = Field(
        default="TCP",
        description='Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to "TCP".',
    )


class HttpGet3(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    host: Optional[str] = Field(
        default=None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set\n"Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeader]] = Field(
        default=None,
        description="Custom headers to set in the request. HTTP allows repeated headers.",
    )
    path: Optional[str] = Field(
        default=None, description="Path to access on the HTTP server."
    )
    port: Union[int, str] = Field(
        ...,
        description="Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
    )
    scheme: Optional[str] = Field(
        default=None,
        description="Scheme to use for connecting to the host.\nDefaults to HTTP.",
    )


class ReadinessProbe(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    exec: Optional[Exec] = Field(
        default=None, description="Exec specifies the action to take."
    )
    failureThreshold: Optional[int] = Field(
        default=None,
        description="Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
    )
    grpc: Optional[Grpc] = Field(
        default=None, description="GRPC specifies an action involving a GRPC port."
    )
    httpGet: Optional[HttpGet3] = Field(
        default=None, description="HTTPGet specifies the http request to perform."
    )
    initialDelaySeconds: Optional[int] = Field(
        default=None,
        description="Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    periodSeconds: Optional[int] = Field(
        default=None,
        description="How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
    )
    successThreshold: Optional[int] = Field(
        default=None,
        description="Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
    )
    tcpSocket: Optional[TcpSocket] = Field(
        default=None, description="TCPSocket specifies an action involving a TCP port."
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        default=None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        default=None,
        description="Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )


class ResizePolicyItem(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    resourceName: str = Field(
        ...,
        description="Name of the resource to which this resource resize policy applies.\nSupported values: cpu, memory.",
    )
    restartPolicy: str = Field(
        ...,
        description="Restart policy to apply when specified resource is resized.\nIf not specified, it defaults to NotRequired.",
    )


class Claim(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: str = Field(
        ...,
        description="Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
    )


class Resources(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    claims: Optional[List[Claim]] = Field(
        default=None,
        description="Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
    )
    limits: Optional[Dict[str, Union[int, str]]] = Field(
        default=None,
        description="Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    )
    requests: Optional[Dict[str, Union[int, str]]] = Field(
        default=None,
        description="Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    )


class Capabilities(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    add: Optional[List[str]] = Field(default=None, description="Added capabilities")
    drop: Optional[List[str]] = Field(default=None, description="Removed capabilities")


class SeLinuxOptions(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    level: Optional[str] = Field(
        default=None,
        description="Level is SELinux level label that applies to the container.",
    )
    role: Optional[str] = Field(
        default=None,
        description="Role is a SELinux role label that applies to the container.",
    )
    type: Optional[str] = Field(
        default=None,
        description="Type is a SELinux type label that applies to the container.",
    )
    user: Optional[str] = Field(
        default=None,
        description="User is a SELinux user label that applies to the container.",
    )


class SeccompProfile(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    localhostProfile: Optional[str] = Field(
        default=None,
        description='localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet\'s configured seccomp profile location.\nMust be set if type is "Localhost". Must NOT be set for any other type.',
    )
    type: str = Field(
        ...,
        description="type indicates which kind of seccomp profile will be applied.\nValid options are:\n\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.",
    )


class WindowsOptions(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    gmsaCredentialSpec: Optional[str] = Field(
        default=None,
        description="GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.",
    )
    gmsaCredentialSpecName: Optional[str] = Field(
        default=None,
        description="GMSACredentialSpecName is the name of the GMSA credential spec to use.",
    )
    hostProcess: Optional[bool] = Field(
        default=None,
        description="HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.",
    )
    runAsUserName: Optional[str] = Field(
        default=None,
        description="The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.",
    )


class SecurityContext(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    allowPrivilegeEscalation: Optional[bool] = Field(
        default=None,
        description="AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.",
    )
    capabilities: Optional[Capabilities] = Field(
        default=None,
        description="The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    privileged: Optional[bool] = Field(
        default=None,
        description="Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    procMount: Optional[str] = Field(
        default=None,
        description="procMount denotes the type of proc mount to use for the containers.\nThe default is DefaultProcMount which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    readOnlyRootFilesystem: Optional[bool] = Field(
        default=None,
        description="Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    runAsGroup: Optional[int] = Field(
        default=None,
        description="The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    runAsNonRoot: Optional[bool] = Field(
        default=None,
        description="Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.",
    )
    runAsUser: Optional[int] = Field(
        default=None,
        description="The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    seLinuxOptions: Optional[SeLinuxOptions] = Field(
        default=None,
        description="The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    seccompProfile: Optional[SeccompProfile] = Field(
        default=None,
        description="The seccomp options to use by this container. If seccomp options are\nprovided at both the pod & container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    windowsOptions: Optional[WindowsOptions] = Field(
        default=None,
        description="The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.",
    )


class HttpGet4(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    host: Optional[str] = Field(
        default=None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set\n"Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeader]] = Field(
        default=None,
        description="Custom headers to set in the request. HTTP allows repeated headers.",
    )
    path: Optional[str] = Field(
        default=None, description="Path to access on the HTTP server."
    )
    port: Union[int, str] = Field(
        ...,
        description="Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
    )
    scheme: Optional[str] = Field(
        default=None,
        description="Scheme to use for connecting to the host.\nDefaults to HTTP.",
    )


class StartupProbe(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    exec: Optional[Exec] = Field(
        default=None, description="Exec specifies the action to take."
    )
    failureThreshold: Optional[int] = Field(
        default=None,
        description="Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
    )
    grpc: Optional[Grpc] = Field(
        default=None, description="GRPC specifies an action involving a GRPC port."
    )
    httpGet: Optional[HttpGet4] = Field(
        default=None, description="HTTPGet specifies the http request to perform."
    )
    initialDelaySeconds: Optional[int] = Field(
        default=None,
        description="Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    periodSeconds: Optional[int] = Field(
        default=None,
        description="How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
    )
    successThreshold: Optional[int] = Field(
        default=None,
        description="Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
    )
    tcpSocket: Optional[TcpSocket] = Field(
        default=None, description="TCPSocket specifies an action involving a TCP port."
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        default=None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        default=None,
        description="Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )


class VolumeDevice(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    devicePath: str = Field(
        ...,
        description="devicePath is the path inside of the container that the device will be mapped to.",
    )
    name: str = Field(
        ...,
        description="name must match the name of a persistentVolumeClaim in the pod",
    )


class VolumeMount(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        default=None,
        description="mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.",
    )
    name: str = Field(..., description="This must match the Name of a Volume.")
    readOnly: Optional[bool] = Field(
        default=None,
        description="Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.",
    )
    subPath: Optional[str] = Field(
        default=None,
        description="Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).",
    )
    subPathExpr: Optional[str] = Field(
        default=None,
        description="Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.",
    )


class ExtraContainer(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    args: Optional[List[str]] = Field(
        default=None,
        description='Arguments to the entrypoint.\nThe container image\'s CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container\'s environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will\nproduce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    command: Optional[List[str]] = Field(
        default=None,
        description='Entrypoint array. Not executed within a shell.\nThe container image\'s ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container\'s environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will\nproduce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    env: Optional[List[EnvItem]] = Field(
        default=None,
        description="List of environment variables to set in the container.\nCannot be updated.",
    )
    envFrom: Optional[List[EnvFromItem]] = Field(
        default=None,
        description="List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.",
    )
    image: Optional[str] = Field(
        default=None,
        description="Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.",
    )
    imagePullPolicy: Optional[str] = Field(
        default=None,
        description="Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
    )
    lifecycle: Optional[Lifecycle] = Field(
        default=None,
        description="Actions that the management system should take in response to container lifecycle events.\nCannot be updated.",
    )
    livenessProbe: Optional[LivenessProbe] = Field(
        default=None,
        description="Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    name: str = Field(
        ...,
        description="Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.",
    )
    ports: Optional[List[Port]] = Field(
        default=None,
        description='List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default "0.0.0.0" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.',
    )
    readinessProbe: Optional[ReadinessProbe] = Field(
        default=None,
        description="Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    resizePolicy: Optional[List[ResizePolicyItem]] = Field(
        default=None, description="Resources resize policy for the container."
    )
    resources: Optional[Resources] = Field(
        default=None,
        description="Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    )
    restartPolicy: Optional[str] = Field(
        default=None,
        description='RestartPolicy defines the restart behavior of individual containers in a pod.\nThis field may only be set for init containers, and the only allowed value is "Always".\nFor non-init containers or when this field is not specified,\nthe restart behavior is defined by the Pod\'s restart policy and the container type.\nSetting the RestartPolicy as "Always" for the init container will have the following effect:\nthis init container will be continually restarted on\nexit until all regular containers have terminated. Once all regular\ncontainers have completed, all init containers with restartPolicy "Always"\nwill be shut down. This lifecycle differs from normal init containers and\nis often referred to as a "sidecar" container. Although this init\ncontainer still starts in the init container sequence, it does not wait\nfor the container to complete before proceeding to the next init\ncontainer. Instead, the next init container starts immediately after this\ninit container is started, or after any startupProbe has successfully\ncompleted.',
    )
    securityContext: Optional[SecurityContext] = Field(
        default=None,
        description="SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    )
    startupProbe: Optional[StartupProbe] = Field(
        default=None,
        description="StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    stdin: Optional[bool] = Field(
        default=None,
        description="Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.",
    )
    stdinOnce: Optional[bool] = Field(
        default=None,
        description="Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false",
    )
    terminationMessagePath: Optional[str] = Field(
        default=None,
        description="Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.",
    )
    terminationMessagePolicy: Optional[str] = Field(
        default=None,
        description="Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.",
    )
    tty: Optional[bool] = Field(
        default=None,
        description="Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.",
    )
    volumeDevices: Optional[List[VolumeDevice]] = Field(
        default=None,
        description="volumeDevices is the list of block devices to be used by the container.",
    )
    volumeMounts: Optional[List[VolumeMount]] = Field(
        default=None,
        description="Pod volumes to mount into the container's filesystem.\nCannot be updated.",
    )
    workingDir: Optional[str] = Field(
        default=None,
        description="Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.",
    )


class AwsElasticBlockStore(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\nTODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    partition: Optional[int] = Field(
        default=None,
        description='partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as "1".\nSimilarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).',
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly value true will force the readOnly setting in VolumeMounts.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    )
    volumeID: str = Field(
        ...,
        description="volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    )


class AzureDisk(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    cachingMode: Optional[str] = Field(
        default=None,
        description="cachingMode is the Host Caching mode: None, Read Only, Read Write.",
    )
    diskName: str = Field(
        ..., description="diskName is the Name of the data disk in the blob storage"
    )
    diskURI: str = Field(
        ..., description="diskURI is the URI of data disk in the blob storage"
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    kind: Optional[str] = Field(
        default=None,
        description="kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )


class AzureFile(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    secretName: str = Field(
        ...,
        description="secretName is the  name of secret that contains Azure Storage Account Name and Key",
    )
    shareName: str = Field(..., description="shareName is the azure share Name")


class SecretRef3(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: Optional[str] = Field(
        default=None,
        description="Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
    )


class Cephfs(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    monitors: List[str] = Field(
        ...,
        description="monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    path: Optional[str] = Field(
        default=None,
        description="path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    secretFile: Optional[str] = Field(
        default=None,
        description="secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    secretRef: Optional[SecretRef3] = Field(
        default=None,
        description="secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )
    user: Optional[str] = Field(
        default=None,
        description="user is optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
    )


class Cinder(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
    )
    secretRef: Optional[SecretRef3] = Field(
        default=None,
        description="secretRef is optional: points to a secret object containing parameters used to connect\nto OpenStack.",
    )
    volumeID: str = Field(
        ...,
        description="volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
    )


class Item(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(..., description="key is the key to project.")
    mode: Optional[int] = Field(
        default=None,
        description="mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.",
    )


class ConfigMap(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="defaultMode is optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    items: Optional[List[Item]] = Field(
        default=None,
        description="items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        default=None,
        description="Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional specify whether the ConfigMap or its keys must be defined",
    )


class NodePublishSecretRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: Optional[str] = Field(
        default=None,
        description="Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
    )


class Csi(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    driver: str = Field(
        ...,
        description="driver is the name of the CSI driver that handles this volume.\nConsult with your admin for the correct name as registered in the cluster.",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType to mount. Ex. "ext4", "xfs", "ntfs".\nIf not provided, the empty value is passed to the associated CSI driver\nwhich will determine the default filesystem to apply.',
    )
    nodePublishSecretRef: Optional[NodePublishSecretRef] = Field(
        default=None,
        description="nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and  may be empty if no secret is required. If the\nsecret object contains more than one secret, all secret references are passed.",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly specifies a read-only configuration for the volume.\nDefaults to false (read/write).",
    )
    volumeAttributes: Optional[Dict[str, str]] = Field(
        default=None,
        description="volumeAttributes stores driver-specific properties that are passed to the CSI\ndriver. Consult your driver's documentation for supported values.",
    )


class Item1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fieldRef: Optional[FieldRef] = Field(
        default=None,
        description="Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
    )
    mode: Optional[int] = Field(
        default=None,
        description="Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        default=None,
        description="Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
    )


class DownwardAPI(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="Optional: mode bits to use on created files by default. Must be a\nOptional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    items: Optional[List[Item1]] = Field(
        default=None, description="Items is a list of downward API volume file"
    )


class EmptyDir(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    medium: Optional[str] = Field(
        default=None,
        description='medium represents what type of storage medium should back this directory.\nThe default is "" which means to use the node\'s default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
    )
    sizeLimit: Optional[Union[int, str]] = Field(
        default=None,
        description="sizeLimit is the total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value between\nthe SizeLimit specified here and the sum of memory limits of all containers in a pod.\nThe default is nil which means that the limit is undefined.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    )


class DataSource1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    apiGroup: Optional[str] = Field(
        default=None,
        description="APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
    )
    kind: str = Field(..., description="Kind is the type of resource being referenced")
    name: str = Field(..., description="Name is the name of resource being referenced")


class DataSourceRef(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    apiGroup: Optional[str] = Field(
        default=None,
        description="APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
    )
    kind: str = Field(..., description="Kind is the type of resource being referenced")
    name: str = Field(..., description="Name is the name of resource being referenced")
    namespace: Optional[str] = Field(
        default=None,
        description="Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
    )


class Resources1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    claims: Optional[List[Claim]] = Field(
        default=None,
        description="Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
    )
    limits: Optional[Dict[str, Union[int, str]]] = Field(
        default=None,
        description="Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    )
    requests: Optional[Dict[str, Union[int, str]]] = Field(
        default=None,
        description="Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    )


class MatchExpression(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(
        ..., description="key is the label key that the selector applies to."
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        default=None,
        description="values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
    )


class Selector(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    matchExpressions: Optional[List[MatchExpression]] = Field(
        default=None,
        description="matchExpressions is a list of label selector requirements. The requirements are ANDed.",
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        default=None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is "key", the\noperator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class Spec1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    accessModes: Optional[List[str]] = Field(
        default=None,
        description="accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
    )
    dataSource: Optional[DataSource1] = Field(
        default=None,
        description="dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.",
    )
    dataSourceRef: Optional[DataSourceRef] = Field(
        default=None,
        description="dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
    )
    resources: Optional[Resources1] = Field(
        default=None,
        description="resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
    )
    selector: Optional[Selector] = Field(
        default=None,
        description="selector is a label query over volumes to consider for binding.",
    )
    storageClassName: Optional[str] = Field(
        default=None,
        description="storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
    )
    volumeMode: Optional[str] = Field(
        default=None,
        description="volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.",
    )
    volumeName: Optional[str] = Field(
        default=None,
        description="volumeName is the binding reference to the PersistentVolume backing this claim.",
    )


class VolumeClaimTemplate(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    metadata: Optional[Dict[str, Any]] = Field(
        default=None,
        description="May contain labels and annotations that will be copied into the PVC\nwhen creating it. No other fields are allowed and will be rejected during\nvalidation.",
    )
    spec: Spec1 = Field(
        ...,
        description="The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here.",
    )


class Ephemeral(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    volumeClaimTemplate: Optional[VolumeClaimTemplate] = Field(
        default=None,
        description="Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be `<pod name>-<volume name>` where\n`<volume name>` is the name from the `PodSpec.Volumes` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\n\nRequired, must not be nil.",
    )


class Fc(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nTODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    lun: Optional[int] = Field(
        default=None, description="lun is Optional: FC target lun number"
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    targetWWNs: Optional[List[str]] = Field(
        default=None,
        description="targetWWNs is Optional: FC target worldwide names (WWNs)",
    )
    wwids: Optional[List[str]] = Field(
        default=None,
        description="wwids Optional: FC volume world wide identifiers (wwids)\nEither wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
    )


class FlexVolume(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    driver: str = Field(
        ..., description="driver is the name of the driver to use for this volume."
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
    )
    options: Optional[Dict[str, str]] = Field(
        default=None,
        description="options is Optional: this field holds extra command options if any.",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    secretRef: Optional[SecretRef3] = Field(
        default=None,
        description="secretRef is Optional: secretRef is reference to the secret object containing\nsensitive information to pass to the plugin scripts. This may be\nempty if no secret object is specified. If the secret object\ncontains more than one secret, all secrets are passed to the plugin\nscripts.",
    )


class Flocker(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    datasetName: Optional[str] = Field(
        default=None,
        description="datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker\nshould be considered as deprecated",
    )
    datasetUUID: Optional[str] = Field(
        default=None,
        description="datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset",
    )


class GcePersistentDisk(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\nTODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    partition: Optional[int] = Field(
        default=None,
        description='partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as "1".\nSimilarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )
    pdName: str = Field(
        ...,
        description="pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    )


class GitRepo(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    directory: Optional[str] = Field(
        default=None,
        description="directory is the target directory name.\nMust not contain or start with '..'.  If '.' is supplied, the volume directory will be the\ngit repository.  Otherwise, if specified, the volume will contain the git repository in\nthe subdirectory with the given name.",
    )
    repository: str = Field(..., description="repository is the URL")
    revision: Optional[str] = Field(
        default=None,
        description="revision is the commit hash for the specified revision.",
    )


class Glusterfs(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    endpoints: str = Field(
        ...,
        description="endpoints is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    )
    path: str = Field(
        ...,
        description="path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
    )


class HostPath(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    path: str = Field(
        ...,
        description="path of the directory on the host.\nIf the path is a symlink, it will follow the link to the real path.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
    )
    type: Optional[str] = Field(
        default=None,
        description='type for HostPath Volume\nDefaults to ""\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
    )


class Iscsi(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    chapAuthDiscovery: Optional[bool] = Field(
        default=None,
        description="chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
    )
    chapAuthSession: Optional[bool] = Field(
        default=None,
        description="chapAuthSession defines whether support iSCSI Session CHAP authentication",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\nTODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    initiatorName: Optional[str] = Field(
        default=None,
        description="initiatorName is the custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n<target portal>:<volume name> will be created for the connection.",
    )
    iqn: str = Field(..., description="iqn is the target iSCSI Qualified Name.")
    iscsiInterface: Optional[str] = Field(
        default=None,
        description="iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).",
    )
    lun: int = Field(..., description="lun represents iSCSI Target Lun number.")
    portals: Optional[List[str]] = Field(
        default=None,
        description="portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.",
    )
    secretRef: Optional[SecretRef3] = Field(
        default=None,
        description="secretRef is the CHAP Secret for iSCSI target and initiator authentication",
    )
    targetPortal: str = Field(
        ...,
        description="targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).",
    )


class Nfs(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    path: str = Field(
        ...,
        description="path that is exported by the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the NFS export to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    )
    server: str = Field(
        ...,
        description="server is the hostname or IP address of the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    )


class PersistentVolumeClaim(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    claimName: str = Field(
        ...,
        description="claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly Will force the ReadOnly setting in VolumeMounts.\nDefault false.",
    )


class PhotonPersistentDisk(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    pdID: str = Field(
        ...,
        description="pdID is the ID that identifies Photon Controller persistent disk",
    )


class PortworxVolume(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fSType represents the filesystem type to mount\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    volumeID: str = Field(
        ..., description="volumeID uniquely identifies a Portworx volume"
    )


class Item2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(..., description="key is the key to project.")
    mode: Optional[int] = Field(
        default=None,
        description="mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.",
    )


class ConfigMap1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    items: Optional[List[Item2]] = Field(
        default=None,
        description="items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        default=None,
        description="Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional specify whether the ConfigMap or its keys must be defined",
    )


class Item3(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fieldRef: Optional[FieldRef] = Field(
        default=None,
        description="Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
    )
    mode: Optional[int] = Field(
        default=None,
        description="Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        default=None,
        description="Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
    )


class DownwardAPI1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    items: Optional[List[Item3]] = Field(
        default=None, description="Items is a list of DownwardAPIVolume file"
    )


class Item4(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    key: str = Field(..., description="key is the key to project.")
    mode: Optional[int] = Field(
        default=None,
        description="mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.",
    )


class Secret(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    items: Optional[List[Item4]] = Field(
        default=None,
        description="items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        default=None,
        description="Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional field specify whether the Secret or its key must be defined",
    )


class ServiceAccountToken(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    audience: Optional[str] = Field(
        default=None,
        description="audience is the intended audience of the token. A recipient of a token\nmust identify itself with an identifier specified in the audience of the\ntoken, and otherwise should reject the token. The audience defaults to the\nidentifier of the apiserver.",
    )
    expirationSeconds: Optional[int] = Field(
        default=None,
        description="expirationSeconds is the requested duration of validity of the service\naccount token. As the token approaches expiration, the kubelet volume\nplugin will proactively rotate the service account token. The kubelet will\nstart trying to rotate the token if the token is older than 80 percent of\nits time to live or if the token is older than 24 hours.Defaults to 1 hour\nand must be at least 10 minutes.",
    )
    path: str = Field(
        ...,
        description="path is the path relative to the mount point of the file to project the\ntoken into.",
    )


class Source(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    configMap: Optional[ConfigMap1] = Field(
        default=None,
        description="configMap information about the configMap data to project",
    )
    downwardAPI: Optional[DownwardAPI1] = Field(
        default=None,
        description="downwardAPI information about the downwardAPI data to project",
    )
    secret: Optional[Secret] = Field(
        default=None, description="secret information about the secret data to project"
    )
    serviceAccountToken: Optional[ServiceAccountToken] = Field(
        default=None,
        description="serviceAccountToken is information about the serviceAccountToken data to project",
    )


class Projected(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="defaultMode are the mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    sources: Optional[List[Source]] = Field(
        default=None, description="sources is the list of volume projections"
    )


class Quobyte(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    group: Optional[str] = Field(
        default=None, description="group to map volume access to\nDefault is no group"
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the Quobyte volume to be mounted with read-only permissions.\nDefaults to false.",
    )
    registry: str = Field(
        ...,
        description="registry represents a single or multiple Quobyte Registry services\nspecified as a string as host:port pair (multiple entries are separated with commas)\nwhich acts as the central registry for volumes",
    )
    tenant: Optional[str] = Field(
        default=None,
        description="tenant owning the given Quobyte volume in the Backend\nUsed with dynamically provisioned Quobyte volumes, value is set by the plugin",
    )
    user: Optional[str] = Field(
        default=None,
        description="user to map volume access to\nDefaults to serivceaccount user",
    )
    volume: str = Field(
        ...,
        description="volume is a string that references an already created Quobyte volume by name.",
    )


class Rbd(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\nTODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    image: str = Field(
        ...,
        description="image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    keyring: Optional[str] = Field(
        default=None,
        description="keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    monitors: List[str] = Field(
        ...,
        description="monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    pool: Optional[str] = Field(
        default=None,
        description="pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    secretRef: Optional[SecretRef3] = Field(
        default=None,
        description="secretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )
    user: Optional[str] = Field(
        default=None,
        description="user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
    )


class ScaleIO(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs".\nDefault is "xfs".',
    )
    gateway: str = Field(
        ..., description="gateway is the host address of the ScaleIO API Gateway."
    )
    protectionDomain: Optional[str] = Field(
        default=None,
        description="protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    secretRef: SecretRef3 = Field(
        ...,
        description="secretRef references to the secret for ScaleIO user and other\nsensitive information. If this is not provided, Login operation will fail.",
    )
    sslEnabled: Optional[bool] = Field(
        default=None,
        description="sslEnabled Flag enable/disable SSL communication with Gateway, default false",
    )
    storageMode: Optional[str] = Field(
        default=None,
        description="storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.",
    )
    storagePool: Optional[str] = Field(
        default=None,
        description="storagePool is the ScaleIO Storage Pool associated with the protection domain.",
    )
    system: str = Field(
        ...,
        description="system is the name of the storage system as configured in ScaleIO.",
    )
    volumeName: Optional[str] = Field(
        default=None,
        description="volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source.",
    )


class Secret1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description="defaultMode is Optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values\nfor mode bits. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.",
    )
    items: Optional[List[Item4]] = Field(
        default=None,
        description="items If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.",
    )
    optional: Optional[bool] = Field(
        default=None,
        description="optional field specify whether the Secret or its keys must be defined",
    )
    secretName: Optional[str] = Field(
        default=None,
        description="secretName is the name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
    )


class Storageos(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        default=None,
        description="readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.",
    )
    secretRef: Optional[SecretRef3] = Field(
        default=None,
        description="secretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.  If not specified, default values will be attempted.",
    )
    volumeName: Optional[str] = Field(
        default=None,
        description="volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace.",
    )
    volumeNamespace: Optional[str] = Field(
        default=None,
        description='volumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod\'s namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to "default" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.',
    )


class VsphereVolume(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    fsType: Optional[str] = Field(
        default=None,
        description='fsType is filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    storagePolicyID: Optional[str] = Field(
        default=None,
        description="storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
    )
    storagePolicyName: Optional[str] = Field(
        default=None,
        description="storagePolicyName is the storage Policy Based Management (SPBM) profile name.",
    )
    volumePath: str = Field(
        ..., description="volumePath is the path that identifies vSphere volume vmdk"
    )


class ExtraVolume(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    awsElasticBlockStore: Optional[AwsElasticBlockStore] = Field(
        default=None,
        description="awsElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    )
    azureDisk: Optional[AzureDisk] = Field(
        default=None,
        description="azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
    )
    azureFile: Optional[AzureFile] = Field(
        default=None,
        description="azureFile represents an Azure File Service mount on the host and bind mount to the pod.",
    )
    cephfs: Optional[Cephfs] = Field(
        default=None,
        description="cephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
    )
    cinder: Optional[Cinder] = Field(
        default=None,
        description="cinder represents a cinder volume attached and mounted on kubelets host machine.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
    )
    configMap: Optional[ConfigMap] = Field(
        default=None,
        description="configMap represents a configMap that should populate this volume",
    )
    csi: Optional[Csi] = Field(
        default=None,
        description="csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).",
    )
    downwardAPI: Optional[DownwardAPI] = Field(
        default=None,
        description="downwardAPI represents downward API about the pod that should populate this volume",
    )
    emptyDir: Optional[EmptyDir] = Field(
        default=None,
        description="emptyDir represents a temporary directory that shares a pod's lifetime.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    )
    ephemeral: Optional[Ephemeral] = Field(
        default=None,
        description="ephemeral represents a volume that is handled by a cluster storage driver.\nThe volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,\nand deleted when the pod is removed.\n\n\nUse this if:\na) the volume is only needed while the pod runs,\nb) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and\nd) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\n\nUse PersistentVolumeClaim or one of the vendor-specific\nAPIs for volumes that persist for longer than the lifecycle\nof an individual pod.\n\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to\nbe used that way - see the documentation of the driver for\nmore information.\n\n\nA pod can use both types of ephemeral volumes and\npersistent volumes at the same time.",
    )
    fc: Optional[Fc] = Field(
        default=None,
        description="fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
    )
    flexVolume: Optional[FlexVolume] = Field(
        default=None,
        description="flexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.",
    )
    flocker: Optional[Flocker] = Field(
        default=None,
        description="flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
    )
    gcePersistentDisk: Optional[GcePersistentDisk] = Field(
        default=None,
        description="gcePersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    )
    gitRepo: Optional[GitRepo] = Field(
        default=None,
        description="gitRepo represents a git repository at a particular revision.\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an\nEmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir\ninto the Pod's container.",
    )
    glusterfs: Optional[Glusterfs] = Field(
        default=None,
        description="glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md",
    )
    hostPath: Optional[HostPath] = Field(
        default=None,
        description="hostPath represents a pre-existing file or directory on the host\nmachine that is directly exposed to the container. This is generally\nused for system agents or other privileged things that are allowed\nto see the host machine. Most containers will NOT need this.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n---\nTODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not\nmount host directories as read/write.",
    )
    iscsi: Optional[Iscsi] = Field(
        default=None,
        description="iscsi represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://examples.k8s.io/volumes/iscsi/README.md",
    )
    name: str = Field(
        ...,
        description="name of the volume.\nMust be a DNS_LABEL and unique within the pod.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    nfs: Optional[Nfs] = Field(
        default=None,
        description="nfs represents an NFS mount on the host that shares a pod's lifetime\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    )
    persistentVolumeClaim: Optional[PersistentVolumeClaim] = Field(
        default=None,
        description="persistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
    )
    photonPersistentDisk: Optional[PhotonPersistentDisk] = Field(
        default=None,
        description="photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
    )
    portworxVolume: Optional[PortworxVolume] = Field(
        default=None,
        description="portworxVolume represents a portworx volume attached and mounted on kubelets host machine",
    )
    projected: Optional[Projected] = Field(
        default=None,
        description="projected items for all in one resources secrets, configmaps, and downward API",
    )
    quobyte: Optional[Quobyte] = Field(
        default=None,
        description="quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
    )
    rbd: Optional[Rbd] = Field(
        default=None,
        description="rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/rbd/README.md",
    )
    scaleIO: Optional[ScaleIO] = Field(
        default=None,
        description="scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
    )
    secret: Optional[Secret1] = Field(
        default=None,
        description="secret represents a secret that should populate this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
    )
    storageos: Optional[Storageos] = Field(
        default=None,
        description="storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
    )
    vsphereVolume: Optional[VsphereVolume] = Field(
        default=None,
        description="vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
    )


class Ingress(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    annotations: Optional[Dict[str, str]] = None
    host: str
    ingressClassName: Optional[str] = None
    tlsSecretName: Optional[str] = Field(
        default=None,
        description="The name of the TLS secret, same as what is specified in a regular Kubernetes Ingress.",
    )


class ValueFrom1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    configMapKeyRef: Optional[ConfigMapKeyRef] = Field(
        default=None, description="Selects a key of a ConfigMap."
    )
    fieldRef: Optional[FieldRef] = Field(
        default=None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        default=None,
        description="Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItem1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: str = Field(
        ..., description="Name of the environment variable. Must be a C_IDENTIFIER."
    )
    value: Optional[str] = Field(
        default=None,
        description='Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to "".',
    )
    valueFrom: Optional[ValueFrom1] = Field(
        default=None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class SecretRef10(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: Optional[str] = Field(
        default=None,
        description="Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
    )
    optional: Optional[bool] = Field(
        default=None, description="Specify whether the Secret must be defined"
    )


class EnvFromItem1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    configMapRef: Optional[ConfigMapRef] = Field(
        default=None, description="The ConfigMap to select from"
    )
    prefix: Optional[str] = Field(
        default=None,
        description="An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
    )
    secretRef: Optional[SecretRef10] = Field(
        default=None, description="The Secret to select from"
    )


class HttpGet5(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    host: Optional[str] = Field(
        default=None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set\n"Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeader]] = Field(
        default=None,
        description="Custom headers to set in the request. HTTP allows repeated headers.",
    )
    path: Optional[str] = Field(
        default=None, description="Path to access on the HTTP server."
    )
    port: Union[int, str] = Field(
        ...,
        description="Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
    )
    scheme: Optional[str] = Field(
        default=None,
        description="Scheme to use for connecting to the host.\nDefaults to HTTP.",
    )


class PostStart1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    exec: Optional[Exec] = Field(
        default=None, description="Exec specifies the action to take."
    )
    httpGet: Optional[HttpGet5] = Field(
        default=None, description="HTTPGet specifies the http request to perform."
    )
    tcpSocket: Optional[TcpSocket] = Field(
        default=None,
        description="Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor the backward compatibility. There are no validation of this field and\nlifecycle hooks will fail in runtime when tcp handler is specified.",
    )


class HttpGet6(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    host: Optional[str] = Field(
        default=None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set\n"Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeader]] = Field(
        default=None,
        description="Custom headers to set in the request. HTTP allows repeated headers.",
    )
    path: Optional[str] = Field(
        default=None, description="Path to access on the HTTP server."
    )
    port: Union[int, str] = Field(
        ...,
        description="Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
    )
    scheme: Optional[str] = Field(
        default=None,
        description="Scheme to use for connecting to the host.\nDefaults to HTTP.",
    )


class PreStop1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    exec: Optional[Exec] = Field(
        default=None, description="Exec specifies the action to take."
    )
    httpGet: Optional[HttpGet6] = Field(
        default=None, description="HTTPGet specifies the http request to perform."
    )
    tcpSocket: Optional[TcpSocket] = Field(
        default=None,
        description="Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor the backward compatibility. There are no validation of this field and\nlifecycle hooks will fail in runtime when tcp handler is specified.",
    )


class Lifecycle1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    postStart: Optional[PostStart1] = Field(
        default=None,
        description="PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    )
    preStop: Optional[PreStop1] = Field(
        default=None,
        description="PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    )


class HttpGet7(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    host: Optional[str] = Field(
        default=None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set\n"Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeader]] = Field(
        default=None,
        description="Custom headers to set in the request. HTTP allows repeated headers.",
    )
    path: Optional[str] = Field(
        default=None, description="Path to access on the HTTP server."
    )
    port: Union[int, str] = Field(
        ...,
        description="Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
    )
    scheme: Optional[str] = Field(
        default=None,
        description="Scheme to use for connecting to the host.\nDefaults to HTTP.",
    )


class LivenessProbe1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    exec: Optional[Exec] = Field(
        default=None, description="Exec specifies the action to take."
    )
    failureThreshold: Optional[int] = Field(
        default=None,
        description="Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
    )
    grpc: Optional[Grpc] = Field(
        default=None, description="GRPC specifies an action involving a GRPC port."
    )
    httpGet: Optional[HttpGet7] = Field(
        default=None, description="HTTPGet specifies the http request to perform."
    )
    initialDelaySeconds: Optional[int] = Field(
        default=None,
        description="Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    periodSeconds: Optional[int] = Field(
        default=None,
        description="How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
    )
    successThreshold: Optional[int] = Field(
        default=None,
        description="Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
    )
    tcpSocket: Optional[TcpSocket] = Field(
        default=None, description="TCPSocket specifies an action involving a TCP port."
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        default=None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        default=None,
        description="Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )


class HttpGet8(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    host: Optional[str] = Field(
        default=None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set\n"Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeader]] = Field(
        default=None,
        description="Custom headers to set in the request. HTTP allows repeated headers.",
    )
    path: Optional[str] = Field(
        default=None, description="Path to access on the HTTP server."
    )
    port: Union[int, str] = Field(
        ...,
        description="Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
    )
    scheme: Optional[str] = Field(
        default=None,
        description="Scheme to use for connecting to the host.\nDefaults to HTTP.",
    )


class ReadinessProbe1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    exec: Optional[Exec] = Field(
        default=None, description="Exec specifies the action to take."
    )
    failureThreshold: Optional[int] = Field(
        default=None,
        description="Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
    )
    grpc: Optional[Grpc] = Field(
        default=None, description="GRPC specifies an action involving a GRPC port."
    )
    httpGet: Optional[HttpGet8] = Field(
        default=None, description="HTTPGet specifies the http request to perform."
    )
    initialDelaySeconds: Optional[int] = Field(
        default=None,
        description="Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    periodSeconds: Optional[int] = Field(
        default=None,
        description="How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
    )
    successThreshold: Optional[int] = Field(
        default=None,
        description="Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
    )
    tcpSocket: Optional[TcpSocket] = Field(
        default=None, description="TCPSocket specifies an action involving a TCP port."
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        default=None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        default=None,
        description="Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )


class Resources2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    claims: Optional[List[Claim]] = Field(
        default=None,
        description="Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
    )
    limits: Optional[Dict[str, Union[int, str]]] = Field(
        default=None,
        description="Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    )
    requests: Optional[Dict[str, Union[int, str]]] = Field(
        default=None,
        description="Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    )


class SecurityContext1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    allowPrivilegeEscalation: Optional[bool] = Field(
        default=None,
        description="AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.",
    )
    capabilities: Optional[Capabilities] = Field(
        default=None,
        description="The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    privileged: Optional[bool] = Field(
        default=None,
        description="Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    procMount: Optional[str] = Field(
        default=None,
        description="procMount denotes the type of proc mount to use for the containers.\nThe default is DefaultProcMount which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    readOnlyRootFilesystem: Optional[bool] = Field(
        default=None,
        description="Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    runAsGroup: Optional[int] = Field(
        default=None,
        description="The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    runAsNonRoot: Optional[bool] = Field(
        default=None,
        description="Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.",
    )
    runAsUser: Optional[int] = Field(
        default=None,
        description="The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    seLinuxOptions: Optional[SeLinuxOptions] = Field(
        default=None,
        description="The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    seccompProfile: Optional[SeccompProfile] = Field(
        default=None,
        description="The seccomp options to use by this container. If seccomp options are\nprovided at both the pod & container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.",
    )
    windowsOptions: Optional[WindowsOptions] = Field(
        default=None,
        description="The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.",
    )


class HttpGet9(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    host: Optional[str] = Field(
        default=None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set\n"Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeader]] = Field(
        default=None,
        description="Custom headers to set in the request. HTTP allows repeated headers.",
    )
    path: Optional[str] = Field(
        default=None, description="Path to access on the HTTP server."
    )
    port: Union[int, str] = Field(
        ...,
        description="Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
    )
    scheme: Optional[str] = Field(
        default=None,
        description="Scheme to use for connecting to the host.\nDefaults to HTTP.",
    )


class StartupProbe1(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    exec: Optional[Exec] = Field(
        default=None, description="Exec specifies the action to take."
    )
    failureThreshold: Optional[int] = Field(
        default=None,
        description="Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.",
    )
    grpc: Optional[Grpc] = Field(
        default=None, description="GRPC specifies an action involving a GRPC port."
    )
    httpGet: Optional[HttpGet9] = Field(
        default=None, description="HTTPGet specifies the http request to perform."
    )
    initialDelaySeconds: Optional[int] = Field(
        default=None,
        description="Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    periodSeconds: Optional[int] = Field(
        default=None,
        description="How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.",
    )
    successThreshold: Optional[int] = Field(
        default=None,
        description="Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
    )
    tcpSocket: Optional[TcpSocket] = Field(
        default=None, description="TCPSocket specifies an action involving a TCP port."
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        default=None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        default=None,
        description="Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )


class InitContainer(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    args: Optional[List[str]] = Field(
        default=None,
        description='Arguments to the entrypoint.\nThe container image\'s CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container\'s environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will\nproduce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    command: Optional[List[str]] = Field(
        default=None,
        description='Entrypoint array. Not executed within a shell.\nThe container image\'s ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container\'s environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will\nproduce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    env: Optional[List[EnvItem1]] = Field(
        default=None,
        description="List of environment variables to set in the container.\nCannot be updated.",
    )
    envFrom: Optional[List[EnvFromItem1]] = Field(
        default=None,
        description="List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.",
    )
    image: Optional[str] = Field(
        default=None,
        description="Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.",
    )
    imagePullPolicy: Optional[str] = Field(
        default=None,
        description="Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
    )
    lifecycle: Optional[Lifecycle1] = Field(
        default=None,
        description="Actions that the management system should take in response to container lifecycle events.\nCannot be updated.",
    )
    livenessProbe: Optional[LivenessProbe1] = Field(
        default=None,
        description="Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    name: str = Field(
        ...,
        description="Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.",
    )
    ports: Optional[List[Port]] = Field(
        default=None,
        description='List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default "0.0.0.0" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.',
    )
    readinessProbe: Optional[ReadinessProbe1] = Field(
        default=None,
        description="Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    resizePolicy: Optional[List[ResizePolicyItem]] = Field(
        default=None, description="Resources resize policy for the container."
    )
    resources: Optional[Resources2] = Field(
        default=None,
        description="Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    )
    restartPolicy: Optional[str] = Field(
        default=None,
        description='RestartPolicy defines the restart behavior of individual containers in a pod.\nThis field may only be set for init containers, and the only allowed value is "Always".\nFor non-init containers or when this field is not specified,\nthe restart behavior is defined by the Pod\'s restart policy and the container type.\nSetting the RestartPolicy as "Always" for the init container will have the following effect:\nthis init container will be continually restarted on\nexit until all regular containers have terminated. Once all regular\ncontainers have completed, all init containers with restartPolicy "Always"\nwill be shut down. This lifecycle differs from normal init containers and\nis often referred to as a "sidecar" container. Although this init\ncontainer still starts in the init container sequence, it does not wait\nfor the container to complete before proceeding to the next init\ncontainer. Instead, the next init container starts immediately after this\ninit container is started, or after any startupProbe has successfully\ncompleted.',
    )
    securityContext: Optional[SecurityContext1] = Field(
        default=None,
        description="SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
    )
    startupProbe: Optional[StartupProbe1] = Field(
        default=None,
        description="StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    stdin: Optional[bool] = Field(
        default=None,
        description="Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.",
    )
    stdinOnce: Optional[bool] = Field(
        default=None,
        description="Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false",
    )
    terminationMessagePath: Optional[str] = Field(
        default=None,
        description="Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.",
    )
    terminationMessagePolicy: Optional[str] = Field(
        default=None,
        description="Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.",
    )
    tty: Optional[bool] = Field(
        default=None,
        description="Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.",
    )
    volumeDevices: Optional[List[VolumeDevice]] = Field(
        default=None,
        description="volumeDevices is the list of block devices to be used by the container.",
    )
    volumeMounts: Optional[List[VolumeMount]] = Field(
        default=None,
        description="Pod volumes to mount into the container's filesystem.\nCannot be updated.",
    )
    workingDir: Optional[str] = Field(
        default=None,
        description="Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.",
    )


class ValueFrom2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    configMapKeyRef: Optional[ConfigMapKeyRef] = Field(
        default=None, description="Selects a key of a ConfigMap."
    )
    fieldRef: Optional[FieldRef] = Field(
        default=None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        default=None,
        description="Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItem2(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    name: str = Field(
        ..., description="Name of the environment variable. Must be a C_IDENTIFIER."
    )
    value: Optional[str] = Field(
        default=None,
        description='Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to "".',
    )
    valueFrom: Optional[ValueFrom2] = Field(
        default=None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class Resources3(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    claims: Optional[List[Claim]] = Field(
        default=None,
        description="Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
    )
    limits: Optional[Dict[str, Union[int, str]]] = Field(
        default=None,
        description="Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    )
    requests: Optional[Dict[str, Union[int, str]]] = Field(
        default=None,
        description="Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    )


class Storage(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    className: Optional[str] = None
    mountPath: str = Field(
        default="/workspace",
        description="The absolute mount path for the session volume",
    )
    size: Union[int, str] = "1Gi"


class Session(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    args: Optional[List[str]] = Field(
        default=None,
        description="The arguments to run in the session container, if omitted it will use the Docker image CMD",
    )
    command: Optional[List[str]] = Field(
        default=None,
        description="The command to run in the session container, if omitted it will use the Docker image ENTRYPOINT",
    )
    env: Optional[List[EnvItem2]] = None
    extraVolumeMounts: Optional[List[ExtraVolumeMount]] = Field(
        default=None, description="Additional volume mounts for the session container"
    )
    image: str
    port: int = Field(
        ...,
        description="The TCP port on the pod where the session can be accessed.\nIf the session has authentication enabled then the ingress and service will point to the authentication container\nand the authentication proxy container will proxy to this port. If authentication is disabled then the ingress and service\nroute directly to this port. Note that renku reserves the highest TCP value 65535 to run the authentication proxy.",
        gt=0,
        lt=65535,
    )
    resources: Optional[Resources3] = Field(
        default=None,
        description="Resource requirements and limits in the same format as a Pod in Kubernetes",
    )
    runAsGroup: int = Field(default=1000, ge=0)
    runAsUser: int = Field(default=1000, ge=0)
    shmSize: Optional[Union[int, str]] = Field(
        default=None, description="Size of /dev/shm"
    )
    storage: Storage = {}
    urlPath: str = Field(
        default="/",
        description="The path where the session can be accessed. If an ingress is enabled then this will be\nthe path prefix for the ingress.",
    )
    workingDir: Optional[str] = Field(
        default=None,
        description="The abolute path for the working directory of the session container, if omitted it will use the image\nworking directory.",
    )


class Spec(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    adoptSecrets: bool = Field(
        ...,
        description="Whether to adopt all secrets referred to by name in this CR. Adopted secrets will be deleted when the CR is deleted.",
    )
    authentication: Optional[Authentication] = Field(
        default=None, description="Authentication configuration for the session"
    )
    codeRepositories: Optional[List[CodeRepository]] = Field(
        default=None,
        description="A list of code repositories and associated configuration that will be cloned in the session",
    )
    culling: Optional[Culling] = Field(
        default=None, description="Culling configuration"
    )
    dataSources: Optional[List[DataSource]] = Field(
        default=None,
        description="A list of data sources that should be added to the session",
    )
    extraContainers: Optional[List[ExtraContainer]] = Field(
        default=None,
        description="Additional containers to add to the session statefulset.\nNOTE: The container names provided will be partially overwritten and randomized to avoid collisions",
    )
    extraVolumes: Optional[List[ExtraVolume]] = Field(
        default=None,
        description="Additional volumes to include in the statefulset for a session",
    )
    hibernated: bool = Field(
        ...,
        description="Will hibernate the session, scaling the session's statefulset to zero.",
    )
    ingress: Optional[Ingress] = Field(
        default=None,
        description="Configuration for an ingress to the session, if omitted a Kubernetes Ingress will not be created",
    )
    initContainers: Optional[List[InitContainer]] = Field(
        default=None,
        description="Additional init containers to add to the session statefulset\nNOTE: The container names provided will be partially overwritten and randomized to avoid collisions",
    )
    session: Session = Field(
        ...,
        description="Specification for the main session container that the user will access and use",
    )


class Condition(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: str
    type: str


class ContainerCounts(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    ready: Optional[int] = None
    total: Optional[int] = None


class InitContainerCounts(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    ready: Optional[int] = None
    total: Optional[int] = None


class State(Enum):
    Running = "Running"
    Failed = "Failed"
    Hibernated = "Hibernated"
    NotReady = "NotReady"
    RunningDegraded = "RunningDegraded"


class Status(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions store the status conditions of the AmaltheaSessions. This is a standard thing that\nmany operators implement see https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties",
    )
    containerCounts: Optional[ContainerCounts] = Field(
        default=None,
        description="Counts of the total and ready containers, can represent either regular or init containers.",
    )
    failingSince: Optional[datetime] = None
    hibernatedSince: Optional[datetime] = None
    idle: Optional[bool] = None
    idleSince: Optional[datetime] = None
    initContainerCounts: Optional[InitContainerCounts] = Field(
        default=None,
        description="Counts of the total and ready containers, can represent either regular or init containers.",
    )
    state: State = "NotReady"
    url: Optional[str] = None


class Model(BaseCRD):
    model_config = ConfigDict(
        extra="allow",
    )
    apiVersion: Optional[str] = Field(
        default=None,
        description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    )
    kind: Optional[str] = Field(
        default=None,
        description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Optional[Spec] = Field(
        default=None,
        description="AmaltheaSessionSpec defines the desired state of AmaltheaSession",
    )
    status: Optional[Status] = Field(
        default=None,
        description="AmaltheaSessionStatus defines the observed state of AmaltheaSession",
    )
