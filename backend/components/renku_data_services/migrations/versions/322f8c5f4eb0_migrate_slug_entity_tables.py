"""migrate slug entity tables

Revision ID: 322f8c5f4eb0
Revises: b0a52ff8335a
Create Date: 2025-03-11 22:19:04.256797

"""

import sqlalchemy as sa
from alembic import op

from renku_data_services.utils.sqlalchemy import ULIDType

# revision identifiers, used by Alembic.
revision = "322f8c5f4eb0"
down_revision = "b0a52ff8335a"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "entity_slugs_old",
        sa.Column("project_id", ULIDType(), nullable=True),
        schema="common",
    )
    op.add_column(
        "entity_slugs_old",
        sa.Column("data_connector_id", ULIDType(), nullable=True),
        schema="common",
    )
    op.create_index(
        op.f("ix_common_entity_slugs_old_data_connector_id"),
        "entity_slugs_old",
        ["data_connector_id"],
        unique=False,
        schema="common",
    )
    op.create_index(
        op.f("ix_common_entity_slugs_old_project_id"), "entity_slugs_old", ["project_id"], unique=False, schema="common"
    )
    op.create_foreign_key(
        "entity_slugs_data_connector_id_fk",
        "entity_slugs_old",
        "data_connectors",
        ["data_connector_id"],
        ["id"],
        source_schema="common",
        referent_schema="storage",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "entity_slugs_project_id_fk",
        "entity_slugs_old",
        "projects",
        ["project_id"],
        ["id"],
        source_schema="common",
        referent_schema="projects",
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###
    # Carry over the project ID and data connector ID from the current table.
    # We need these because we need to distinguish beteween a data connector slug being migrated
    # from /user1/dc1 to /user2/project3/dc1, in this case the actual slug is the same but the
    # path to it from /user1 to /user2/project3 has changed. So the entry in the OldEntitySlug
    # will have a namespace_id, data_connector_id and a slug and point to a slug in the EntitySlug table with
    # a namespace_id, project_id, data_connector_id and slug
    op.execute(
        "UPDATE common.entity_slugs_old "
        "SET project_id = common.entity_slugs.project_id, data_connector_id = common.entity_slugs.data_connector_id "
        "FROM common.entity_slugs "
        "WHERE common.entity_slugs_old.latest_slug_id = common.entity_slugs.id "
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("entity_slugs_project_id_fk", "entity_slugs_old", schema="common", type_="foreignkey")
    op.drop_constraint("entity_slugs_data_connector_id_fk", "entity_slugs_old", schema="common", type_="foreignkey")
    op.drop_index(op.f("ix_common_entity_slugs_old_project_id"), table_name="entity_slugs_old", schema="common")
    op.drop_index(op.f("ix_common_entity_slugs_old_data_connector_id"), table_name="entity_slugs_old", schema="common")
    op.drop_column("entity_slugs_old", "data_connector_id", schema="common")
    op.drop_column("entity_slugs_old", "project_id", schema="common")
    # ### end Alembic commands ###
